// AUTOGENERATED BY H2O at 2015-03-20T15:19:18.095-07:00
// 0.3.0.99999
//
// Standalone prediction code with sample test data for GBMModel named GBMModel__8fe38c53c0ae591a42846386ad74498e
//
// How to download, compile and execute:
//     mkdir tmpdir
//     cd tmpdir
//     curl http:/17.246.49.83/17.246.49.83:54321/h2o-model.jar > h2o-model.jar
//     curl http:/17.246.49.83/17.246.49.83:54321/2/GBMModelView.java?_modelKey=GBMModel__8fe38c53c0ae591a42846386ad74498e > GBMModel__8fe38c53c0ae591a42846386ad74498e.java
//     javac -cp h2o-model.jar -J-Xmx2g -J-XX:MaxPermSize=128m GBMModel__8fe38c53c0ae591a42846386ad74498e.java
//     java -cp h2o-model.jar:. -Xmx2g -XX:MaxPermSize=256m -XX:ReservedCodeCacheSize=256m GBMModel__8fe38c53c0ae591a42846386ad74498e
//
//     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
import java.util.Map;
import hex.genmodel.GenModel;

public class GBMModel__8fe38c53c0ae591a42846386ad74498e extends GenModel {

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 15; }
  public int nclasses() { return 2; }
  public ModelCategory getModelCategory() { return ModelCategory.Binomial; }

  // Names of columns used by model.
  public static final String[] NAMES = new String[]{"vmail","vmail_msgs","day_mins","day_calls","day_charge","eve_mins","eve_calls","eve_charge","night_mins","night_calls","night_charge","intl_mins","intl_calls","intl_charge","svc_calls"};
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* vmail */ GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_0.VALUES,
    /* vmail_msgs */ GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_1.VALUES,
    /* day_mins */ GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_2.VALUES,
    /* day_calls */ GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_3.VALUES,
    /* day_charge */ GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_4.VALUES,
    /* eve_mins */ GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_5.VALUES,
    /* eve_calls */ GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_6.VALUES,
    /* eve_charge */ GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_7.VALUES,
    /* night_mins */ GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_8.VALUES,
    /* night_calls */ GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_9.VALUES,
    /* night_charge */ GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_10.VALUES,
    /* intl_mins */ GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_11.VALUES,
    /* intl_calls */ GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_12.VALUES,
    /* intl_charge */ GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_13.VALUES,
    /* svc_calls */ GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_14.VALUES,
    /* churn */ GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_15.VALUES
  };
  // Prior class distribution
  public static final float[] PRIOR_CLASS_DISTRIB = {0.14479229f,0.8552077f};
  // Class distribution used for model building
  public static final float[] MODEL_CLASS_DISTRIB = {0.14479229f,0.8552077f};

  public GBMModel__8fe38c53c0ae591a42846386ad74498e() { super(NAMES,DOMAINS); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final float[] score0( double[] data, float[] preds ) {
    java.util.Arrays.fill(preds,0f);
    float[] fdata = hex.genmodel.GenModel.SharedTree_fclean(data);
GBMModel__8fe38c53c0ae591a42846386ad74498e_Forest_0.score0(fdata,preds);
GBMModel__8fe38c53c0ae591a42846386ad74498e_Forest_1.score0(fdata,preds);
GBMModel__8fe38c53c0ae591a42846386ad74498e_Forest_2.score0(fdata,preds);
GBMModel__8fe38c53c0ae591a42846386ad74498e_Forest_3.score0(fdata,preds);
GBMModel__8fe38c53c0ae591a42846386ad74498e_Forest_4.score0(fdata,preds);
GBMModel__8fe38c53c0ae591a42846386ad74498e_Forest_5.score0(fdata,preds);
GBMModel__8fe38c53c0ae591a42846386ad74498e_Forest_6.score0(fdata,preds);
GBMModel__8fe38c53c0ae591a42846386ad74498e_Forest_7.score0(fdata,preds);
GBMModel__8fe38c53c0ae591a42846386ad74498e_Forest_8.score0(fdata,preds);
GBMModel__8fe38c53c0ae591a42846386ad74498e_Forest_9.score0(fdata,preds);
    preds[1] += -0.8880220558742132;
    preds[2] = - preds[1];
    hex.genmodel.GenModel.GBM_rescale(data,preds);
    return preds;
  }
}
// The class representing column vmail
class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_0 {
  public static final String[] VALUES = new String[2];
  static {
    GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_0_0.fill(VALUES);
  }
  static final class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_0_0 {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "1";
    }
  }
}
// The class representing column vmail_msgs
class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_1 {
  public static final String[] VALUES = new String[46];
  static {
    GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_1_0.fill(VALUES);
  }
  static final class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_1_0 {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "10";
      sa[2] = "11";
      sa[3] = "12";
      sa[4] = "13";
      sa[5] = "14";
      sa[6] = "15";
      sa[7] = "16";
      sa[8] = "17";
      sa[9] = "18";
      sa[10] = "19";
      sa[11] = "20";
      sa[12] = "21";
      sa[13] = "22";
      sa[14] = "23";
      sa[15] = "24";
      sa[16] = "25";
      sa[17] = "26";
      sa[18] = "27";
      sa[19] = "28";
      sa[20] = "29";
      sa[21] = "30";
      sa[22] = "31";
      sa[23] = "32";
      sa[24] = "33";
      sa[25] = "34";
      sa[26] = "35";
      sa[27] = "36";
      sa[28] = "37";
      sa[29] = "38";
      sa[30] = "39";
      sa[31] = "4";
      sa[32] = "40";
      sa[33] = "41";
      sa[34] = "42";
      sa[35] = "43";
      sa[36] = "44";
      sa[37] = "45";
      sa[38] = "46";
      sa[39] = "47";
      sa[40] = "48";
      sa[41] = "49";
      sa[42] = "50";
      sa[43] = "51";
      sa[44] = "8";
      sa[45] = "9";
    }
  }
}
// The class representing column day_mins
class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_2 {
  public static final String[] VALUES = new String[1664];
  static {
    GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_2_0.fill(VALUES);
  }
  static final class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_2_0 {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "100";
      sa[2] = "100.1";
      sa[3] = "100.8";
      sa[4] = "101";
      sa[5] = "101.1";
      sa[6] = "101.2";
      sa[7] = "101.4";
      sa[8] = "101.7";
      sa[9] = "101.9";
      sa[10] = "102";
      sa[11] = "102.1";
      sa[12] = "102.3";
      sa[13] = "102.6";
      sa[14] = "102.7";
      sa[15] = "102.8";
      sa[16] = "103";
      sa[17] = "103.1";
      sa[18] = "103.2";
      sa[19] = "103.3";
      sa[20] = "103.4";
      sa[21] = "103.5";
      sa[22] = "103.7";
      sa[23] = "104";
      sa[24] = "104.6";
      sa[25] = "104.7";
      sa[26] = "104.9";
      sa[27] = "105";
      sa[28] = "105.2";
      sa[29] = "105.3";
      sa[30] = "105.4";
      sa[31] = "105.6";
      sa[32] = "105.7";
      sa[33] = "105.8";
      sa[34] = "105.9";
      sa[35] = "106.1";
      sa[36] = "106.4";
      sa[37] = "106.5";
      sa[38] = "106.6";
      sa[39] = "106.7";
      sa[40] = "107";
      sa[41] = "107.2";
      sa[42] = "107.3";
      sa[43] = "107.5";
      sa[44] = "107.7";
      sa[45] = "107.8";
      sa[46] = "107.9";
      sa[47] = "108";
      sa[48] = "108.3";
      sa[49] = "108.6";
      sa[50] = "109";
      sa[51] = "109.1";
      sa[52] = "109.2";
      sa[53] = "109.4";
      sa[54] = "109.5";
      sa[55] = "109.6";
      sa[56] = "109.7";
      sa[57] = "109.8";
      sa[58] = "109.9";
      sa[59] = "110";
      sa[60] = "110.1";
      sa[61] = "110.3";
      sa[62] = "110.4";
      sa[63] = "110.5";
      sa[64] = "110.9";
      sa[65] = "111";
      sa[66] = "111.1";
      sa[67] = "111.2";
      sa[68] = "111.4";
      sa[69] = "111.6";
      sa[70] = "111.7";
      sa[71] = "111.8";
      sa[72] = "111.9";
      sa[73] = "112";
      sa[74] = "112.2";
      sa[75] = "112.6";
      sa[76] = "112.7";
      sa[77] = "112.8";
      sa[78] = "113";
      sa[79] = "113.1";
      sa[80] = "113.2";
      sa[81] = "113.3";
      sa[82] = "113.6";
      sa[83] = "113.7";
      sa[84] = "113.8";
      sa[85] = "113.9";
      sa[86] = "114.1";
      sa[87] = "114.3";
      sa[88] = "114.4";
      sa[89] = "114.8";
      sa[90] = "115";
      sa[91] = "115.1";
      sa[92] = "115.3";
      sa[93] = "115.4";
      sa[94] = "115.5";
      sa[95] = "115.6";
      sa[96] = "115.7";
      sa[97] = "115.8";
      sa[98] = "115.9";
      sa[99] = "116";
      sa[100] = "116.1";
      sa[101] = "116.2";
      sa[102] = "116.4";
      sa[103] = "116.7";
      sa[104] = "116.8";
      sa[105] = "116.9";
      sa[106] = "117.1";
      sa[107] = "117.3";
      sa[108] = "117.5";
      sa[109] = "117.6";
      sa[110] = "117.8";
      sa[111] = "117.9";
      sa[112] = "118";
      sa[113] = "118.1";
      sa[114] = "118.2";
      sa[115] = "118.4";
      sa[116] = "118.5";
      sa[117] = "118.6";
      sa[118] = "118.7";
      sa[119] = "118.9";
      sa[120] = "119";
      sa[121] = "119.1";
      sa[122] = "119.2";
      sa[123] = "119.3";
      sa[124] = "119.4";
      sa[125] = "119.6";
      sa[126] = "119.7";
      sa[127] = "12.5";
      sa[128] = "120.3";
      sa[129] = "120.5";
      sa[130] = "120.7";
      sa[131] = "120.8";
      sa[132] = "120.9";
      sa[133] = "121";
      sa[134] = "121.1";
      sa[135] = "121.5";
      sa[136] = "121.6";
      sa[137] = "121.7";
      sa[138] = "121.8";
      sa[139] = "122";
      sa[140] = "122.2";
      sa[141] = "122.3";
      sa[142] = "122.4";
      sa[143] = "122.5";
      sa[144] = "122.8";
      sa[145] = "122.9";
      sa[146] = "123";
      sa[147] = "123.1";
      sa[148] = "123.2";
      sa[149] = "123.3";
      sa[150] = "123.7";
      sa[151] = "123.8";
      sa[152] = "124";
      sa[153] = "124.1";
      sa[154] = "124.2";
      sa[155] = "124.3";
      sa[156] = "124.4";
      sa[157] = "124.5";
      sa[158] = "124.6";
      sa[159] = "124.7";
      sa[160] = "124.8";
      sa[161] = "124.9";
      sa[162] = "125";
      sa[163] = "125.1";
      sa[164] = "125.2";
      sa[165] = "125.3";
      sa[166] = "125.4";
      sa[167] = "125.5";
      sa[168] = "125.6";
      sa[169] = "125.7";
      sa[170] = "125.8";
      sa[171] = "125.9";
      sa[172] = "126";
      sa[173] = "126.1";
      sa[174] = "126.3";
      sa[175] = "126.7";
      sa[176] = "126.8";
      sa[177] = "126.9";
      sa[178] = "127";
      sa[179] = "127.1";
      sa[180] = "127.2";
      sa[181] = "127.3";
      sa[182] = "127.4";
      sa[183] = "127.7";
      sa[184] = "127.8";
      sa[185] = "127.9";
      sa[186] = "128.1";
      sa[187] = "128.2";
      sa[188] = "128.3";
      sa[189] = "128.5";
      sa[190] = "128.6";
      sa[191] = "128.7";
      sa[192] = "128.8";
      sa[193] = "129";
      sa[194] = "129.1";
      sa[195] = "129.2";
      sa[196] = "129.3";
      sa[197] = "129.4";
      sa[198] = "129.5";
      sa[199] = "129.6";
      sa[200] = "129.7";
      sa[201] = "129.9";
      sa[202] = "130";
      sa[203] = "130.1";
      sa[204] = "130.2";
      sa[205] = "130.5";
      sa[206] = "130.6";
      sa[207] = "130.7";
      sa[208] = "130.8";
      sa[209] = "130.9";
      sa[210] = "131.1";
      sa[211] = "131.2";
      sa[212] = "131.4";
      sa[213] = "131.5";
      sa[214] = "131.6";
      sa[215] = "131.7";
      sa[216] = "131.8";
      sa[217] = "131.9";
      sa[218] = "132";
      sa[219] = "132.1";
      sa[220] = "132.4";
      sa[221] = "132.6";
      sa[222] = "132.7";
      sa[223] = "132.9";
      sa[224] = "133";
      sa[225] = "133.1";
      sa[226] = "133.2";
      sa[227] = "133.3";
      sa[228] = "133.4";
      sa[229] = "133.5";
      sa[230] = "133.7";
      sa[231] = "133.8";
      sa[232] = "133.9";
      sa[233] = "134";
      sa[234] = "134.1";
      sa[235] = "134.2";
      sa[236] = "134.3";
      sa[237] = "134.4";
      sa[238] = "134.5";
      sa[239] = "134.7";
      sa[240] = "134.8";
      sa[241] = "134.9";
      sa[242] = "135";
      sa[243] = "135.1";
      sa[244] = "135.2";
      sa[245] = "135.4";
      sa[246] = "135.7";
      sa[247] = "135.8";
      sa[248] = "135.9";
      sa[249] = "136.1";
      sa[250] = "136.2";
      sa[251] = "136.3";
      sa[252] = "136.4";
      sa[253] = "136.6";
      sa[254] = "136.7";
      sa[255] = "136.8";
      sa[256] = "137";
      sa[257] = "137.1";
      sa[258] = "137.2";
      sa[259] = "137.3";
      sa[260] = "137.4";
      sa[261] = "137.5";
      sa[262] = "137.6";
      sa[263] = "137.8";
      sa[264] = "137.9";
      sa[265] = "138.1";
      sa[266] = "138.3";
      sa[267] = "138.4";
      sa[268] = "138.5";
      sa[269] = "138.6";
      sa[270] = "138.7";
      sa[271] = "138.8";
      sa[272] = "138.9";
      sa[273] = "139";
      sa[274] = "139.1";
      sa[275] = "139.2";
      sa[276] = "139.3";
      sa[277] = "139.4";
      sa[278] = "139.5";
      sa[279] = "139.6";
      sa[280] = "139.7";
      sa[281] = "139.8";
      sa[282] = "139.9";
      sa[283] = "140";
      sa[284] = "140.1";
      sa[285] = "140.2";
      sa[286] = "140.4";
      sa[287] = "140.5";
      sa[288] = "140.6";
      sa[289] = "140.7";
      sa[290] = "140.8";
      sa[291] = "141";
      sa[292] = "141.1";
      sa[293] = "141.2";
      sa[294] = "141.3";
      sa[295] = "141.4";
      sa[296] = "141.5";
      sa[297] = "141.6";
      sa[298] = "141.7";
      sa[299] = "141.8";
      sa[300] = "141.9";
      sa[301] = "142";
      sa[302] = "142.1";
      sa[303] = "142.2";
      sa[304] = "142.3";
      sa[305] = "142.4";
      sa[306] = "142.5";
      sa[307] = "142.6";
      sa[308] = "142.8";
      sa[309] = "142.9";
      sa[310] = "143";
      sa[311] = "143.1";
      sa[312] = "143.2";
      sa[313] = "143.3";
      sa[314] = "143.4";
      sa[315] = "143.5";
      sa[316] = "143.6";
      sa[317] = "143.7";
      sa[318] = "143.8";
      sa[319] = "143.9";
      sa[320] = "144";
      sa[321] = "144.1";
      sa[322] = "144.2";
      sa[323] = "144.3";
      sa[324] = "144.4";
      sa[325] = "144.5";
      sa[326] = "144.6";
      sa[327] = "144.8";
      sa[328] = "144.9";
      sa[329] = "145";
      sa[330] = "145.1";
      sa[331] = "145.3";
      sa[332] = "145.4";
      sa[333] = "145.5";
      sa[334] = "145.6";
      sa[335] = "145.7";
      sa[336] = "145.8";
      sa[337] = "145.9";
      sa[338] = "146";
      sa[339] = "146.1";
      sa[340] = "146.2";
      sa[341] = "146.3";
      sa[342] = "146.4";
      sa[343] = "146.5";
      sa[344] = "146.6";
      sa[345] = "146.7";
      sa[346] = "146.8";
      sa[347] = "146.9";
      sa[348] = "147";
      sa[349] = "147.1";
      sa[350] = "147.2";
      sa[351] = "147.5";
      sa[352] = "147.7";
      sa[353] = "147.8";
      sa[354] = "147.9";
      sa[355] = "148.1";
      sa[356] = "148.2";
      sa[357] = "148.3";
      sa[358] = "148.4";
      sa[359] = "148.5";
      sa[360] = "148.6";
      sa[361] = "148.7";
      sa[362] = "148.8";
      sa[363] = "149";
      sa[364] = "149.2";
      sa[365] = "149.3";
      sa[366] = "149.4";
      sa[367] = "149.6";
      sa[368] = "149.7";
      sa[369] = "149.8";
      sa[370] = "149.9";
      sa[371] = "150";
      sa[372] = "150.1";
      sa[373] = "150.2";
      sa[374] = "150.3";
      sa[375] = "150.4";
      sa[376] = "150.5";
      sa[377] = "150.6";
      sa[378] = "150.7";
      sa[379] = "150.8";
      sa[380] = "150.9";
      sa[381] = "151";
      sa[382] = "151.1";
      sa[383] = "151.4";
      sa[384] = "151.5";
      sa[385] = "151.6";
      sa[386] = "151.7";
      sa[387] = "151.8";
      sa[388] = "152";
      sa[389] = "152.1";
      sa[390] = "152.2";
      sa[391] = "152.3";
      sa[392] = "152.4";
      sa[393] = "152.5";
      sa[394] = "152.6";
      sa[395] = "152.7";
      sa[396] = "152.8";
      sa[397] = "152.9";
      sa[398] = "153";
      sa[399] = "153.1";
      sa[400] = "153.2";
      sa[401] = "153.3";
      sa[402] = "153.4";
      sa[403] = "153.5";
      sa[404] = "153.6";
      sa[405] = "153.7";
      sa[406] = "153.8";
      sa[407] = "153.9";
      sa[408] = "154";
      sa[409] = "154.1";
      sa[410] = "154.2";
      sa[411] = "154.3";
      sa[412] = "154.4";
      sa[413] = "154.5";
      sa[414] = "154.6";
      sa[415] = "154.7";
      sa[416] = "154.8";
      sa[417] = "155";
      sa[418] = "155.1";
      sa[419] = "155.2";
      sa[420] = "155.3";
      sa[421] = "155.4";
      sa[422] = "155.5";
      sa[423] = "155.7";
      sa[424] = "155.9";
      sa[425] = "156";
      sa[426] = "156.1";
      sa[427] = "156.2";
      sa[428] = "156.4";
      sa[429] = "156.5";
      sa[430] = "156.6";
      sa[431] = "156.7";
      sa[432] = "156.8";
      sa[433] = "156.9";
      sa[434] = "157";
      sa[435] = "157.1";
      sa[436] = "157.2";
      sa[437] = "157.3";
      sa[438] = "157.4";
      sa[439] = "157.5";
      sa[440] = "157.6";
      sa[441] = "157.7";
      sa[442] = "157.8";
      sa[443] = "157.9";
      sa[444] = "158";
      sa[445] = "158.1";
      sa[446] = "158.4";
      sa[447] = "158.6";
      sa[448] = "158.7";
      sa[449] = "158.8";
      sa[450] = "158.9";
      sa[451] = "159";
      sa[452] = "159.1";
      sa[453] = "159.3";
      sa[454] = "159.4";
      sa[455] = "159.5";
      sa[456] = "159.6";
      sa[457] = "159.7";
      sa[458] = "159.8";
      sa[459] = "159.9";
      sa[460] = "160";
      sa[461] = "160.1";
      sa[462] = "160.2";
      sa[463] = "160.3";
      sa[464] = "160.4";
      sa[465] = "160.5";
      sa[466] = "160.6";
      sa[467] = "160.7";
      sa[468] = "160.8";
      sa[469] = "160.9";
      sa[470] = "161";
      sa[471] = "161.1";
      sa[472] = "161.2";
      sa[473] = "161.3";
      sa[474] = "161.4";
      sa[475] = "161.5";
      sa[476] = "161.6";
      sa[477] = "161.7";
      sa[478] = "161.8";
      sa[479] = "161.9";
      sa[480] = "162";
      sa[481] = "162.1";
      sa[482] = "162.3";
      sa[483] = "162.4";
      sa[484] = "162.6";
      sa[485] = "162.7";
      sa[486] = "162.8";
      sa[487] = "163";
      sa[488] = "163.1";
      sa[489] = "163.2";
      sa[490] = "163.3";
      sa[491] = "163.4";
      sa[492] = "163.5";
      sa[493] = "163.6";
      sa[494] = "163.7";
      sa[495] = "163.8";
      sa[496] = "164";
      sa[497] = "164.1";
      sa[498] = "164.2";
      sa[499] = "164.3";
      sa[500] = "164.5";
      sa[501] = "164.6";
      sa[502] = "164.8";
      sa[503] = "164.9";
      sa[504] = "165";
      sa[505] = "165.1";
      sa[506] = "165.3";
      sa[507] = "165.4";
      sa[508] = "165.5";
      sa[509] = "165.6";
      sa[510] = "165.7";
      sa[511] = "165.8";
      sa[512] = "165.9";
      sa[513] = "166";
      sa[514] = "166.1";
      sa[515] = "166.2";
      sa[516] = "166.3";
      sa[517] = "166.4";
      sa[518] = "166.5";
      sa[519] = "166.6";
      sa[520] = "166.7";
      sa[521] = "166.8";
      sa[522] = "166.9";
      sa[523] = "167.1";
      sa[524] = "167.3";
      sa[525] = "167.4";
      sa[526] = "167.5";
      sa[527] = "167.6";
      sa[528] = "167.7";
      sa[529] = "167.8";
      sa[530] = "167.9";
      sa[531] = "168";
      sa[532] = "168.2";
      sa[533] = "168.3";
      sa[534] = "168.4";
      sa[535] = "168.6";
      sa[536] = "168.8";
      sa[537] = "168.9";
      sa[538] = "169";
      sa[539] = "169.1";
      sa[540] = "169.2";
      sa[541] = "169.3";
      sa[542] = "169.4";
      sa[543] = "169.5";
      sa[544] = "169.6";
      sa[545] = "169.7";
      sa[546] = "169.8";
      sa[547] = "169.9";
      sa[548] = "17.6";
      sa[549] = "170.1";
      sa[550] = "170.2";
      sa[551] = "170.4";
      sa[552] = "170.5";
      sa[553] = "170.6";
      sa[554] = "170.7";
      sa[555] = "170.8";
      sa[556] = "170.9";
      sa[557] = "171.1";
      sa[558] = "171.2";
      sa[559] = "171.4";
      sa[560] = "171.5";
      sa[561] = "171.6";
      sa[562] = "171.7";
      sa[563] = "171.8";
      sa[564] = "171.9";
      sa[565] = "172";
      sa[566] = "172.1";
      sa[567] = "172.2";
      sa[568] = "172.3";
      sa[569] = "172.4";
      sa[570] = "172.5";
      sa[571] = "172.7";
      sa[572] = "172.8";
      sa[573] = "172.9";
      sa[574] = "173";
      sa[575] = "173.1";
      sa[576] = "173.2";
      sa[577] = "173.4";
      sa[578] = "173.5";
      sa[579] = "173.6";
      sa[580] = "173.7";
      sa[581] = "173.9";
      sa[582] = "174";
      sa[583] = "174.1";
      sa[584] = "174.3";
      sa[585] = "174.4";
      sa[586] = "174.5";
      sa[587] = "174.6";
      sa[588] = "174.7";
      sa[589] = "174.8";
      sa[590] = "174.9";
      sa[591] = "175.1";
      sa[592] = "175.2";
      sa[593] = "175.3";
      sa[594] = "175.4";
      sa[595] = "175.5";
      sa[596] = "175.6";
      sa[597] = "175.7";
      sa[598] = "175.8";
      sa[599] = "175.9";
      sa[600] = "176";
      sa[601] = "176.1";
      sa[602] = "176.2";
      sa[603] = "176.3";
      sa[604] = "176.4";
      sa[605] = "176.6";
      sa[606] = "176.7";
      sa[607] = "176.8";
      sa[608] = "176.9";
      sa[609] = "177.1";
      sa[610] = "177.2";
      sa[611] = "177.3";
      sa[612] = "177.4";
      sa[613] = "177.5";
      sa[614] = "177.6";
      sa[615] = "177.7";
      sa[616] = "177.9";
      sa[617] = "178";
      sa[618] = "178.1";
      sa[619] = "178.2";
      sa[620] = "178.3";
      sa[621] = "178.4";
      sa[622] = "178.5";
      sa[623] = "178.6";
      sa[624] = "178.7";
      sa[625] = "178.8";
      sa[626] = "178.9";
      sa[627] = "179.1";
      sa[628] = "179.2";
      sa[629] = "179.3";
      sa[630] = "179.4";
      sa[631] = "179.5";
      sa[632] = "179.7";
      sa[633] = "179.8";
      sa[634] = "179.9";
      sa[635] = "18.9";
      sa[636] = "180";
      sa[637] = "180.1";
      sa[638] = "180.2";
      sa[639] = "180.3";
      sa[640] = "180.4";
      sa[641] = "180.5";
      sa[642] = "180.6";
      sa[643] = "180.7";
      sa[644] = "180.9";
      sa[645] = "181.1";
      sa[646] = "181.2";
      sa[647] = "181.3";
      sa[648] = "181.4";
      sa[649] = "181.5";
      sa[650] = "181.6";
      sa[651] = "181.8";
      sa[652] = "181.9";
      sa[653] = "182";
      sa[654] = "182.1";
      sa[655] = "182.2";
      sa[656] = "182.3";
      sa[657] = "182.5";
      sa[658] = "182.6";
      sa[659] = "182.7";
      sa[660] = "182.8";
      sa[661] = "182.9";
      sa[662] = "183";
      sa[663] = "183.1";
      sa[664] = "183.2";
      sa[665] = "183.3";
      sa[666] = "183.4";
      sa[667] = "183.5";
      sa[668] = "183.6";
      sa[669] = "183.8";
      sa[670] = "183.9";
      sa[671] = "184";
      sa[672] = "184.1";
      sa[673] = "184.2";
      sa[674] = "184.4";
      sa[675] = "184.5";
      sa[676] = "184.6";
      sa[677] = "184.7";
      sa[678] = "184.8";
      sa[679] = "185";
      sa[680] = "185.1";
      sa[681] = "185.2";
      sa[682] = "185.3";
      sa[683] = "185.4";
      sa[684] = "185.6";
      sa[685] = "185.7";
      sa[686] = "185.8";
      sa[687] = "185.9";
      sa[688] = "186";
      sa[689] = "186.1";
      sa[690] = "186.2";
      sa[691] = "186.4";
      sa[692] = "186.5";
      sa[693] = "186.6";
      sa[694] = "186.7";
      sa[695] = "186.8";
      sa[696] = "186.9";
      sa[697] = "187";
      sa[698] = "187.1";
      sa[699] = "187.2";
      sa[700] = "187.3";
      sa[701] = "187.4";
      sa[702] = "187.5";
      sa[703] = "187.6";
      sa[704] = "187.7";
      sa[705] = "187.8";
      sa[706] = "187.9";
      sa[707] = "188";
      sa[708] = "188.4";
      sa[709] = "188.5";
      sa[710] = "188.8";
      sa[711] = "188.9";
      sa[712] = "189";
      sa[713] = "189.1";
      sa[714] = "189.2";
      sa[715] = "189.3";
      sa[716] = "189.4";
      sa[717] = "189.5";
      sa[718] = "189.6";
      sa[719] = "189.7";
      sa[720] = "189.8";
      sa[721] = "19.5";
      sa[722] = "190";
      sa[723] = "190.1";
      sa[724] = "190.2";
      sa[725] = "190.3";
      sa[726] = "190.4";
      sa[727] = "190.5";
      sa[728] = "190.6";
      sa[729] = "190.7";
      sa[730] = "190.8";
      sa[731] = "190.9";
      sa[732] = "191";
      sa[733] = "191.1";
      sa[734] = "191.2";
      sa[735] = "191.3";
      sa[736] = "191.4";
      sa[737] = "191.5";
      sa[738] = "191.6";
      sa[739] = "191.7";
      sa[740] = "191.8";
      sa[741] = "191.9";
      sa[742] = "192";
      sa[743] = "192.1";
      sa[744] = "192.2";
      sa[745] = "192.3";
      sa[746] = "192.4";
      sa[747] = "192.6";
      sa[748] = "192.7";
      sa[749] = "192.8";
      sa[750] = "192.9";
      sa[751] = "193";
      sa[752] = "193.1";
      sa[753] = "193.2";
      sa[754] = "193.3";
      sa[755] = "193.4";
      sa[756] = "193.5";
      sa[757] = "193.6";
      sa[758] = "193.7";
      sa[759] = "193.8";
      sa[760] = "193.9";
      sa[761] = "194";
      sa[762] = "194.1";
      sa[763] = "194.2";
      sa[764] = "194.3";
      sa[765] = "194.4";
      sa[766] = "194.5";
      sa[767] = "194.6";
      sa[768] = "194.8";
      sa[769] = "194.9";
      sa[770] = "195";
      sa[771] = "195.1";
      sa[772] = "195.3";
      sa[773] = "195.4";
      sa[774] = "195.5";
      sa[775] = "195.6";
      sa[776] = "195.7";
      sa[777] = "195.9";
      sa[778] = "196";
      sa[779] = "196.1";
      sa[780] = "196.2";
      sa[781] = "196.3";
      sa[782] = "196.4";
      sa[783] = "196.5";
      sa[784] = "196.6";
      sa[785] = "196.7";
      sa[786] = "196.8";
      sa[787] = "197";
      sa[788] = "197.1";
      sa[789] = "197.2";
      sa[790] = "197.3";
      sa[791] = "197.4";
      sa[792] = "197.5";
      sa[793] = "197.6";
      sa[794] = "197.7";
      sa[795] = "197.8";
      sa[796] = "197.9";
      sa[797] = "198";
      sa[798] = "198.1";
      sa[799] = "198.2";
      sa[800] = "198.3";
      sa[801] = "198.4";
      sa[802] = "198.5";
      sa[803] = "198.6";
      sa[804] = "198.7";
      sa[805] = "198.8";
      sa[806] = "198.9";
      sa[807] = "199";
      sa[808] = "199.1";
      sa[809] = "199.2";
      sa[810] = "199.3";
      sa[811] = "199.5";
      sa[812] = "199.6";
      sa[813] = "199.8";
      sa[814] = "199.9";
      sa[815] = "2.6";
      sa[816] = "200";
      sa[817] = "200.1";
      sa[818] = "200.2";
      sa[819] = "200.3";
      sa[820] = "200.4";
      sa[821] = "200.6";
      sa[822] = "200.7";
      sa[823] = "200.9";
      sa[824] = "201.1";
      sa[825] = "201.2";
      sa[826] = "201.3";
      sa[827] = "201.4";
      sa[828] = "201.5";
      sa[829] = "201.7";
      sa[830] = "201.8";
      sa[831] = "201.9";
      sa[832] = "202";
      sa[833] = "202.1";
      sa[834] = "202.2";
      sa[835] = "202.3";
      sa[836] = "202.4";
      sa[837] = "202.5";
      sa[838] = "202.6";
      sa[839] = "202.7";
      sa[840] = "202.8";
      sa[841] = "202.9";
      sa[842] = "203";
      sa[843] = "203.1";
      sa[844] = "203.2";
      sa[845] = "203.3";
      sa[846] = "203.4";
      sa[847] = "203.5";
      sa[848] = "203.6";
      sa[849] = "203.7";
      sa[850] = "203.8";
      sa[851] = "203.9";
      sa[852] = "204";
      sa[853] = "204.2";
      sa[854] = "204.3";
      sa[855] = "204.4";
      sa[856] = "204.5";
      sa[857] = "204.6";
      sa[858] = "204.7";
      sa[859] = "204.8";
      sa[860] = "204.9";
      sa[861] = "205";
      sa[862] = "205.1";
      sa[863] = "205.2";
      sa[864] = "205.3";
      sa[865] = "205.4";
      sa[866] = "205.5";
      sa[867] = "205.6";
      sa[868] = "205.7";
      sa[869] = "205.9";
      sa[870] = "206";
      sa[871] = "206.1";
      sa[872] = "206.2";
      sa[873] = "206.3";
      sa[874] = "206.4";
      sa[875] = "206.5";
      sa[876] = "206.6";
      sa[877] = "206.7";
      sa[878] = "206.9";
      sa[879] = "207";
      sa[880] = "207.1";
      sa[881] = "207.2";
      sa[882] = "207.3";
      sa[883] = "207.5";
      sa[884] = "207.6";
      sa[885] = "207.7";
      sa[886] = "207.8";
      sa[887] = "207.9";
      sa[888] = "208";
      sa[889] = "208.3";
      sa[890] = "208.4";
      sa[891] = "208.7";
      sa[892] = "208.8";
      sa[893] = "208.9";
      sa[894] = "209.1";
      sa[895] = "209.2";
      sa[896] = "209.4";
      sa[897] = "209.5";
      sa[898] = "209.6";
      sa[899] = "209.7";
      sa[900] = "209.8";
      sa[901] = "209.9";
      sa[902] = "210";
      sa[903] = "210.1";
      sa[904] = "210.2";
      sa[905] = "210.3";
      sa[906] = "210.4";
      sa[907] = "210.5";
      sa[908] = "210.6";
      sa[909] = "210.7";
      sa[910] = "210.8";
      sa[911] = "210.9";
      sa[912] = "211";
      sa[913] = "211.1";
      sa[914] = "211.2";
      sa[915] = "211.3";
      sa[916] = "211.5";
      sa[917] = "211.6";
      sa[918] = "211.7";
      sa[919] = "211.8";
      sa[920] = "211.9";
      sa[921] = "212";
      sa[922] = "212.1";
      sa[923] = "212.3";
      sa[924] = "212.4";
      sa[925] = "212.7";
      sa[926] = "212.8";
      sa[927] = "212.9";
      sa[928] = "213";
      sa[929] = "213.1";
      sa[930] = "213.2";
      sa[931] = "213.4";
      sa[932] = "213.5";
      sa[933] = "213.6";
      sa[934] = "213.7";
      sa[935] = "213.8";
      sa[936] = "213.9";
      sa[937] = "214";
      sa[938] = "214.1";
      sa[939] = "214.2";
      sa[940] = "214.3";
      sa[941] = "214.4";
      sa[942] = "214.6";
      sa[943] = "214.7";
      sa[944] = "214.8";
      sa[945] = "214.9";
      sa[946] = "215.1";
      sa[947] = "215.3";
      sa[948] = "215.4";
      sa[949] = "215.5";
      sa[950] = "215.6";
      sa[951] = "215.7";
      sa[952] = "215.8";
      sa[953] = "215.9";
      sa[954] = "216";
      sa[955] = "216.1";
      sa[956] = "216.2";
      sa[957] = "216.3";
      sa[958] = "216.4";
      sa[959] = "216.6";
      sa[960] = "216.7";
      sa[961] = "216.8";
      sa[962] = "216.9";
      sa[963] = "217";
      sa[964] = "217.1";
      sa[965] = "217.2";
      sa[966] = "217.3";
      sa[967] = "217.4";
      sa[968] = "217.5";
      sa[969] = "217.6";
      sa[970] = "217.7";
      sa[971] = "217.8";
      sa[972] = "217.9";
      sa[973] = "218";
      sa[974] = "218.2";
      sa[975] = "218.4";
      sa[976] = "218.5";
      sa[977] = "218.6";
      sa[978] = "218.7";
      sa[979] = "218.8";
      sa[980] = "218.9";
      sa[981] = "219.1";
      sa[982] = "219.2";
      sa[983] = "219.4";
      sa[984] = "219.5";
      sa[985] = "219.6";
      sa[986] = "219.7";
      sa[987] = "219.9";
      sa[988] = "220";
      sa[989] = "220.1";
      sa[990] = "220.2";
      sa[991] = "220.3";
      sa[992] = "220.4";
      sa[993] = "220.5";
      sa[994] = "220.6";
      sa[995] = "220.7";
      sa[996] = "220.8";
      sa[997] = "220.9";
      sa[998] = "221";
      sa[999] = "221.1";
      sa[1000] = "221.2";
      sa[1001] = "221.3";
      sa[1002] = "221.4";
      sa[1003] = "221.6";
      sa[1004] = "221.7";
      sa[1005] = "221.8";
      sa[1006] = "221.9";
      sa[1007] = "222";
      sa[1008] = "222.1";
      sa[1009] = "222.2";
      sa[1010] = "222.3";
      sa[1011] = "222.4";
      sa[1012] = "222.5";
      sa[1013] = "222.6";
      sa[1014] = "222.7";
      sa[1015] = "222.8";
      sa[1016] = "222.9";
      sa[1017] = "223";
      sa[1018] = "223.2";
      sa[1019] = "223.3";
      sa[1020] = "223.4";
      sa[1021] = "223.5";
      sa[1022] = "223.8";
      sa[1023] = "223.9";
      sa[1024] = "224";
      sa[1025] = "224.1";
      sa[1026] = "224.2";
      sa[1027] = "224.3";
      sa[1028] = "224.4";
      sa[1029] = "224.5";
      sa[1030] = "224.6";
      sa[1031] = "224.7";
      sa[1032] = "224.8";
      sa[1033] = "224.9";
      sa[1034] = "225";
      sa[1035] = "225.1";
      sa[1036] = "225.2";
      sa[1037] = "225.3";
      sa[1038] = "225.4";
      sa[1039] = "225.5";
      sa[1040] = "225.7";
      sa[1041] = "225.8";
      sa[1042] = "225.9";
      sa[1043] = "226";
      sa[1044] = "226.1";
      sa[1045] = "226.2";
      sa[1046] = "226.3";
      sa[1047] = "226.4";
      sa[1048] = "226.5";
      sa[1049] = "226.7";
      sa[1050] = "226.9";
      sa[1051] = "227";
      sa[1052] = "227.1";
      sa[1053] = "227.2";
      sa[1054] = "227.4";
      sa[1055] = "227.5";
      sa[1056] = "227.7";
      sa[1057] = "227.8";
      sa[1058] = "227.9";
      sa[1059] = "228.1";
      sa[1060] = "228.2";
      sa[1061] = "228.4";
      sa[1062] = "228.6";
      sa[1063] = "228.7";
      sa[1064] = "228.9";
      sa[1065] = "229.3";
      sa[1066] = "229.4";
      sa[1067] = "229.6";
      sa[1068] = "229.7";
      sa[1069] = "229.8";
      sa[1070] = "229.9";
      sa[1071] = "230";
      sa[1072] = "230.1";
      sa[1073] = "230.2";
      sa[1074] = "230.3";
      sa[1075] = "230.4";
      sa[1076] = "230.5";
      sa[1077] = "230.6";
      sa[1078] = "230.7";
      sa[1079] = "230.9";
      sa[1080] = "231";
      sa[1081] = "231.2";
      sa[1082] = "231.3";
      sa[1083] = "231.5";
      sa[1084] = "231.7";
      sa[1085] = "231.8";
      sa[1086] = "231.9";
      sa[1087] = "232.1";
      sa[1088] = "232.4";
      sa[1089] = "232.5";
      sa[1090] = "232.6";
      sa[1091] = "232.7";
      sa[1092] = "232.8";
      sa[1093] = "232.9";
      sa[1094] = "233.2";
      sa[1095] = "233.3";
      sa[1096] = "233.5";
      sa[1097] = "233.7";
      sa[1098] = "233.8";
      sa[1099] = "233.9";
      sa[1100] = "234";
      sa[1101] = "234.1";
      sa[1102] = "234.2";
      sa[1103] = "234.4";
      sa[1104] = "234.5";
      sa[1105] = "234.7";
      sa[1106] = "234.8";
      sa[1107] = "234.9";
      sa[1108] = "235";
      sa[1109] = "235.1";
      sa[1110] = "235.2";
      sa[1111] = "235.5";
      sa[1112] = "235.6";
      sa[1113] = "235.7";
      sa[1114] = "235.8";
      sa[1115] = "235.9";
      sa[1116] = "236.1";
      sa[1117] = "236.2";
      sa[1118] = "236.3";
      sa[1119] = "236.4";
      sa[1120] = "236.5";
      sa[1121] = "236.6";
      sa[1122] = "236.7";
      sa[1123] = "236.8";
      sa[1124] = "236.9";
      sa[1125] = "237.1";
      sa[1126] = "237.2";
      sa[1127] = "237.3";
      sa[1128] = "237.4";
      sa[1129] = "237.5";
      sa[1130] = "237.6";
      sa[1131] = "237.7";
      sa[1132] = "237.8";
      sa[1133] = "237.9";
      sa[1134] = "238";
      sa[1135] = "238.1";
      sa[1136] = "238.4";
      sa[1137] = "238.8";
      sa[1138] = "238.9";
      sa[1139] = "239";
      sa[1140] = "239.1";
      sa[1141] = "239.2";
      sa[1142] = "239.3";
      sa[1143] = "239.4";
      sa[1144] = "239.5";
      sa[1145] = "239.7";
      sa[1146] = "239.8";
      sa[1147] = "239.9";
      sa[1148] = "240";
      sa[1149] = "240.1";
      sa[1150] = "240.2";
      sa[1151] = "240.3";
      sa[1152] = "240.4";
      sa[1153] = "240.7";
      sa[1154] = "240.8";
      sa[1155] = "240.9";
      sa[1156] = "241";
      sa[1157] = "241.1";
      sa[1158] = "241.2";
      sa[1159] = "241.7";
      sa[1160] = "241.8";
      sa[1161] = "241.9";
      sa[1162] = "242.1";
      sa[1163] = "242.2";
      sa[1164] = "242.3";
      sa[1165] = "242.4";
      sa[1166] = "242.5";
      sa[1167] = "242.6";
      sa[1168] = "242.8";
      sa[1169] = "242.9";
      sa[1170] = "243";
      sa[1171] = "243.1";
      sa[1172] = "243.2";
      sa[1173] = "243.4";
      sa[1174] = "243.5";
      sa[1175] = "243.7";
      sa[1176] = "243.8";
      sa[1177] = "243.9";
      sa[1178] = "244.1";
      sa[1179] = "244.3";
      sa[1180] = "244.6";
      sa[1181] = "244.7";
      sa[1182] = "244.8";
      sa[1183] = "244.9";
      sa[1184] = "245";
      sa[1185] = "245.2";
      sa[1186] = "245.3";
      sa[1187] = "245.4";
      sa[1188] = "245.5";
      sa[1189] = "245.7";
      sa[1190] = "245.8";
      sa[1191] = "245.9";
      sa[1192] = "246.2";
      sa[1193] = "246.4";
      sa[1194] = "246.5";
      sa[1195] = "246.6";
      sa[1196] = "246.8";
      sa[1197] = "247";
      sa[1198] = "247.2";
      sa[1199] = "247.3";
      sa[1200] = "247.4";
      sa[1201] = "247.5";
      sa[1202] = "247.6";
      sa[1203] = "247.7";
      sa[1204] = "247.8";
      sa[1205] = "248.6";
      sa[1206] = "248.7";
      sa[1207] = "248.8";
      sa[1208] = "248.9";
      sa[1209] = "249.4";
      sa[1210] = "249.5";
      sa[1211] = "249.6";
      sa[1212] = "249.8";
      sa[1213] = "249.9";
      sa[1214] = "25.9";
      sa[1215] = "250.2";
      sa[1216] = "250.3";
      sa[1217] = "250.6";
      sa[1218] = "250.8";
      sa[1219] = "250.9";
      sa[1220] = "251";
      sa[1221] = "251.3";
      sa[1222] = "251.4";
      sa[1223] = "251.5";
      sa[1224] = "251.6";
      sa[1225] = "251.8";
      sa[1226] = "251.9";
      sa[1227] = "252";
      sa[1228] = "252.1";
      sa[1229] = "252.3";
      sa[1230] = "252.4";
      sa[1231] = "252.6";
      sa[1232] = "252.7";
      sa[1233] = "252.9";
      sa[1234] = "253";
      sa[1235] = "253.1";
      sa[1236] = "253.2";
      sa[1237] = "253.4";
      sa[1238] = "253.5";
      sa[1239] = "253.7";
      sa[1240] = "254.1";
      sa[1241] = "254.2";
      sa[1242] = "254.3";
      sa[1243] = "254.4";
      sa[1244] = "254.7";
      sa[1245] = "254.8";
      sa[1246] = "254.9";
      sa[1247] = "255.1";
      sa[1248] = "255.3";
      sa[1249] = "255.8";
      sa[1250] = "255.9";
      sa[1251] = "256";
      sa[1252] = "256.2";
      sa[1253] = "256.3";
      sa[1254] = "256.4";
      sa[1255] = "256.5";
      sa[1256] = "256.7";
      sa[1257] = "256.8";
      sa[1258] = "257.1";
      sa[1259] = "257.2";
      sa[1260] = "257.3";
      sa[1261] = "257.4";
      sa[1262] = "257.7";
      sa[1263] = "257.9";
      sa[1264] = "258";
      sa[1265] = "258.1";
      sa[1266] = "258.4";
      sa[1267] = "258.6";
      sa[1268] = "258.8";
      sa[1269] = "259.3";
      sa[1270] = "259.4";
      sa[1271] = "259.7";
      sa[1272] = "259.8";
      sa[1273] = "259.9";
      sa[1274] = "260";
      sa[1275] = "260.1";
      sa[1276] = "260.2";
      sa[1277] = "260.4";
      sa[1278] = "260.5";
      sa[1279] = "260.8";
      sa[1280] = "260.9";
      sa[1281] = "261.2";
      sa[1282] = "261.3";
      sa[1283] = "261.4";
      sa[1284] = "261.7";
      sa[1285] = "261.8";
      sa[1286] = "261.9";
      sa[1287] = "262.2";
      sa[1288] = "262.3";
      sa[1289] = "262.4";
      sa[1290] = "262.8";
      sa[1291] = "262.9";
      sa[1292] = "263.1";
      sa[1293] = "263.4";
      sa[1294] = "263.7";
      sa[1295] = "263.8";
      sa[1296] = "264";
      sa[1297] = "264.3";
      sa[1298] = "264.4";
      sa[1299] = "264.5";
      sa[1300] = "264.7";
      sa[1301] = "264.8";
      sa[1302] = "264.9";
      sa[1303] = "265.1";
      sa[1304] = "265.2";
      sa[1305] = "265.3";
      sa[1306] = "265.6";
      sa[1307] = "265.9";
      sa[1308] = "266";
      sa[1309] = "266.1";
      sa[1310] = "266.3";
      sa[1311] = "266.6";
      sa[1312] = "266.7";
      sa[1313] = "266.9";
      sa[1314] = "267.1";
      sa[1315] = "267.4";
      sa[1316] = "267.8";
      sa[1317] = "267.9";
      sa[1318] = "268";
      sa[1319] = "268.1";
      sa[1320] = "268.3";
      sa[1321] = "268.4";
      sa[1322] = "268.6";
      sa[1323] = "268.7";
      sa[1324] = "268.8";
      sa[1325] = "269";
      sa[1326] = "269.2";
      sa[1327] = "269.6";
      sa[1328] = "269.7";
      sa[1329] = "269.8";
      sa[1330] = "27";
      sa[1331] = "270";
      sa[1332] = "270.3";
      sa[1333] = "270.4";
      sa[1334] = "270.5";
      sa[1335] = "270.7";
      sa[1336] = "270.8";
      sa[1337] = "270.9";
      sa[1338] = "271.1";
      sa[1339] = "271.2";
      sa[1340] = "271.4";
      sa[1341] = "271.5";
      sa[1342] = "271.6";
      sa[1343] = "271.7";
      sa[1344] = "271.8";
      sa[1345] = "272.1";
      sa[1346] = "272.4";
      sa[1347] = "272.5";
      sa[1348] = "272.6";
      sa[1349] = "272.7";
      sa[1350] = "273";
      sa[1351] = "273.2";
      sa[1352] = "273.3";
      sa[1353] = "273.4";
      sa[1354] = "273.5";
      sa[1355] = "273.6";
      sa[1356] = "273.8";
      sa[1357] = "273.9";
      sa[1358] = "274";
      sa[1359] = "274.3";
      sa[1360] = "274.4";
      sa[1361] = "274.6";
      sa[1362] = "274.7";
      sa[1363] = "274.9";
      sa[1364] = "275.2";
      sa[1365] = "275.4";
      sa[1366] = "275.8";
      sa[1367] = "276.1";
      sa[1368] = "276.2";
      sa[1369] = "276.5";
      sa[1370] = "276.6";
      sa[1371] = "276.7";
      sa[1372] = "276.9";
      sa[1373] = "277";
      sa[1374] = "277.3";
      sa[1375] = "277.5";
      sa[1376] = "277.9";
      sa[1377] = "278";
      sa[1378] = "278.3";
      sa[1379] = "278.4";
      sa[1380] = "278.5";
      sa[1381] = "278.9";
      sa[1382] = "279.1";
      sa[1383] = "279.3";
      sa[1384] = "279.5";
      sa[1385] = "279.8";
      sa[1386] = "279.9";
      sa[1387] = "280";
      sa[1388] = "280.2";
      sa[1389] = "280.4";
      sa[1390] = "281";
      sa[1391] = "281.1";
      sa[1392] = "281.2";
      sa[1393] = "281.3";
      sa[1394] = "281.4";
      sa[1395] = "282.3";
      sa[1396] = "282.5";
      sa[1397] = "283.1";
      sa[1398] = "283.2";
      sa[1399] = "283.4";
      sa[1400] = "283.9";
      sa[1401] = "284.4";
      sa[1402] = "285.7";
      sa[1403] = "286.2";
      sa[1404] = "286.4";
      sa[1405] = "286.6";
      sa[1406] = "286.7";
      sa[1407] = "287.1";
      sa[1408] = "287.3";
      sa[1409] = "287.4";
      sa[1410] = "288";
      sa[1411] = "288.1";
      sa[1412] = "288.5";
      sa[1413] = "288.7";
      sa[1414] = "288.8";
      sa[1415] = "289.1";
      sa[1416] = "289.5";
      sa[1417] = "289.8";
      sa[1418] = "29.9";
      sa[1419] = "290.4";
      sa[1420] = "291.1";
      sa[1421] = "291.2";
      sa[1422] = "291.6";
      sa[1423] = "291.8";
      sa[1424] = "292.9";
      sa[1425] = "293";
      sa[1426] = "293.3";
      sa[1427] = "293.7";
      sa[1428] = "294.2";
      sa[1429] = "294.7";
      sa[1430] = "294.9";
      sa[1431] = "295";
      sa[1432] = "295.3";
      sa[1433] = "295.4";
      sa[1434] = "296";
      sa[1435] = "296.4";
      sa[1436] = "297.9";
      sa[1437] = "298.1";
      sa[1438] = "298.4";
      sa[1439] = "299.4";
      sa[1440] = "299.5";
      sa[1441] = "30.9";
      sa[1442] = "300.3";
      sa[1443] = "300.4";
      sa[1444] = "301.5";
      sa[1445] = "301.7";
      sa[1446] = "302.7";
      sa[1447] = "303.2";
      sa[1448] = "303.9";
      sa[1449] = "305.1";
      sa[1450] = "305.2";
      sa[1451] = "306.2";
      sa[1452] = "307.1";
      sa[1453] = "308";
      sa[1454] = "308.6";
      sa[1455] = "309.9";
      sa[1456] = "310.4";
      sa[1457] = "312";
      sa[1458] = "313.2";
      sa[1459] = "313.8";
      sa[1460] = "314.1";
      sa[1461] = "314.6";
      sa[1462] = "315.6";
      sa[1463] = "317.8";
      sa[1464] = "321.3";
      sa[1465] = "321.6";
      sa[1466] = "322.3";
      sa[1467] = "322.4";
      sa[1468] = "322.5";
      sa[1469] = "324.7";
      sa[1470] = "326.3";
      sa[1471] = "326.5";
      sa[1472] = "328.1";
      sa[1473] = "329.8";
      sa[1474] = "332.9";
      sa[1475] = "334.3";
      sa[1476] = "335.5";
      sa[1477] = "337.4";
      sa[1478] = "34";
      sa[1479] = "345.3";
      sa[1480] = "346.8";
      sa[1481] = "35.1";
      sa[1482] = "350.8";
      sa[1483] = "37.7";
      sa[1484] = "37.8";
      sa[1485] = "39.5";
      sa[1486] = "40.4";
      sa[1487] = "40.9";
      sa[1488] = "41.9";
      sa[1489] = "44.9";
      sa[1490] = "45";
      sa[1491] = "46.5";
      sa[1492] = "47.4";
      sa[1493] = "47.7";
      sa[1494] = "47.8";
      sa[1495] = "48.4";
      sa[1496] = "49.2";
      sa[1497] = "49.9";
      sa[1498] = "50.6";
      sa[1499] = "51.1";
      sa[1500] = "51.5";
      sa[1501] = "51.8";
      sa[1502] = "51.9";
      sa[1503] = "52.2";
      sa[1504] = "54";
      sa[1505] = "54.2";
      sa[1506] = "54.7";
      sa[1507] = "54.8";
      sa[1508] = "55.3";
      sa[1509] = "55.6";
      sa[1510] = "57.1";
      sa[1511] = "57.5";
      sa[1512] = "58";
      sa[1513] = "58.2";
      sa[1514] = "58.4";
      sa[1515] = "58.8";
      sa[1516] = "58.9";
      sa[1517] = "59.5";
      sa[1518] = "60";
      sa[1519] = "60.4";
      sa[1520] = "60.6";
      sa[1521] = "61.2";
      sa[1522] = "61.3";
      sa[1523] = "61.6";
      sa[1524] = "61.9";
      sa[1525] = "62.3";
      sa[1526] = "62.4";
      sa[1527] = "62.6";
      sa[1528] = "62.8";
      sa[1529] = "62.9";
      sa[1530] = "63.2";
      sa[1531] = "63.7";
      sa[1532] = "64.6";
      sa[1533] = "64.9";
      sa[1534] = "65.4";
      sa[1535] = "67.4";
      sa[1536] = "67.7";
      sa[1537] = "68.4";
      sa[1538] = "68.5";
      sa[1539] = "68.7";
      sa[1540] = "69.1";
      sa[1541] = "69.4";
      sa[1542] = "7.8";
      sa[1543] = "7.9";
      sa[1544] = "70.7";
      sa[1545] = "70.8";
      sa[1546] = "70.9";
      sa[1547] = "71.2";
      sa[1548] = "72.5";
      sa[1549] = "72.7";
      sa[1550] = "72.8";
      sa[1551] = "73.3";
      sa[1552] = "73.8";
      sa[1553] = "74.3";
      sa[1554] = "74.5";
      sa[1555] = "75";
      sa[1556] = "75.3";
      sa[1557] = "75.8";
      sa[1558] = "76.1";
      sa[1559] = "76.4";
      sa[1560] = "77.6";
      sa[1561] = "78.1";
      sa[1562] = "78.2";
      sa[1563] = "78.3";
      sa[1564] = "78.5";
      sa[1565] = "78.6";
      sa[1566] = "78.7";
      sa[1567] = "80.2";
      sa[1568] = "80.3";
      sa[1569] = "81.1";
      sa[1570] = "81.3";
      sa[1571] = "81.6";
      sa[1572] = "81.7";
      sa[1573] = "81.9";
      sa[1574] = "82.2";
      sa[1575] = "82.3";
      sa[1576] = "82.5";
      sa[1577] = "82.6";
      sa[1578] = "82.7";
      sa[1579] = "83";
      sa[1580] = "83.2";
      sa[1581] = "83.4";
      sa[1582] = "83.5";
      sa[1583] = "83.6";
      sa[1584] = "83.8";
      sa[1585] = "84.2";
      sa[1586] = "84.7";
      sa[1587] = "84.8";
      sa[1588] = "84.9";
      sa[1589] = "85.2";
      sa[1590] = "85.7";
      sa[1591] = "85.8";
      sa[1592] = "85.9";
      sa[1593] = "86";
      sa[1594] = "86.1";
      sa[1595] = "86.3";
      sa[1596] = "86.5";
      sa[1597] = "86.8";
      sa[1598] = "87";
      sa[1599] = "87.2";
      sa[1600] = "87.6";
      sa[1601] = "87.7";
      sa[1602] = "88.1";
      sa[1603] = "88.5";
      sa[1604] = "88.8";
      sa[1605] = "89.5";
      sa[1606] = "89.7";
      sa[1607] = "89.8";
      sa[1608] = "90";
      sa[1609] = "90.4";
      sa[1610] = "90.5";
      sa[1611] = "90.6";
      sa[1612] = "90.7";
      sa[1613] = "91.1";
      sa[1614] = "91.5";
      sa[1615] = "91.7";
      sa[1616] = "91.9";
      sa[1617] = "92";
      sa[1618] = "92.2";
      sa[1619] = "92.3";
      sa[1620] = "92.4";
      sa[1621] = "92.6";
      sa[1622] = "92.7";
      sa[1623] = "92.8";
      sa[1624] = "93.3";
      sa[1625] = "93.4";
      sa[1626] = "93.5";
      sa[1627] = "93.6";
      sa[1628] = "93.8";
      sa[1629] = "94.1";
      sa[1630] = "94.2";
      sa[1631] = "94.4";
      sa[1632] = "94.7";
      sa[1633] = "94.8";
      sa[1634] = "94.9";
      sa[1635] = "95";
      sa[1636] = "95.4";
      sa[1637] = "95.5";
      sa[1638] = "95.9";
      sa[1639] = "96";
      sa[1640] = "96.1";
      sa[1641] = "96.2";
      sa[1642] = "96.3";
      sa[1643] = "96.5";
      sa[1644] = "96.6";
      sa[1645] = "96.7";
      sa[1646] = "96.8";
      sa[1647] = "97.1";
      sa[1648] = "97.2";
      sa[1649] = "97.4";
      sa[1650] = "97.5";
      sa[1651] = "97.6";
      sa[1652] = "97.8";
      sa[1653] = "98";
      sa[1654] = "98.2";
      sa[1655] = "98.4";
      sa[1656] = "98.8";
      sa[1657] = "98.9";
      sa[1658] = "99.3";
      sa[1659] = "99.4";
      sa[1660] = "99.5";
      sa[1661] = "99.6";
      sa[1662] = "99.7";
      sa[1663] = "99.9";
    }
  }
}
// The class representing column day_calls
class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_3 {
  public static final String[] VALUES = new String[119];
  static {
    GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_3_0.fill(VALUES);
  }
  static final class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_3_0 {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "100";
      sa[2] = "101";
      sa[3] = "102";
      sa[4] = "103";
      sa[5] = "104";
      sa[6] = "105";
      sa[7] = "106";
      sa[8] = "107";
      sa[9] = "108";
      sa[10] = "109";
      sa[11] = "110";
      sa[12] = "111";
      sa[13] = "112";
      sa[14] = "113";
      sa[15] = "114";
      sa[16] = "115";
      sa[17] = "116";
      sa[18] = "117";
      sa[19] = "118";
      sa[20] = "119";
      sa[21] = "120";
      sa[22] = "121";
      sa[23] = "122";
      sa[24] = "123";
      sa[25] = "124";
      sa[26] = "125";
      sa[27] = "126";
      sa[28] = "127";
      sa[29] = "128";
      sa[30] = "129";
      sa[31] = "130";
      sa[32] = "131";
      sa[33] = "132";
      sa[34] = "133";
      sa[35] = "134";
      sa[36] = "135";
      sa[37] = "136";
      sa[38] = "137";
      sa[39] = "138";
      sa[40] = "139";
      sa[41] = "140";
      sa[42] = "141";
      sa[43] = "142";
      sa[44] = "143";
      sa[45] = "144";
      sa[46] = "145";
      sa[47] = "146";
      sa[48] = "147";
      sa[49] = "148";
      sa[50] = "149";
      sa[51] = "150";
      sa[52] = "151";
      sa[53] = "152";
      sa[54] = "156";
      sa[55] = "157";
      sa[56] = "158";
      sa[57] = "160";
      sa[58] = "163";
      sa[59] = "165";
      sa[60] = "30";
      sa[61] = "35";
      sa[62] = "36";
      sa[63] = "40";
      sa[64] = "42";
      sa[65] = "44";
      sa[66] = "45";
      sa[67] = "47";
      sa[68] = "48";
      sa[69] = "49";
      sa[70] = "51";
      sa[71] = "52";
      sa[72] = "53";
      sa[73] = "54";
      sa[74] = "55";
      sa[75] = "56";
      sa[76] = "57";
      sa[77] = "58";
      sa[78] = "59";
      sa[79] = "60";
      sa[80] = "61";
      sa[81] = "62";
      sa[82] = "63";
      sa[83] = "64";
      sa[84] = "65";
      sa[85] = "66";
      sa[86] = "67";
      sa[87] = "68";
      sa[88] = "69";
      sa[89] = "70";
      sa[90] = "71";
      sa[91] = "72";
      sa[92] = "73";
      sa[93] = "74";
      sa[94] = "75";
      sa[95] = "76";
      sa[96] = "77";
      sa[97] = "78";
      sa[98] = "79";
      sa[99] = "80";
      sa[100] = "81";
      sa[101] = "82";
      sa[102] = "83";
      sa[103] = "84";
      sa[104] = "85";
      sa[105] = "86";
      sa[106] = "87";
      sa[107] = "88";
      sa[108] = "89";
      sa[109] = "90";
      sa[110] = "91";
      sa[111] = "92";
      sa[112] = "93";
      sa[113] = "94";
      sa[114] = "95";
      sa[115] = "96";
      sa[116] = "97";
      sa[117] = "98";
      sa[118] = "99";
    }
  }
}
// The class representing column day_charge
class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_4 {
  public static final String[] VALUES = new String[1664];
  static {
    GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_4_0.fill(VALUES);
  }
  static final class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_4_0 {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "0.44";
      sa[2] = "1.33";
      sa[3] = "1.34";
      sa[4] = "10";
      sa[5] = "10.01";
      sa[6] = "10.12";
      sa[7] = "10.2";
      sa[8] = "10.27";
      sa[9] = "10.3";
      sa[10] = "10.4";
      sa[11] = "10.42";
      sa[12] = "10.47";
      sa[13] = "10.52";
      sa[14] = "10.59";
      sa[15] = "10.61";
      sa[16] = "10.64";
      sa[17] = "10.68";
      sa[18] = "10.69";
      sa[19] = "10.74";
      sa[20] = "10.83";
      sa[21] = "10.98";
      sa[22] = "11.03";
      sa[23] = "11.12";
      sa[24] = "11.46";
      sa[25] = "11.51";
      sa[26] = "11.63";
      sa[27] = "11.65";
      sa[28] = "11.68";
      sa[29] = "11.75";
      sa[30] = "11.8";
      sa[31] = "12.02";
      sa[32] = "12.04";
      sa[33] = "12.05";
      sa[34] = "12.1";
      sa[35] = "12.33";
      sa[36] = "12.36";
      sa[37] = "12.38";
      sa[38] = "12.46";
      sa[39] = "12.55";
      sa[40] = "12.63";
      sa[41] = "12.67";
      sa[42] = "12.75";
      sa[43] = "12.8";
      sa[44] = "12.89";
      sa[45] = "12.94";
      sa[46] = "12.99";
      sa[47] = "13.19";
      sa[48] = "13.28";
      sa[49] = "13.29";
      sa[50] = "13.31";
      sa[51] = "13.35";
      sa[52] = "13.36";
      sa[53] = "13.38";
      sa[54] = "13.63";
      sa[55] = "13.65";
      sa[56] = "13.79";
      sa[57] = "13.82";
      sa[58] = "13.87";
      sa[59] = "13.89";
      sa[60] = "13.92";
      sa[61] = "13.97";
      sa[62] = "13.99";
      sa[63] = "14.03";
      sa[64] = "14.04";
      sa[65] = "14.06";
      sa[66] = "14.11";
      sa[67] = "14.14";
      sa[68] = "14.18";
      sa[69] = "14.2";
      sa[70] = "14.21";
      sa[71] = "14.25";
      sa[72] = "14.31";
      sa[73] = "14.4";
      sa[74] = "14.42";
      sa[75] = "14.43";
      sa[76] = "14.48";
      sa[77] = "14.57";
      sa[78] = "14.59";
      sa[79] = "14.6";
      sa[80] = "14.62";
      sa[81] = "14.64";
      sa[82] = "14.67";
      sa[83] = "14.71";
      sa[84] = "14.76";
      sa[85] = "14.79";
      sa[86] = "14.82";
      sa[87] = "14.89";
      sa[88] = "14.91";
      sa[89] = "14.98";
      sa[90] = "15.05";
      sa[91] = "15.1";
      sa[92] = "15.22";
      sa[93] = "15.25";
      sa[94] = "15.27";
      sa[95] = "15.3";
      sa[96] = "15.37";
      sa[97] = "15.39";
      sa[98] = "15.4";
      sa[99] = "15.42";
      sa[100] = "15.49";
      sa[101] = "15.56";
      sa[102] = "15.59";
      sa[103] = "15.62";
      sa[104] = "15.64";
      sa[105] = "15.67";
      sa[106] = "15.69";
      sa[107] = "15.71";
      sa[108] = "15.74";
      sa[109] = "15.76";
      sa[110] = "15.78";
      sa[111] = "15.86";
      sa[112] = "15.88";
      sa[113] = "15.9";
      sa[114] = "15.91";
      sa[115] = "15.95";
      sa[116] = "16";
      sa[117] = "16.01";
      sa[118] = "16.05";
      sa[119] = "16.1";
      sa[120] = "16.12";
      sa[121] = "16.13";
      sa[122] = "16.15";
      sa[123] = "16.22";
      sa[124] = "16.24";
      sa[125] = "16.3";
      sa[126] = "16.32";
      sa[127] = "16.34";
      sa[128] = "16.35";
      sa[129] = "16.37";
      sa[130] = "16.41";
      sa[131] = "16.42";
      sa[132] = "16.44";
      sa[133] = "16.46";
      sa[134] = "16.51";
      sa[135] = "16.52";
      sa[136] = "16.56";
      sa[137] = "16.58";
      sa[138] = "16.59";
      sa[139] = "16.63";
      sa[140] = "16.66";
      sa[141] = "16.69";
      sa[142] = "16.73";
      sa[143] = "16.8";
      sa[144] = "16.81";
      sa[145] = "16.88";
      sa[146] = "16.9";
      sa[147] = "16.92";
      sa[148] = "16.93";
      sa[149] = "16.95";
      sa[150] = "16.98";
      sa[151] = "17";
      sa[152] = "17.02";
      sa[153] = "17.14";
      sa[154] = "17.17";
      sa[155] = "17.19";
      sa[156] = "17.2";
      sa[157] = "17.24";
      sa[158] = "17.29";
      sa[159] = "17.32";
      sa[160] = "17.34";
      sa[161] = "17.36";
      sa[162] = "17.39";
      sa[163] = "17.44";
      sa[164] = "17.46";
      sa[165] = "17.48";
      sa[166] = "17.51";
      sa[167] = "17.53";
      sa[168] = "17.54";
      sa[169] = "17.56";
      sa[170] = "17.58";
      sa[171] = "17.6";
      sa[172] = "17.63";
      sa[173] = "17.68";
      sa[174] = "17.78";
      sa[175] = "17.8";
      sa[176] = "17.83";
      sa[177] = "17.85";
      sa[178] = "17.88";
      sa[179] = "17.9";
      sa[180] = "17.92";
      sa[181] = "17.95";
      sa[182] = "17.97";
      sa[183] = "17.99";
      sa[184] = "18";
      sa[185] = "18.04";
      sa[186] = "18.09";
      sa[187] = "18.11";
      sa[188] = "18.12";
      sa[189] = "18.14";
      sa[190] = "18.19";
      sa[191] = "18.22";
      sa[192] = "18.24";
      sa[193] = "18.28";
      sa[194] = "18.31";
      sa[195] = "18.33";
      sa[196] = "18.34";
      sa[197] = "18.36";
      sa[198] = "18.41";
      sa[199] = "18.46";
      sa[200] = "18.53";
      sa[201] = "18.55";
      sa[202] = "18.56";
      sa[203] = "18.6";
      sa[204] = "18.62";
      sa[205] = "18.63";
      sa[206] = "18.65";
      sa[207] = "18.67";
      sa[208] = "18.68";
      sa[209] = "18.7";
      sa[210] = "18.72";
      sa[211] = "18.75";
      sa[212] = "18.77";
      sa[213] = "18.79";
      sa[214] = "18.85";
      sa[215] = "18.87";
      sa[216] = "18.89";
      sa[217] = "18.9";
      sa[218] = "18.94";
      sa[219] = "18.97";
      sa[220] = "18.99";
      sa[221] = "19.01";
      sa[222] = "19.02";
      sa[223] = "19.04";
      sa[224] = "19.07";
      sa[225] = "19.14";
      sa[226] = "19.16";
      sa[227] = "19.18";
      sa[228] = "19.21";
      sa[229] = "19.23";
      sa[230] = "19.24";
      sa[231] = "19.26";
      sa[232] = "19.31";
      sa[233] = "19.33";
      sa[234] = "19.35";
      sa[235] = "19.36";
      sa[236] = "19.4";
      sa[237] = "19.43";
      sa[238] = "19.45";
      sa[239] = "19.52";
      sa[240] = "19.55";
      sa[241] = "19.57";
      sa[242] = "19.6";
      sa[243] = "19.62";
      sa[244] = "19.64";
      sa[245] = "19.65";
      sa[246] = "19.67";
      sa[247] = "19.69";
      sa[248] = "19.7";
      sa[249] = "19.72";
      sa[250] = "19.74";
      sa[251] = "19.75";
      sa[252] = "19.79";
      sa[253] = "19.84";
      sa[254] = "19.86";
      sa[255] = "19.87";
      sa[256] = "19.91";
      sa[257] = "19.94";
      sa[258] = "19.98";
      sa[259] = "19.99";
      sa[260] = "2.13";
      sa[261] = "2.99";
      sa[262] = "20.03";
      sa[263] = "20.04";
      sa[264] = "20.06";
      sa[265] = "20.08";
      sa[266] = "20.09";
      sa[267] = "20.13";
      sa[268] = "20.15";
      sa[269] = "20.16";
      sa[270] = "20.18";
      sa[271] = "20.21";
      sa[272] = "20.23";
      sa[273] = "20.25";
      sa[274] = "20.26";
      sa[275] = "20.28";
      sa[276] = "20.3";
      sa[277] = "20.33";
      sa[278] = "20.35";
      sa[279] = "20.45";
      sa[280] = "20.49";
      sa[281] = "20.52";
      sa[282] = "20.54";
      sa[283] = "20.55";
      sa[284] = "20.57";
      sa[285] = "20.59";
      sa[286] = "20.66";
      sa[287] = "20.67";
      sa[288] = "20.69";
      sa[289] = "20.71";
      sa[290] = "20.74";
      sa[291] = "20.77";
      sa[292] = "20.79";
      sa[293] = "20.81";
      sa[294] = "20.83";
      sa[295] = "20.88";
      sa[296] = "20.89";
      sa[297] = "20.91";
      sa[298] = "20.93";
      sa[299] = "20.94";
      sa[300] = "20.96";
      sa[301] = "21.03";
      sa[302] = "21.05";
      sa[303] = "21.08";
      sa[304] = "21.1";
      sa[305] = "21.11";
      sa[306] = "21.13";
      sa[307] = "21.15";
      sa[308] = "21.17";
      sa[309] = "21.18";
      sa[310] = "21.2";
      sa[311] = "21.22";
      sa[312] = "21.23";
      sa[313] = "21.25";
      sa[314] = "21.27";
      sa[315] = "21.28";
      sa[316] = "21.3";
      sa[317] = "21.32";
      sa[318] = "21.34";
      sa[319] = "21.35";
      sa[320] = "21.37";
      sa[321] = "21.39";
      sa[322] = "21.4";
      sa[323] = "21.42";
      sa[324] = "21.44";
      sa[325] = "21.47";
      sa[326] = "21.54";
      sa[327] = "21.56";
      sa[328] = "21.57";
      sa[329] = "21.59";
      sa[330] = "21.61";
      sa[331] = "21.62";
      sa[332] = "21.64";
      sa[333] = "21.66";
      sa[334] = "21.71";
      sa[335] = "21.73";
      sa[336] = "21.74";
      sa[337] = "21.78";
      sa[338] = "21.79";
      sa[339] = "21.81";
      sa[340] = "21.85";
      sa[341] = "21.86";
      sa[342] = "21.88";
      sa[343] = "21.9";
      sa[344] = "21.93";
      sa[345] = "21.95";
      sa[346] = "21.96";
      sa[347] = "21.98";
      sa[348] = "22";
      sa[349] = "22.02";
      sa[350] = "22.03";
      sa[351] = "22.05";
      sa[352] = "22.08";
      sa[353] = "22.1";
      sa[354] = "22.12";
      sa[355] = "22.13";
      sa[356] = "22.19";
      sa[357] = "22.2";
      sa[358] = "22.22";
      sa[359] = "22.24";
      sa[360] = "22.25";
      sa[361] = "22.29";
      sa[362] = "22.3";
      sa[363] = "22.34";
      sa[364] = "22.36";
      sa[365] = "22.37";
      sa[366] = "22.39";
      sa[367] = "22.41";
      sa[368] = "22.42";
      sa[369] = "22.44";
      sa[370] = "22.46";
      sa[371] = "22.51";
      sa[372] = "22.54";
      sa[373] = "22.56";
      sa[374] = "22.59";
      sa[375] = "22.61";
      sa[376] = "22.63";
      sa[377] = "22.64";
      sa[378] = "22.66";
      sa[379] = "22.68";
      sa[380] = "22.7";
      sa[381] = "22.73";
      sa[382] = "22.75";
      sa[383] = "22.76";
      sa[384] = "22.78";
      sa[385] = "22.8";
      sa[386] = "22.81";
      sa[387] = "22.83";
      sa[388] = "22.85";
      sa[389] = "22.87";
      sa[390] = "22.9";
      sa[391] = "22.92";
      sa[392] = "22.93";
      sa[393] = "22.95";
      sa[394] = "22.97";
      sa[395] = "22.98";
      sa[396] = "23.02";
      sa[397] = "23.07";
      sa[398] = "23.09";
      sa[399] = "23.1";
      sa[400] = "23.14";
      sa[401] = "23.15";
      sa[402] = "23.17";
      sa[403] = "23.19";
      sa[404] = "23.22";
      sa[405] = "23.24";
      sa[406] = "23.26";
      sa[407] = "23.29";
      sa[408] = "23.31";
      sa[409] = "23.32";
      sa[410] = "23.34";
      sa[411] = "23.36";
      sa[412] = "23.38";
      sa[413] = "23.39";
      sa[414] = "23.43";
      sa[415] = "23.44";
      sa[416] = "23.48";
      sa[417] = "23.51";
      sa[418] = "23.53";
      sa[419] = "23.55";
      sa[420] = "23.56";
      sa[421] = "23.58";
      sa[422] = "23.6";
      sa[423] = "23.61";
      sa[424] = "23.63";
      sa[425] = "23.65";
      sa[426] = "23.66";
      sa[427] = "23.68";
      sa[428] = "23.7";
      sa[429] = "23.72";
      sa[430] = "23.73";
      sa[431] = "23.75";
      sa[432] = "23.77";
      sa[433] = "23.78";
      sa[434] = "23.8";
      sa[435] = "23.82";
      sa[436] = "23.83";
      sa[437] = "23.87";
      sa[438] = "23.89";
      sa[439] = "23.9";
      sa[440] = "23.92";
      sa[441] = "23.94";
      sa[442] = "23.97";
      sa[443] = "23.99";
      sa[444] = "24";
      sa[445] = "24.02";
      sa[446] = "24.04";
      sa[447] = "24.06";
      sa[448] = "24.07";
      sa[449] = "24.09";
      sa[450] = "24.11";
      sa[451] = "24.12";
      sa[452] = "24.14";
      sa[453] = "24.16";
      sa[454] = "24.17";
      sa[455] = "24.19";
      sa[456] = "24.21";
      sa[457] = "24.23";
      sa[458] = "24.24";
      sa[459] = "24.28";
      sa[460] = "24.29";
      sa[461] = "24.31";
      sa[462] = "24.33";
      sa[463] = "24.34";
      sa[464] = "24.36";
      sa[465] = "24.38";
      sa[466] = "24.4";
      sa[467] = "24.41";
      sa[468] = "24.43";
      sa[469] = "24.45";
      sa[470] = "24.46";
      sa[471] = "24.48";
      sa[472] = "24.5";
      sa[473] = "24.51";
      sa[474] = "24.53";
      sa[475] = "24.55";
      sa[476] = "24.57";
      sa[477] = "24.58";
      sa[478] = "24.62";
      sa[479] = "24.63";
      sa[480] = "24.65";
      sa[481] = "24.67";
      sa[482] = "24.7";
      sa[483] = "24.72";
      sa[484] = "24.74";
      sa[485] = "24.75";
      sa[486] = "24.77";
      sa[487] = "24.79";
      sa[488] = "24.8";
      sa[489] = "24.82";
      sa[490] = "24.84";
      sa[491] = "24.85";
      sa[492] = "24.87";
      sa[493] = "24.89";
      sa[494] = "24.91";
      sa[495] = "24.92";
      sa[496] = "24.94";
      sa[497] = "24.96";
      sa[498] = "24.97";
      sa[499] = "24.99";
      sa[500] = "25.01";
      sa[501] = "25.02";
      sa[502] = "25.08";
      sa[503] = "25.11";
      sa[504] = "25.13";
      sa[505] = "25.14";
      sa[506] = "25.18";
      sa[507] = "25.19";
      sa[508] = "25.21";
      sa[509] = "25.23";
      sa[510] = "25.25";
      sa[511] = "25.26";
      sa[512] = "25.28";
      sa[513] = "25.3";
      sa[514] = "25.33";
      sa[515] = "25.36";
      sa[516] = "25.38";
      sa[517] = "25.4";
      sa[518] = "25.43";
      sa[519] = "25.45";
      sa[520] = "25.47";
      sa[521] = "25.48";
      sa[522] = "25.5";
      sa[523] = "25.52";
      sa[524] = "25.53";
      sa[525] = "25.55";
      sa[526] = "25.57";
      sa[527] = "25.59";
      sa[528] = "25.6";
      sa[529] = "25.62";
      sa[530] = "25.64";
      sa[531] = "25.65";
      sa[532] = "25.67";
      sa[533] = "25.69";
      sa[534] = "25.74";
      sa[535] = "25.76";
      sa[536] = "25.77";
      sa[537] = "25.79";
      sa[538] = "25.81";
      sa[539] = "25.84";
      sa[540] = "25.86";
      sa[541] = "25.87";
      sa[542] = "25.89";
      sa[543] = "25.91";
      sa[544] = "25.93";
      sa[545] = "25.94";
      sa[546] = "25.96";
      sa[547] = "25.98";
      sa[548] = "25.99";
      sa[549] = "26.01";
      sa[550] = "26.03";
      sa[551] = "26.04";
      sa[552] = "26.06";
      sa[553] = "26.08";
      sa[554] = "26.1";
      sa[555] = "26.11";
      sa[556] = "26.13";
      sa[557] = "26.15";
      sa[558] = "26.16";
      sa[559] = "26.18";
      sa[560] = "26.2";
      sa[561] = "26.21";
      sa[562] = "26.23";
      sa[563] = "26.25";
      sa[564] = "26.27";
      sa[565] = "26.28";
      sa[566] = "26.3";
      sa[567] = "26.32";
      sa[568] = "26.35";
      sa[569] = "26.37";
      sa[570] = "26.38";
      sa[571] = "26.4";
      sa[572] = "26.42";
      sa[573] = "26.44";
      sa[574] = "26.47";
      sa[575] = "26.5";
      sa[576] = "26.52";
      sa[577] = "26.54";
      sa[578] = "26.55";
      sa[579] = "26.59";
      sa[580] = "26.61";
      sa[581] = "26.62";
      sa[582] = "26.64";
      sa[583] = "26.66";
      sa[584] = "26.67";
      sa[585] = "26.69";
      sa[586] = "26.71";
      sa[587] = "26.72";
      sa[588] = "26.74";
      sa[589] = "26.76";
      sa[590] = "26.78";
      sa[591] = "26.79";
      sa[592] = "26.81";
      sa[593] = "26.83";
      sa[594] = "26.84";
      sa[595] = "26.86";
      sa[596] = "26.88";
      sa[597] = "26.93";
      sa[598] = "26.96";
      sa[599] = "26.98";
      sa[600] = "27";
      sa[601] = "27.01";
      sa[602] = "27.03";
      sa[603] = "27.05";
      sa[604] = "27.08";
      sa[605] = "27.1";
      sa[606] = "27.12";
      sa[607] = "27.13";
      sa[608] = "27.15";
      sa[609] = "27.17";
      sa[610] = "27.18";
      sa[611] = "27.2";
      sa[612] = "27.22";
      sa[613] = "27.23";
      sa[614] = "27.25";
      sa[615] = "27.27";
      sa[616] = "27.29";
      sa[617] = "27.3";
      sa[618] = "27.32";
      sa[619] = "27.34";
      sa[620] = "27.35";
      sa[621] = "27.37";
      sa[622] = "27.39";
      sa[623] = "27.4";
      sa[624] = "27.42";
      sa[625] = "27.44";
      sa[626] = "27.46";
      sa[627] = "27.47";
      sa[628] = "27.49";
      sa[629] = "27.51";
      sa[630] = "27.52";
      sa[631] = "27.54";
      sa[632] = "27.56";
      sa[633] = "27.59";
      sa[634] = "27.61";
      sa[635] = "27.64";
      sa[636] = "27.66";
      sa[637] = "27.68";
      sa[638] = "27.71";
      sa[639] = "27.73";
      sa[640] = "27.74";
      sa[641] = "27.76";
      sa[642] = "27.78";
      sa[643] = "27.8";
      sa[644] = "27.81";
      sa[645] = "27.83";
      sa[646] = "27.85";
      sa[647] = "27.88";
      sa[648] = "27.9";
      sa[649] = "27.91";
      sa[650] = "27.93";
      sa[651] = "27.97";
      sa[652] = "27.98";
      sa[653] = "28.02";
      sa[654] = "28.03";
      sa[655] = "28.05";
      sa[656] = "28.07";
      sa[657] = "28.1";
      sa[658] = "28.12";
      sa[659] = "28.14";
      sa[660] = "28.15";
      sa[661] = "28.17";
      sa[662] = "28.19";
      sa[663] = "28.2";
      sa[664] = "28.22";
      sa[665] = "28.24";
      sa[666] = "28.25";
      sa[667] = "28.27";
      sa[668] = "28.29";
      sa[669] = "28.31";
      sa[670] = "28.32";
      sa[671] = "28.34";
      sa[672] = "28.36";
      sa[673] = "28.37";
      sa[674] = "28.41";
      sa[675] = "28.44";
      sa[676] = "28.46";
      sa[677] = "28.48";
      sa[678] = "28.49";
      sa[679] = "28.51";
      sa[680] = "28.53";
      sa[681] = "28.54";
      sa[682] = "28.56";
      sa[683] = "28.59";
      sa[684] = "28.61";
      sa[685] = "28.63";
      sa[686] = "28.66";
      sa[687] = "28.7";
      sa[688] = "28.71";
      sa[689] = "28.73";
      sa[690] = "28.75";
      sa[691] = "28.76";
      sa[692] = "28.78";
      sa[693] = "28.8";
      sa[694] = "28.82";
      sa[695] = "28.83";
      sa[696] = "28.85";
      sa[697] = "28.87";
      sa[698] = "28.88";
      sa[699] = "28.92";
      sa[700] = "28.93";
      sa[701] = "28.97";
      sa[702] = "28.99";
      sa[703] = "29";
      sa[704] = "29.02";
      sa[705] = "29.04";
      sa[706] = "29.05";
      sa[707] = "29.09";
      sa[708] = "29.1";
      sa[709] = "29.14";
      sa[710] = "29.16";
      sa[711] = "29.17";
      sa[712] = "29.19";
      sa[713] = "29.21";
      sa[714] = "29.22";
      sa[715] = "29.24";
      sa[716] = "29.26";
      sa[717] = "29.27";
      sa[718] = "29.29";
      sa[719] = "29.31";
      sa[720] = "29.33";
      sa[721] = "29.36";
      sa[722] = "29.38";
      sa[723] = "29.39";
      sa[724] = "29.41";
      sa[725] = "29.43";
      sa[726] = "29.44";
      sa[727] = "29.48";
      sa[728] = "29.5";
      sa[729] = "29.51";
      sa[730] = "29.53";
      sa[731] = "29.56";
      sa[732] = "29.58";
      sa[733] = "29.6";
      sa[734] = "29.63";
      sa[735] = "29.65";
      sa[736] = "29.67";
      sa[737] = "29.68";
      sa[738] = "29.7";
      sa[739] = "29.72";
      sa[740] = "29.73";
      sa[741] = "29.77";
      sa[742] = "29.78";
      sa[743] = "29.8";
      sa[744] = "29.82";
      sa[745] = "29.84";
      sa[746] = "29.85";
      sa[747] = "29.87";
      sa[748] = "29.89";
      sa[749] = "29.9";
      sa[750] = "29.92";
      sa[751] = "29.94";
      sa[752] = "29.95";
      sa[753] = "29.97";
      sa[754] = "29.99";
      sa[755] = "3.21";
      sa[756] = "3.32";
      sa[757] = "30.02";
      sa[758] = "30.04";
      sa[759] = "30.06";
      sa[760] = "30.07";
      sa[761] = "30.11";
      sa[762] = "30.12";
      sa[763] = "30.14";
      sa[764] = "30.16";
      sa[765] = "30.18";
      sa[766] = "30.19";
      sa[767] = "30.21";
      sa[768] = "30.24";
      sa[769] = "30.26";
      sa[770] = "30.28";
      sa[771] = "30.29";
      sa[772] = "30.31";
      sa[773] = "30.33";
      sa[774] = "30.35";
      sa[775] = "30.36";
      sa[776] = "30.38";
      sa[777] = "30.4";
      sa[778] = "30.41";
      sa[779] = "30.45";
      sa[780] = "30.46";
      sa[781] = "30.48";
      sa[782] = "30.5";
      sa[783] = "30.52";
      sa[784] = "30.55";
      sa[785] = "30.57";
      sa[786] = "30.58";
      sa[787] = "30.6";
      sa[788] = "30.62";
      sa[789] = "30.63";
      sa[790] = "30.65";
      sa[791] = "30.67";
      sa[792] = "30.69";
      sa[793] = "30.7";
      sa[794] = "30.72";
      sa[795] = "30.75";
      sa[796] = "30.79";
      sa[797] = "30.8";
      sa[798] = "30.82";
      sa[799] = "30.84";
      sa[800] = "30.86";
      sa[801] = "30.87";
      sa[802] = "30.91";
      sa[803] = "30.92";
      sa[804] = "30.94";
      sa[805] = "30.96";
      sa[806] = "30.97";
      sa[807] = "30.99";
      sa[808] = "31.03";
      sa[809] = "31.04";
      sa[810] = "31.06";
      sa[811] = "31.08";
      sa[812] = "31.09";
      sa[813] = "31.11";
      sa[814] = "31.13";
      sa[815] = "31.14";
      sa[816] = "31.16";
      sa[817] = "31.18";
      sa[818] = "31.2";
      sa[819] = "31.21";
      sa[820] = "31.25";
      sa[821] = "31.26";
      sa[822] = "31.28";
      sa[823] = "31.3";
      sa[824] = "31.31";
      sa[825] = "31.35";
      sa[826] = "31.37";
      sa[827] = "31.38";
      sa[828] = "31.4";
      sa[829] = "31.42";
      sa[830] = "31.45";
      sa[831] = "31.47";
      sa[832] = "31.48";
      sa[833] = "31.5";
      sa[834] = "31.52";
      sa[835] = "31.55";
      sa[836] = "31.57";
      sa[837] = "31.59";
      sa[838] = "31.6";
      sa[839] = "31.62";
      sa[840] = "31.64";
      sa[841] = "31.65";
      sa[842] = "31.69";
      sa[843] = "31.71";
      sa[844] = "31.72";
      sa[845] = "31.74";
      sa[846] = "31.76";
      sa[847] = "31.77";
      sa[848] = "31.79";
      sa[849] = "31.81";
      sa[850] = "31.82";
      sa[851] = "31.84";
      sa[852] = "31.86";
      sa[853] = "31.88";
      sa[854] = "31.89";
      sa[855] = "31.91";
      sa[856] = "31.93";
      sa[857] = "31.94";
      sa[858] = "31.96";
      sa[859] = "32.03";
      sa[860] = "32.05";
      sa[861] = "32.1";
      sa[862] = "32.11";
      sa[863] = "32.13";
      sa[864] = "32.15";
      sa[865] = "32.16";
      sa[866] = "32.18";
      sa[867] = "32.2";
      sa[868] = "32.22";
      sa[869] = "32.23";
      sa[870] = "32.25";
      sa[871] = "32.27";
      sa[872] = "32.3";
      sa[873] = "32.32";
      sa[874] = "32.33";
      sa[875] = "32.35";
      sa[876] = "32.37";
      sa[877] = "32.39";
      sa[878] = "32.4";
      sa[879] = "32.42";
      sa[880] = "32.44";
      sa[881] = "32.45";
      sa[882] = "32.47";
      sa[883] = "32.49";
      sa[884] = "32.5";
      sa[885] = "32.52";
      sa[886] = "32.54";
      sa[887] = "32.56";
      sa[888] = "32.57";
      sa[889] = "32.59";
      sa[890] = "32.61";
      sa[891] = "32.62";
      sa[892] = "32.64";
      sa[893] = "32.66";
      sa[894] = "32.67";
      sa[895] = "32.69";
      sa[896] = "32.71";
      sa[897] = "32.74";
      sa[898] = "32.76";
      sa[899] = "32.78";
      sa[900] = "32.79";
      sa[901] = "32.81";
      sa[902] = "32.83";
      sa[903] = "32.84";
      sa[904] = "32.86";
      sa[905] = "32.88";
      sa[906] = "32.9";
      sa[907] = "32.91";
      sa[908] = "32.93";
      sa[909] = "32.95";
      sa[910] = "32.96";
      sa[911] = "32.98";
      sa[912] = "33";
      sa[913] = "33.01";
      sa[914] = "33.03";
      sa[915] = "33.05";
      sa[916] = "33.07";
      sa[917] = "33.08";
      sa[918] = "33.12";
      sa[919] = "33.13";
      sa[920] = "33.15";
      sa[921] = "33.17";
      sa[922] = "33.2";
      sa[923] = "33.22";
      sa[924] = "33.24";
      sa[925] = "33.25";
      sa[926] = "33.27";
      sa[927] = "33.3";
      sa[928] = "33.32";
      sa[929] = "33.34";
      sa[930] = "33.35";
      sa[931] = "33.37";
      sa[932] = "33.39";
      sa[933] = "33.41";
      sa[934] = "33.42";
      sa[935] = "33.44";
      sa[936] = "33.46";
      sa[937] = "33.49";
      sa[938] = "33.51";
      sa[939] = "33.52";
      sa[940] = "33.54";
      sa[941] = "33.56";
      sa[942] = "33.58";
      sa[943] = "33.59";
      sa[944] = "33.61";
      sa[945] = "33.63";
      sa[946] = "33.64";
      sa[947] = "33.66";
      sa[948] = "33.68";
      sa[949] = "33.69";
      sa[950] = "33.71";
      sa[951] = "33.73";
      sa[952] = "33.75";
      sa[953] = "33.76";
      sa[954] = "33.78";
      sa[955] = "33.8";
      sa[956] = "33.81";
      sa[957] = "33.83";
      sa[958] = "33.85";
      sa[959] = "33.86";
      sa[960] = "33.88";
      sa[961] = "33.92";
      sa[962] = "33.93";
      sa[963] = "33.97";
      sa[964] = "33.98";
      sa[965] = "34";
      sa[966] = "34.02";
      sa[967] = "34.03";
      sa[968] = "34.05";
      sa[969] = "34.07";
      sa[970] = "34.1";
      sa[971] = "34.12";
      sa[972] = "34.15";
      sa[973] = "34.19";
      sa[974] = "34.2";
      sa[975] = "34.22";
      sa[976] = "34.24";
      sa[977] = "34.26";
      sa[978] = "34.29";
      sa[979] = "34.31";
      sa[980] = "34.32";
      sa[981] = "34.34";
      sa[982] = "34.36";
      sa[983] = "34.37";
      sa[984] = "34.39";
      sa[985] = "34.41";
      sa[986] = "34.43";
      sa[987] = "34.44";
      sa[988] = "34.46";
      sa[989] = "34.48";
      sa[990] = "34.49";
      sa[991] = "34.51";
      sa[992] = "34.53";
      sa[993] = "34.54";
      sa[994] = "34.56";
      sa[995] = "34.58";
      sa[996] = "34.6";
      sa[997] = "34.61";
      sa[998] = "34.63";
      sa[999] = "34.65";
      sa[1000] = "34.66";
      sa[1001] = "34.68";
      sa[1002] = "34.71";
      sa[1003] = "34.73";
      sa[1004] = "34.75";
      sa[1005] = "34.77";
      sa[1006] = "34.78";
      sa[1007] = "34.8";
      sa[1008] = "34.82";
      sa[1009] = "34.83";
      sa[1010] = "34.85";
      sa[1011] = "34.87";
      sa[1012] = "34.88";
      sa[1013] = "34.9";
      sa[1014] = "34.92";
      sa[1015] = "34.94";
      sa[1016] = "34.95";
      sa[1017] = "34.97";
      sa[1018] = "35";
      sa[1019] = "35.02";
      sa[1020] = "35.04";
      sa[1021] = "35.05";
      sa[1022] = "35.07";
      sa[1023] = "35.09";
      sa[1024] = "35.11";
      sa[1025] = "35.12";
      sa[1026] = "35.14";
      sa[1027] = "35.17";
      sa[1028] = "35.19";
      sa[1029] = "35.21";
      sa[1030] = "35.22";
      sa[1031] = "35.24";
      sa[1032] = "35.28";
      sa[1033] = "35.29";
      sa[1034] = "35.31";
      sa[1035] = "35.33";
      sa[1036] = "35.34";
      sa[1037] = "35.36";
      sa[1038] = "35.41";
      sa[1039] = "35.43";
      sa[1040] = "35.48";
      sa[1041] = "35.5";
      sa[1042] = "35.51";
      sa[1043] = "35.55";
      sa[1044] = "35.56";
      sa[1045] = "35.6";
      sa[1046] = "35.62";
      sa[1047] = "35.63";
      sa[1048] = "35.65";
      sa[1049] = "35.67";
      sa[1050] = "35.68";
      sa[1051] = "35.7";
      sa[1052] = "35.72";
      sa[1053] = "35.73";
      sa[1054] = "35.75";
      sa[1055] = "35.77";
      sa[1056] = "35.79";
      sa[1057] = "35.8";
      sa[1058] = "35.82";
      sa[1059] = "35.84";
      sa[1060] = "35.85";
      sa[1061] = "35.87";
      sa[1062] = "35.89";
      sa[1063] = "35.9";
      sa[1064] = "35.92";
      sa[1065] = "35.96";
      sa[1066] = "35.97";
      sa[1067] = "35.99";
      sa[1068] = "36.01";
      sa[1069] = "36.02";
      sa[1070] = "36.04";
      sa[1071] = "36.06";
      sa[1072] = "36.09";
      sa[1073] = "36.11";
      sa[1074] = "36.16";
      sa[1075] = "36.18";
      sa[1076] = "36.19";
      sa[1077] = "36.21";
      sa[1078] = "36.23";
      sa[1079] = "36.24";
      sa[1080] = "36.28";
      sa[1081] = "36.3";
      sa[1082] = "36.31";
      sa[1083] = "36.33";
      sa[1084] = "36.35";
      sa[1085] = "36.36";
      sa[1086] = "36.38";
      sa[1087] = "36.4";
      sa[1088] = "36.41";
      sa[1089] = "36.43";
      sa[1090] = "36.45";
      sa[1091] = "36.48";
      sa[1092] = "36.5";
      sa[1093] = "36.52";
      sa[1094] = "36.53";
      sa[1095] = "36.57";
      sa[1096] = "36.6";
      sa[1097] = "36.62";
      sa[1098] = "36.64";
      sa[1099] = "36.65";
      sa[1100] = "36.67";
      sa[1101] = "36.69";
      sa[1102] = "36.7";
      sa[1103] = "36.72";
      sa[1104] = "36.74";
      sa[1105] = "36.75";
      sa[1106] = "36.77";
      sa[1107] = "36.79";
      sa[1108] = "36.82";
      sa[1109] = "36.84";
      sa[1110] = "36.86";
      sa[1111] = "36.87";
      sa[1112] = "36.89";
      sa[1113] = "36.91";
      sa[1114] = "36.92";
      sa[1115] = "36.94";
      sa[1116] = "36.96";
      sa[1117] = "36.98";
      sa[1118] = "36.99";
      sa[1119] = "37.01";
      sa[1120] = "37.03";
      sa[1121] = "37.04";
      sa[1122] = "37.06";
      sa[1123] = "37.09";
      sa[1124] = "37.13";
      sa[1125] = "37.15";
      sa[1126] = "37.16";
      sa[1127] = "37.18";
      sa[1128] = "37.2";
      sa[1129] = "37.21";
      sa[1130] = "37.25";
      sa[1131] = "37.26";
      sa[1132] = "37.3";
      sa[1133] = "37.32";
      sa[1134] = "37.33";
      sa[1135] = "37.35";
      sa[1136] = "37.38";
      sa[1137] = "37.4";
      sa[1138] = "37.42";
      sa[1139] = "37.43";
      sa[1140] = "37.45";
      sa[1141] = "37.47";
      sa[1142] = "37.49";
      sa[1143] = "37.5";
      sa[1144] = "37.52";
      sa[1145] = "37.54";
      sa[1146] = "37.55";
      sa[1147] = "37.57";
      sa[1148] = "37.59";
      sa[1149] = "37.6";
      sa[1150] = "37.62";
      sa[1151] = "37.64";
      sa[1152] = "37.67";
      sa[1153] = "37.69";
      sa[1154] = "37.71";
      sa[1155] = "37.72";
      sa[1156] = "37.74";
      sa[1157] = "37.76";
      sa[1158] = "37.77";
      sa[1159] = "37.79";
      sa[1160] = "37.81";
      sa[1161] = "37.83";
      sa[1162] = "37.84";
      sa[1163] = "37.86";
      sa[1164] = "37.88";
      sa[1165] = "37.89";
      sa[1166] = "37.91";
      sa[1167] = "37.94";
      sa[1168] = "37.96";
      sa[1169] = "37.98";
      sa[1170] = "38";
      sa[1171] = "38.05";
      sa[1172] = "38.06";
      sa[1173] = "38.08";
      sa[1174] = "38.1";
      sa[1175] = "38.11";
      sa[1176] = "38.13";
      sa[1177] = "38.15";
      sa[1178] = "38.17";
      sa[1179] = "38.18";
      sa[1180] = "38.2";
      sa[1181] = "38.22";
      sa[1182] = "38.23";
      sa[1183] = "38.25";
      sa[1184] = "38.27";
      sa[1185] = "38.28";
      sa[1186] = "38.3";
      sa[1187] = "38.32";
      sa[1188] = "38.34";
      sa[1189] = "38.37";
      sa[1190] = "38.39";
      sa[1191] = "38.4";
      sa[1192] = "38.42";
      sa[1193] = "38.44";
      sa[1194] = "38.45";
      sa[1195] = "38.47";
      sa[1196] = "38.49";
      sa[1197] = "38.51";
      sa[1198] = "38.54";
      sa[1199] = "38.57";
      sa[1200] = "38.59";
      sa[1201] = "38.61";
      sa[1202] = "38.62";
      sa[1203] = "38.66";
      sa[1204] = "38.68";
      sa[1205] = "38.71";
      sa[1206] = "38.73";
      sa[1207] = "38.74";
      sa[1208] = "38.78";
      sa[1209] = "38.79";
      sa[1210] = "38.83";
      sa[1211] = "38.86";
      sa[1212] = "38.88";
      sa[1213] = "38.91";
      sa[1214] = "38.98";
      sa[1215] = "39";
      sa[1216] = "39.03";
      sa[1217] = "39.05";
      sa[1218] = "39.07";
      sa[1219] = "39.08";
      sa[1220] = "39.1";
      sa[1221] = "39.12";
      sa[1222] = "39.13";
      sa[1223] = "39.15";
      sa[1224] = "39.17";
      sa[1225] = "39.19";
      sa[1226] = "39.2";
      sa[1227] = "39.22";
      sa[1228] = "39.25";
      sa[1229] = "39.27";
      sa[1230] = "39.3";
      sa[1231] = "39.32";
      sa[1232] = "39.36";
      sa[1233] = "39.39";
      sa[1234] = "39.41";
      sa[1235] = "39.42";
      sa[1236] = "39.46";
      sa[1237] = "39.51";
      sa[1238] = "39.53";
      sa[1239] = "39.54";
      sa[1240] = "39.56";
      sa[1241] = "39.58";
      sa[1242] = "39.59";
      sa[1243] = "39.64";
      sa[1244] = "39.66";
      sa[1245] = "39.7";
      sa[1246] = "39.73";
      sa[1247] = "39.75";
      sa[1248] = "39.76";
      sa[1249] = "39.78";
      sa[1250] = "39.8";
      sa[1251] = "39.81";
      sa[1252] = "39.85";
      sa[1253] = "39.87";
      sa[1254] = "39.9";
      sa[1255] = "39.92";
      sa[1256] = "39.93";
      sa[1257] = "39.95";
      sa[1258] = "39.97";
      sa[1259] = "39.98";
      sa[1260] = "4.4";
      sa[1261] = "4.59";
      sa[1262] = "40.04";
      sa[1263] = "40.05";
      sa[1264] = "40.07";
      sa[1265] = "40.09";
      sa[1266] = "40.1";
      sa[1267] = "40.14";
      sa[1268] = "40.15";
      sa[1269] = "40.17";
      sa[1270] = "40.19";
      sa[1271] = "40.21";
      sa[1272] = "40.22";
      sa[1273] = "40.24";
      sa[1274] = "40.26";
      sa[1275] = "40.27";
      sa[1276] = "40.31";
      sa[1277] = "40.32";
      sa[1278] = "40.34";
      sa[1279] = "40.36";
      sa[1280] = "40.38";
      sa[1281] = "40.39";
      sa[1282] = "40.41";
      sa[1283] = "40.43";
      sa[1284] = "40.44";
      sa[1285] = "40.46";
      sa[1286] = "40.48";
      sa[1287] = "40.53";
      sa[1288] = "40.6";
      sa[1289] = "40.61";
      sa[1290] = "40.63";
      sa[1291] = "40.65";
      sa[1292] = "40.66";
      sa[1293] = "40.68";
      sa[1294] = "40.7";
      sa[1295] = "40.72";
      sa[1296] = "40.75";
      sa[1297] = "40.77";
      sa[1298] = "40.78";
      sa[1299] = "40.8";
      sa[1300] = "40.82";
      sa[1301] = "40.83";
      sa[1302] = "40.85";
      sa[1303] = "40.87";
      sa[1304] = "40.92";
      sa[1305] = "40.94";
      sa[1306] = "40.95";
      sa[1307] = "40.97";
      sa[1308] = "40.99";
      sa[1309] = "41";
      sa[1310] = "41.09";
      sa[1311] = "41.11";
      sa[1312] = "41.12";
      sa[1313] = "41.16";
      sa[1314] = "41.17";
      sa[1315] = "41.19";
      sa[1316] = "41.21";
      sa[1317] = "41.23";
      sa[1318] = "41.24";
      sa[1319] = "41.28";
      sa[1320] = "41.29";
      sa[1321] = "41.31";
      sa[1322] = "41.33";
      sa[1323] = "41.34";
      sa[1324] = "41.38";
      sa[1325] = "41.4";
      sa[1326] = "41.43";
      sa[1327] = "41.45";
      sa[1328] = "41.46";
      sa[1329] = "41.5";
      sa[1330] = "41.53";
      sa[1331] = "41.58";
      sa[1332] = "41.6";
      sa[1333] = "41.62";
      sa[1334] = "41.63";
      sa[1335] = "41.65";
      sa[1336] = "41.68";
      sa[1337] = "41.7";
      sa[1338] = "41.72";
      sa[1339] = "41.74";
      sa[1340] = "41.77";
      sa[1341] = "41.79";
      sa[1342] = "41.8";
      sa[1343] = "41.85";
      sa[1344] = "41.89";
      sa[1345] = "41.91";
      sa[1346] = "41.92";
      sa[1347] = "41.96";
      sa[1348] = "41.99";
      sa[1349] = "42.02";
      sa[1350] = "42.04";
      sa[1351] = "42.06";
      sa[1352] = "42.08";
      sa[1353] = "42.09";
      sa[1354] = "42.11";
      sa[1355] = "42.13";
      sa[1356] = "42.26";
      sa[1357] = "42.28";
      sa[1358] = "42.3";
      sa[1359] = "42.31";
      sa[1360] = "42.4";
      sa[1361] = "42.42";
      sa[1362] = "42.43";
      sa[1363] = "42.47";
      sa[1364] = "42.48";
      sa[1365] = "42.53";
      sa[1366] = "42.55";
      sa[1367] = "42.6";
      sa[1368] = "42.64";
      sa[1369] = "42.65";
      sa[1370] = "42.67";
      sa[1371] = "42.72";
      sa[1372] = "42.74";
      sa[1373] = "42.76";
      sa[1374] = "42.77";
      sa[1375] = "42.81";
      sa[1376] = "42.82";
      sa[1377] = "42.84";
      sa[1378] = "42.86";
      sa[1379] = "42.89";
      sa[1380] = "42.91";
      sa[1381] = "42.94";
      sa[1382] = "42.96";
      sa[1383] = "42.99";
      sa[1384] = "43.01";
      sa[1385] = "43.03";
      sa[1386] = "43.04";
      sa[1387] = "43.08";
      sa[1388] = "43.1";
      sa[1389] = "43.13";
      sa[1390] = "43.2";
      sa[1391] = "43.21";
      sa[1392] = "43.23";
      sa[1393] = "43.25";
      sa[1394] = "43.3";
      sa[1395] = "43.32";
      sa[1396] = "43.33";
      sa[1397] = "43.37";
      sa[1398] = "43.4";
      sa[1399] = "43.49";
      sa[1400] = "43.5";
      sa[1401] = "43.52";
      sa[1402] = "43.55";
      sa[1403] = "43.57";
      sa[1404] = "43.59";
      sa[1405] = "43.61";
      sa[1406] = "43.64";
      sa[1407] = "43.66";
      sa[1408] = "43.71";
      sa[1409] = "43.72";
      sa[1410] = "43.74";
      sa[1411] = "43.76";
      sa[1412] = "43.81";
      sa[1413] = "43.84";
      sa[1414] = "43.86";
      sa[1415] = "43.88";
      sa[1416] = "43.93";
      sa[1417] = "43.96";
      sa[1418] = "44";
      sa[1419] = "44.08";
      sa[1420] = "44.1";
      sa[1421] = "44.15";
      sa[1422] = "44.17";
      sa[1423] = "44.18";
      sa[1424] = "44.2";
      sa[1425] = "44.22";
      sa[1426] = "44.23";
      sa[1427] = "44.27";
      sa[1428] = "44.29";
      sa[1429] = "44.34";
      sa[1430] = "44.35";
      sa[1431] = "44.4";
      sa[1432] = "44.42";
      sa[1433] = "44.44";
      sa[1434] = "44.49";
      sa[1435] = "44.51";
      sa[1436] = "44.52";
      sa[1437] = "44.57";
      sa[1438] = "44.59";
      sa[1439] = "44.61";
      sa[1440] = "44.68";
      sa[1441] = "44.69";
      sa[1442] = "44.73";
      sa[1443] = "44.78";
      sa[1444] = "44.83";
      sa[1445] = "44.85";
      sa[1446] = "44.88";
      sa[1447] = "44.93";
      sa[1448] = "44.95";
      sa[1449] = "44.97";
      sa[1450] = "45";
      sa[1451] = "45.02";
      sa[1452] = "45.03";
      sa[1453] = "45.07";
      sa[1454] = "45.08";
      sa[1455] = "45.1";
      sa[1456] = "45.15";
      sa[1457] = "45.2";
      sa[1458] = "45.22";
      sa[1459] = "45.24";
      sa[1460] = "45.27";
      sa[1461] = "45.32";
      sa[1462] = "45.34";
      sa[1463] = "45.37";
      sa[1464] = "45.41";
      sa[1465] = "45.46";
      sa[1466] = "45.53";
      sa[1467] = "45.54";
      sa[1468] = "45.56";
      sa[1469] = "45.58";
      sa[1470] = "45.61";
      sa[1471] = "45.63";
      sa[1472] = "45.66";
      sa[1473] = "45.68";
      sa[1474] = "45.7";
      sa[1475] = "45.73";
      sa[1476] = "45.76";
      sa[1477] = "45.83";
      sa[1478] = "45.85";
      sa[1479] = "45.87";
      sa[1480] = "45.9";
      sa[1481] = "45.95";
      sa[1482] = "45.97";
      sa[1483] = "45.99";
      sa[1484] = "46.02";
      sa[1485] = "46.04";
      sa[1486] = "46.05";
      sa[1487] = "46.09";
      sa[1488] = "46.1";
      sa[1489] = "46.14";
      sa[1490] = "46.16";
      sa[1491] = "46.17";
      sa[1492] = "46.19";
      sa[1493] = "46.21";
      sa[1494] = "46.26";
      sa[1495] = "46.31";
      sa[1496] = "46.33";
      sa[1497] = "46.34";
      sa[1498] = "46.36";
      sa[1499] = "46.41";
      sa[1500] = "46.44";
      sa[1501] = "46.46";
      sa[1502] = "46.48";
      sa[1503] = "46.5";
      sa[1504] = "46.51";
      sa[1505] = "46.55";
      sa[1506] = "46.56";
      sa[1507] = "46.58";
      sa[1508] = "46.63";
      sa[1509] = "46.65";
      sa[1510] = "46.68";
      sa[1511] = "46.7";
      sa[1512] = "46.73";
      sa[1513] = "46.78";
      sa[1514] = "46.82";
      sa[1515] = "46.89";
      sa[1516] = "46.94";
      sa[1517] = "46.95";
      sa[1518] = "47.01";
      sa[1519] = "47.02";
      sa[1520] = "47.04";
      sa[1521] = "47.07";
      sa[1522] = "47.09";
      sa[1523] = "47.14";
      sa[1524] = "47.18";
      sa[1525] = "47.24";
      sa[1526] = "47.26";
      sa[1527] = "47.31";
      sa[1528] = "47.33";
      sa[1529] = "47.35";
      sa[1530] = "47.41";
      sa[1531] = "47.45";
      sa[1532] = "47.48";
      sa[1533] = "47.52";
      sa[1534] = "47.57";
      sa[1535] = "47.58";
      sa[1536] = "47.6";
      sa[1537] = "47.63";
      sa[1538] = "47.67";
      sa[1539] = "47.77";
      sa[1540] = "47.79";
      sa[1541] = "47.8";
      sa[1542] = "47.82";
      sa[1543] = "47.84";
      sa[1544] = "47.99";
      sa[1545] = "48.03";
      sa[1546] = "48.13";
      sa[1547] = "48.14";
      sa[1548] = "48.18";
      sa[1549] = "48.26";
      sa[1550] = "48.35";
      sa[1551] = "48.57";
      sa[1552] = "48.65";
      sa[1553] = "48.69";
      sa[1554] = "48.72";
      sa[1555] = "48.74";
      sa[1556] = "48.81";
      sa[1557] = "48.84";
      sa[1558] = "48.86";
      sa[1559] = "48.96";
      sa[1560] = "48.98";
      sa[1561] = "49.05";
      sa[1562] = "49.08";
      sa[1563] = "49.1";
      sa[1564] = "49.15";
      sa[1565] = "49.22";
      sa[1566] = "49.27";
      sa[1567] = "49.37";
      sa[1568] = "49.49";
      sa[1569] = "49.5";
      sa[1570] = "49.57";
      sa[1571] = "49.61";
      sa[1572] = "49.79";
      sa[1573] = "49.81";
      sa[1574] = "49.86";
      sa[1575] = "49.93";
      sa[1576] = "5.08";
      sa[1577] = "5.25";
      sa[1578] = "5.78";
      sa[1579] = "5.97";
      sa[1580] = "50.01";
      sa[1581] = "50.1";
      sa[1582] = "50.13";
      sa[1583] = "50.15";
      sa[1584] = "50.2";
      sa[1585] = "50.22";
      sa[1586] = "50.32";
      sa[1587] = "50.39";
      sa[1588] = "50.64";
      sa[1589] = "50.68";
      sa[1590] = "50.73";
      sa[1591] = "50.9";
      sa[1592] = "50.92";
      sa[1593] = "51.05";
      sa[1594] = "51.07";
      sa[1595] = "51.26";
      sa[1596] = "51.29";
      sa[1597] = "51.46";
      sa[1598] = "51.54";
      sa[1599] = "51.66";
      sa[1600] = "51.87";
      sa[1601] = "51.88";
      sa[1602] = "52.05";
      sa[1603] = "52.21";
      sa[1604] = "52.36";
      sa[1605] = "52.46";
      sa[1606] = "52.68";
      sa[1607] = "52.77";
      sa[1608] = "53.04";
      sa[1609] = "53.24";
      sa[1610] = "53.35";
      sa[1611] = "53.4";
      sa[1612] = "53.48";
      sa[1613] = "53.65";
      sa[1614] = "54.03";
      sa[1615] = "54.62";
      sa[1616] = "54.67";
      sa[1617] = "54.79";
      sa[1618] = "54.81";
      sa[1619] = "54.83";
      sa[1620] = "55.2";
      sa[1621] = "55.47";
      sa[1622] = "55.51";
      sa[1623] = "55.78";
      sa[1624] = "56.07";
      sa[1625] = "56.59";
      sa[1626] = "56.83";
      sa[1627] = "57.04";
      sa[1628] = "57.36";
      sa[1629] = "58.7";
      sa[1630] = "58.96";
      sa[1631] = "59.64";
      sa[1632] = "6.41";
      sa[1633] = "6.43";
      sa[1634] = "6.72";
      sa[1635] = "6.87";
      sa[1636] = "6.95";
      sa[1637] = "7.12";
      sa[1638] = "7.63";
      sa[1639] = "7.65";
      sa[1640] = "7.91";
      sa[1641] = "8.06";
      sa[1642] = "8.11";
      sa[1643] = "8.13";
      sa[1644] = "8.23";
      sa[1645] = "8.36";
      sa[1646] = "8.48";
      sa[1647] = "8.6";
      sa[1648] = "8.69";
      sa[1649] = "8.76";
      sa[1650] = "8.81";
      sa[1651] = "8.82";
      sa[1652] = "8.87";
      sa[1653] = "9.18";
      sa[1654] = "9.21";
      sa[1655] = "9.3";
      sa[1656] = "9.32";
      sa[1657] = "9.4";
      sa[1658] = "9.45";
      sa[1659] = "9.71";
      sa[1660] = "9.78";
      sa[1661] = "9.86";
      sa[1662] = "9.89";
      sa[1663] = "9.93";
    }
  }
}
// The class representing column eve_mins
class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_5 {
  public static final String[] VALUES = new String[1606];
  static {
    GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_5_0.fill(VALUES);
  }
  static final class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_5_0 {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "101.3";
      sa[2] = "101.5";
      sa[3] = "102.2";
      sa[4] = "102.4";
      sa[5] = "102.6";
      sa[6] = "102.8";
      sa[7] = "103";
      sa[8] = "103.1";
      sa[9] = "103.2";
      sa[10] = "103.3";
      sa[11] = "103.4";
      sa[12] = "103.6";
      sa[13] = "103.8";
      sa[14] = "104.9";
      sa[15] = "105.5";
      sa[16] = "105.6";
      sa[17] = "105.7";
      sa[18] = "105.8";
      sa[19] = "106.1";
      sa[20] = "106.2";
      sa[21] = "106.5";
      sa[22] = "106.8";
      sa[23] = "107.1";
      sa[24] = "107.9";
      sa[25] = "108.1";
      sa[26] = "108.2";
      sa[27] = "108.5";
      sa[28] = "109.6";
      sa[29] = "109.7";
      sa[30] = "109.9";
      sa[31] = "110.1";
      sa[32] = "110.2";
      sa[33] = "110.4";
      sa[34] = "110.8";
      sa[35] = "111.3";
      sa[36] = "111.6";
      sa[37] = "112.3";
      sa[38] = "112.5";
      sa[39] = "112.7";
      sa[40] = "112.9";
      sa[41] = "113";
      sa[42] = "113.2";
      sa[43] = "113.3";
      sa[44] = "113.4";
      sa[45] = "114";
      sa[46] = "114.3";
      sa[47] = "114.4";
      sa[48] = "114.5";
      sa[49] = "114.6";
      sa[50] = "114.7";
      sa[51] = "114.8";
      sa[52] = "115";
      sa[53] = "115.2";
      sa[54] = "115.5";
      sa[55] = "115.6";
      sa[56] = "115.7";
      sa[57] = "115.9";
      sa[58] = "116.5";
      sa[59] = "116.6";
      sa[60] = "117";
      sa[61] = "117.6";
      sa[62] = "117.8";
      sa[63] = "117.9";
      sa[64] = "118";
      sa[65] = "118.2";
      sa[66] = "118.5";
      sa[67] = "118.6";
      sa[68] = "118.7";
      sa[69] = "118.8";
      sa[70] = "118.9";
      sa[71] = "119";
      sa[72] = "119.3";
      sa[73] = "119.6";
      sa[74] = "119.7";
      sa[75] = "119.9";
      sa[76] = "120";
      sa[77] = "120.1";
      sa[78] = "120.3";
      sa[79] = "120.4";
      sa[80] = "120.5";
      sa[81] = "120.6";
      sa[82] = "120.7";
      sa[83] = "120.9";
      sa[84] = "121";
      sa[85] = "121.2";
      sa[86] = "121.6";
      sa[87] = "121.8";
      sa[88] = "121.9";
      sa[89] = "122.1";
      sa[90] = "122.2";
      sa[91] = "122.3";
      sa[92] = "122.8";
      sa[93] = "122.9";
      sa[94] = "123";
      sa[95] = "123.1";
      sa[96] = "123.3";
      sa[97] = "123.4";
      sa[98] = "123.5";
      sa[99] = "123.6";
      sa[100] = "123.9";
      sa[101] = "124";
      sa[102] = "124.2";
      sa[103] = "124.4";
      sa[104] = "124.7";
      sa[105] = "125.6";
      sa[106] = "125.8";
      sa[107] = "125.9";
      sa[108] = "126";
      sa[109] = "126.2";
      sa[110] = "126.4";
      sa[111] = "126.5";
      sa[112] = "126.8";
      sa[113] = "126.9";
      sa[114] = "127";
      sa[115] = "127.3";
      sa[116] = "127.4";
      sa[117] = "127.5";
      sa[118] = "127.6";
      sa[119] = "127.7";
      sa[120] = "127.8";
      sa[121] = "128";
      sa[122] = "128.3";
      sa[123] = "128.7";
      sa[124] = "128.9";
      sa[125] = "129.1";
      sa[126] = "129.2";
      sa[127] = "129.3";
      sa[128] = "129.4";
      sa[129] = "129.5";
      sa[130] = "129.8";
      sa[131] = "130";
      sa[132] = "130.1";
      sa[133] = "130.2";
      sa[134] = "130.4";
      sa[135] = "130.7";
      sa[136] = "131";
      sa[137] = "131.1";
      sa[138] = "131.2";
      sa[139] = "131.4";
      sa[140] = "131.7";
      sa[141] = "131.8";
      sa[142] = "132.2";
      sa[143] = "132.3";
      sa[144] = "132.4";
      sa[145] = "132.5";
      sa[146] = "132.8";
      sa[147] = "132.9";
      sa[148] = "133";
      sa[149] = "133.1";
      sa[150] = "133.2";
      sa[151] = "133.4";
      sa[152] = "133.9";
      sa[153] = "134";
      sa[154] = "134.1";
      sa[155] = "134.2";
      sa[156] = "134.3";
      sa[157] = "134.4";
      sa[158] = "134.5";
      sa[159] = "134.6";
      sa[160] = "134.7";
      sa[161] = "134.9";
      sa[162] = "135";
      sa[163] = "135.2";
      sa[164] = "135.4";
      sa[165] = "135.8";
      sa[166] = "135.9";
      sa[167] = "136";
      sa[168] = "136.1";
      sa[169] = "136.2";
      sa[170] = "136.3";
      sa[171] = "136.4";
      sa[172] = "136.7";
      sa[173] = "136.8";
      sa[174] = "136.9";
      sa[175] = "137";
      sa[176] = "137.2";
      sa[177] = "137.3";
      sa[178] = "137.5";
      sa[179] = "137.6";
      sa[180] = "137.8";
      sa[181] = "137.9";
      sa[182] = "138";
      sa[183] = "138.1";
      sa[184] = "138.2";
      sa[185] = "138.3";
      sa[186] = "138.5";
      sa[187] = "138.6";
      sa[188] = "138.7";
      sa[189] = "138.9";
      sa[190] = "139.1";
      sa[191] = "139.2";
      sa[192] = "139.5";
      sa[193] = "139.6";
      sa[194] = "139.8";
      sa[195] = "140";
      sa[196] = "140.2";
      sa[197] = "140.3";
      sa[198] = "140.4";
      sa[199] = "140.7";
      sa[200] = "140.9";
      sa[201] = "141";
      sa[202] = "141.1";
      sa[203] = "141.2";
      sa[204] = "141.4";
      sa[205] = "141.5";
      sa[206] = "141.6";
      sa[207] = "141.8";
      sa[208] = "141.9";
      sa[209] = "142";
      sa[210] = "142.1";
      sa[211] = "142.3";
      sa[212] = "142.4";
      sa[213] = "142.6";
      sa[214] = "142.7";
      sa[215] = "143";
      sa[216] = "143.1";
      sa[217] = "143.3";
      sa[218] = "143.4";
      sa[219] = "143.5";
      sa[220] = "143.7";
      sa[221] = "143.8";
      sa[222] = "143.9";
      sa[223] = "144.1";
      sa[224] = "144.2";
      sa[225] = "144.3";
      sa[226] = "144.4";
      sa[227] = "144.5";
      sa[228] = "145";
      sa[229] = "145.1";
      sa[230] = "145.2";
      sa[231] = "145.3";
      sa[232] = "145.4";
      sa[233] = "145.5";
      sa[234] = "145.7";
      sa[235] = "145.8";
      sa[236] = "145.9";
      sa[237] = "146";
      sa[238] = "146.2";
      sa[239] = "146.3";
      sa[240] = "146.4";
      sa[241] = "146.5";
      sa[242] = "146.6";
      sa[243] = "146.7";
      sa[244] = "146.8";
      sa[245] = "146.9";
      sa[246] = "147";
      sa[247] = "147.2";
      sa[248] = "147.3";
      sa[249] = "147.4";
      sa[250] = "147.6";
      sa[251] = "147.7";
      sa[252] = "147.8";
      sa[253] = "147.9";
      sa[254] = "148";
      sa[255] = "148.1";
      sa[256] = "148.2";
      sa[257] = "148.3";
      sa[258] = "148.5";
      sa[259] = "148.6";
      sa[260] = "148.7";
      sa[261] = "148.8";
      sa[262] = "148.9";
      sa[263] = "149.1";
      sa[264] = "149.2";
      sa[265] = "149.3";
      sa[266] = "149.4";
      sa[267] = "149.5";
      sa[268] = "149.6";
      sa[269] = "149.7";
      sa[270] = "149.8";
      sa[271] = "149.9";
      sa[272] = "150";
      sa[273] = "150.1";
      sa[274] = "150.2";
      sa[275] = "150.3";
      sa[276] = "150.5";
      sa[277] = "150.6";
      sa[278] = "150.7";
      sa[279] = "150.8";
      sa[280] = "150.9";
      sa[281] = "151";
      sa[282] = "151.2";
      sa[283] = "151.3";
      sa[284] = "151.4";
      sa[285] = "151.5";
      sa[286] = "151.7";
      sa[287] = "151.9";
      sa[288] = "152";
      sa[289] = "152.1";
      sa[290] = "152.2";
      sa[291] = "152.3";
      sa[292] = "152.4";
      sa[293] = "152.5";
      sa[294] = "152.6";
      sa[295] = "152.7";
      sa[296] = "152.8";
      sa[297] = "152.9";
      sa[298] = "153";
      sa[299] = "153.1";
      sa[300] = "153.2";
      sa[301] = "153.3";
      sa[302] = "153.6";
      sa[303] = "153.7";
      sa[304] = "153.8";
      sa[305] = "154";
      sa[306] = "154.2";
      sa[307] = "154.3";
      sa[308] = "154.4";
      sa[309] = "154.5";
      sa[310] = "154.6";
      sa[311] = "154.7";
      sa[312] = "154.8";
      sa[313] = "154.9";
      sa[314] = "155";
      sa[315] = "155.1";
      sa[316] = "155.2";
      sa[317] = "155.3";
      sa[318] = "155.4";
      sa[319] = "155.5";
      sa[320] = "155.6";
      sa[321] = "155.7";
      sa[322] = "155.8";
      sa[323] = "155.9";
      sa[324] = "156";
      sa[325] = "156.1";
      sa[326] = "156.2";
      sa[327] = "156.3";
      sa[328] = "156.4";
      sa[329] = "156.5";
      sa[330] = "156.7";
      sa[331] = "156.9";
      sa[332] = "157";
      sa[333] = "157.1";
      sa[334] = "157.2";
      sa[335] = "157.3";
      sa[336] = "157.5";
      sa[337] = "157.6";
      sa[338] = "157.8";
      sa[339] = "158";
      sa[340] = "158.1";
      sa[341] = "158.2";
      sa[342] = "158.4";
      sa[343] = "158.5";
      sa[344] = "158.6";
      sa[345] = "158.8";
      sa[346] = "158.9";
      sa[347] = "159";
      sa[348] = "159.1";
      sa[349] = "159.2";
      sa[350] = "159.3";
      sa[351] = "159.4";
      sa[352] = "159.5";
      sa[353] = "159.6";
      sa[354] = "159.7";
      sa[355] = "159.9";
      sa[356] = "160";
      sa[357] = "160.1";
      sa[358] = "160.2";
      sa[359] = "160.3";
      sa[360] = "160.4";
      sa[361] = "160.5";
      sa[362] = "160.6";
      sa[363] = "160.7";
      sa[364] = "160.8";
      sa[365] = "160.9";
      sa[366] = "161";
      sa[367] = "161.1";
      sa[368] = "161.3";
      sa[369] = "161.4";
      sa[370] = "161.5";
      sa[371] = "161.7";
      sa[372] = "161.8";
      sa[373] = "161.9";
      sa[374] = "162";
      sa[375] = "162.1";
      sa[376] = "162.3";
      sa[377] = "162.4";
      sa[378] = "162.5";
      sa[379] = "162.6";
      sa[380] = "162.7";
      sa[381] = "162.8";
      sa[382] = "162.9";
      sa[383] = "163";
      sa[384] = "163.1";
      sa[385] = "163.2";
      sa[386] = "163.3";
      sa[387] = "163.4";
      sa[388] = "163.5";
      sa[389] = "163.6";
      sa[390] = "163.7";
      sa[391] = "163.9";
      sa[392] = "164";
      sa[393] = "164.1";
      sa[394] = "164.2";
      sa[395] = "164.3";
      sa[396] = "164.4";
      sa[397] = "164.5";
      sa[398] = "164.6";
      sa[399] = "164.7";
      sa[400] = "164.8";
      sa[401] = "164.9";
      sa[402] = "165";
      sa[403] = "165.1";
      sa[404] = "165.2";
      sa[405] = "165.3";
      sa[406] = "165.4";
      sa[407] = "165.6";
      sa[408] = "165.7";
      sa[409] = "165.8";
      sa[410] = "165.9";
      sa[411] = "166";
      sa[412] = "166.2";
      sa[413] = "166.4";
      sa[414] = "166.5";
      sa[415] = "166.6";
      sa[416] = "166.7";
      sa[417] = "166.8";
      sa[418] = "166.9";
      sa[419] = "167";
      sa[420] = "167.1";
      sa[421] = "167.2";
      sa[422] = "167.3";
      sa[423] = "167.4";
      sa[424] = "167.5";
      sa[425] = "167.6";
      sa[426] = "167.7";
      sa[427] = "167.8";
      sa[428] = "167.9";
      sa[429] = "168";
      sa[430] = "168.1";
      sa[431] = "168.2";
      sa[432] = "168.3";
      sa[433] = "168.4";
      sa[434] = "168.5";
      sa[435] = "168.6";
      sa[436] = "168.7";
      sa[437] = "168.8";
      sa[438] = "169";
      sa[439] = "169.1";
      sa[440] = "169.2";
      sa[441] = "169.3";
      sa[442] = "169.4";
      sa[443] = "169.5";
      sa[444] = "169.6";
      sa[445] = "169.7";
      sa[446] = "169.8";
      sa[447] = "169.9";
      sa[448] = "170";
      sa[449] = "170.2";
      sa[450] = "170.4";
      sa[451] = "170.5";
      sa[452] = "170.6";
      sa[453] = "170.7";
      sa[454] = "170.8";
      sa[455] = "170.9";
      sa[456] = "171";
      sa[457] = "171.2";
      sa[458] = "171.3";
      sa[459] = "171.4";
      sa[460] = "171.5";
      sa[461] = "171.6";
      sa[462] = "171.7";
      sa[463] = "171.8";
      sa[464] = "171.9";
      sa[465] = "172";
      sa[466] = "172.1";
      sa[467] = "172.2";
      sa[468] = "172.3";
      sa[469] = "172.4";
      sa[470] = "172.6";
      sa[471] = "172.7";
      sa[472] = "172.8";
      sa[473] = "173";
      sa[474] = "173.1";
      sa[475] = "173.2";
      sa[476] = "173.3";
      sa[477] = "173.4";
      sa[478] = "173.5";
      sa[479] = "173.6";
      sa[480] = "173.7";
      sa[481] = "173.8";
      sa[482] = "174";
      sa[483] = "174.3";
      sa[484] = "174.4";
      sa[485] = "174.5";
      sa[486] = "174.6";
      sa[487] = "174.8";
      sa[488] = "174.9";
      sa[489] = "175";
      sa[490] = "175.1";
      sa[491] = "175.2";
      sa[492] = "175.3";
      sa[493] = "175.4";
      sa[494] = "175.6";
      sa[495] = "175.7";
      sa[496] = "175.8";
      sa[497] = "175.9";
      sa[498] = "176";
      sa[499] = "176.1";
      sa[500] = "176.2";
      sa[501] = "176.3";
      sa[502] = "176.4";
      sa[503] = "176.5";
      sa[504] = "176.6";
      sa[505] = "176.7";
      sa[506] = "176.9";
      sa[507] = "177";
      sa[508] = "177.1";
      sa[509] = "177.2";
      sa[510] = "177.3";
      sa[511] = "177.4";
      sa[512] = "177.5";
      sa[513] = "177.6";
      sa[514] = "177.8";
      sa[515] = "177.9";
      sa[516] = "178";
      sa[517] = "178.2";
      sa[518] = "178.3";
      sa[519] = "178.4";
      sa[520] = "178.5";
      sa[521] = "178.6";
      sa[522] = "178.7";
      sa[523] = "178.8";
      sa[524] = "178.9";
      sa[525] = "179";
      sa[526] = "179.1";
      sa[527] = "179.2";
      sa[528] = "179.3";
      sa[529] = "179.4";
      sa[530] = "179.5";
      sa[531] = "179.6";
      sa[532] = "179.7";
      sa[533] = "179.8";
      sa[534] = "179.9";
      sa[535] = "180";
      sa[536] = "180.2";
      sa[537] = "180.3";
      sa[538] = "180.4";
      sa[539] = "180.5";
      sa[540] = "180.6";
      sa[541] = "180.7";
      sa[542] = "180.8";
      sa[543] = "181";
      sa[544] = "181.1";
      sa[545] = "181.2";
      sa[546] = "181.4";
      sa[547] = "181.5";
      sa[548] = "181.6";
      sa[549] = "181.7";
      sa[550] = "181.8";
      sa[551] = "182";
      sa[552] = "182.1";
      sa[553] = "182.2";
      sa[554] = "182.4";
      sa[555] = "182.5";
      sa[556] = "182.6";
      sa[557] = "182.7";
      sa[558] = "182.9";
      sa[559] = "183";
      sa[560] = "183.1";
      sa[561] = "183.2";
      sa[562] = "183.3";
      sa[563] = "183.4";
      sa[564] = "183.5";
      sa[565] = "183.6";
      sa[566] = "183.7";
      sa[567] = "183.8";
      sa[568] = "183.9";
      sa[569] = "184";
      sa[570] = "184.1";
      sa[571] = "184.2";
      sa[572] = "184.3";
      sa[573] = "184.4";
      sa[574] = "184.5";
      sa[575] = "184.6";
      sa[576] = "184.7";
      sa[577] = "184.8";
      sa[578] = "184.9";
      sa[579] = "185";
      sa[580] = "185.1";
      sa[581] = "185.3";
      sa[582] = "185.4";
      sa[583] = "185.5";
      sa[584] = "185.6";
      sa[585] = "185.7";
      sa[586] = "185.8";
      sa[587] = "185.9";
      sa[588] = "186";
      sa[589] = "186.2";
      sa[590] = "186.3";
      sa[591] = "186.4";
      sa[592] = "186.5";
      sa[593] = "186.6";
      sa[594] = "186.7";
      sa[595] = "186.8";
      sa[596] = "186.9";
      sa[597] = "187";
      sa[598] = "187.1";
      sa[599] = "187.2";
      sa[600] = "187.3";
      sa[601] = "187.4";
      sa[602] = "187.5";
      sa[603] = "187.6";
      sa[604] = "187.7";
      sa[605] = "187.8";
      sa[606] = "187.9";
      sa[607] = "188";
      sa[608] = "188.2";
      sa[609] = "188.3";
      sa[610] = "188.4";
      sa[611] = "188.5";
      sa[612] = "188.6";
      sa[613] = "188.7";
      sa[614] = "188.8";
      sa[615] = "188.9";
      sa[616] = "189";
      sa[617] = "189.1";
      sa[618] = "189.2";
      sa[619] = "189.3";
      sa[620] = "189.4";
      sa[621] = "189.5";
      sa[622] = "189.6";
      sa[623] = "189.7";
      sa[624] = "189.8";
      sa[625] = "189.9";
      sa[626] = "190";
      sa[627] = "190.2";
      sa[628] = "190.3";
      sa[629] = "190.4";
      sa[630] = "190.6";
      sa[631] = "190.7";
      sa[632] = "190.8";
      sa[633] = "190.9";
      sa[634] = "191";
      sa[635] = "191.1";
      sa[636] = "191.3";
      sa[637] = "191.4";
      sa[638] = "191.6";
      sa[639] = "191.7";
      sa[640] = "191.8";
      sa[641] = "191.9";
      sa[642] = "192";
      sa[643] = "192.1";
      sa[644] = "192.2";
      sa[645] = "192.3";
      sa[646] = "192.4";
      sa[647] = "192.6";
      sa[648] = "192.7";
      sa[649] = "192.8";
      sa[650] = "192.9";
      sa[651] = "193";
      sa[652] = "193.1";
      sa[653] = "193.2";
      sa[654] = "193.3";
      sa[655] = "193.4";
      sa[656] = "193.5";
      sa[657] = "193.6";
      sa[658] = "193.7";
      sa[659] = "193.8";
      sa[660] = "193.9";
      sa[661] = "194";
      sa[662] = "194.1";
      sa[663] = "194.4";
      sa[664] = "194.5";
      sa[665] = "194.6";
      sa[666] = "194.7";
      sa[667] = "194.8";
      sa[668] = "194.9";
      sa[669] = "195";
      sa[670] = "195.1";
      sa[671] = "195.2";
      sa[672] = "195.3";
      sa[673] = "195.4";
      sa[674] = "195.5";
      sa[675] = "195.6";
      sa[676] = "195.7";
      sa[677] = "195.8";
      sa[678] = "195.9";
      sa[679] = "196";
      sa[680] = "196.1";
      sa[681] = "196.2";
      sa[682] = "196.3";
      sa[683] = "196.4";
      sa[684] = "196.5";
      sa[685] = "196.6";
      sa[686] = "196.7";
      sa[687] = "196.8";
      sa[688] = "196.9";
      sa[689] = "197";
      sa[690] = "197.1";
      sa[691] = "197.2";
      sa[692] = "197.3";
      sa[693] = "197.4";
      sa[694] = "197.5";
      sa[695] = "197.6";
      sa[696] = "197.7";
      sa[697] = "197.8";
      sa[698] = "197.9";
      sa[699] = "198";
      sa[700] = "198.1";
      sa[701] = "198.2";
      sa[702] = "198.3";
      sa[703] = "198.4";
      sa[704] = "198.5";
      sa[705] = "198.6";
      sa[706] = "198.7";
      sa[707] = "198.8";
      sa[708] = "198.9";
      sa[709] = "199";
      sa[710] = "199.2";
      sa[711] = "199.4";
      sa[712] = "199.5";
      sa[713] = "199.6";
      sa[714] = "199.7";
      sa[715] = "199.8";
      sa[716] = "199.9";
      sa[717] = "200";
      sa[718] = "200.1";
      sa[719] = "200.2";
      sa[720] = "200.3";
      sa[721] = "200.5";
      sa[722] = "200.6";
      sa[723] = "200.7";
      sa[724] = "200.8";
      sa[725] = "200.9";
      sa[726] = "201";
      sa[727] = "201.1";
      sa[728] = "201.2";
      sa[729] = "201.3";
      sa[730] = "201.4";
      sa[731] = "201.5";
      sa[732] = "201.6";
      sa[733] = "201.8";
      sa[734] = "202.1";
      sa[735] = "202.2";
      sa[736] = "202.3";
      sa[737] = "202.4";
      sa[738] = "202.5";
      sa[739] = "202.6";
      sa[740] = "202.7";
      sa[741] = "202.8";
      sa[742] = "202.9";
      sa[743] = "203";
      sa[744] = "203.1";
      sa[745] = "203.2";
      sa[746] = "203.4";
      sa[747] = "203.5";
      sa[748] = "203.6";
      sa[749] = "203.7";
      sa[750] = "203.8";
      sa[751] = "203.9";
      sa[752] = "204";
      sa[753] = "204.1";
      sa[754] = "204.2";
      sa[755] = "204.3";
      sa[756] = "204.5";
      sa[757] = "204.6";
      sa[758] = "204.7";
      sa[759] = "204.8";
      sa[760] = "204.9";
      sa[761] = "205";
      sa[762] = "205.1";
      sa[763] = "205.2";
      sa[764] = "205.3";
      sa[765] = "205.4";
      sa[766] = "205.5";
      sa[767] = "205.6";
      sa[768] = "205.7";
      sa[769] = "205.9";
      sa[770] = "206";
      sa[771] = "206.2";
      sa[772] = "206.3";
      sa[773] = "206.4";
      sa[774] = "206.5";
      sa[775] = "206.6";
      sa[776] = "206.7";
      sa[777] = "206.8";
      sa[778] = "206.9";
      sa[779] = "207";
      sa[780] = "207.1";
      sa[781] = "207.2";
      sa[782] = "207.3";
      sa[783] = "207.4";
      sa[784] = "207.5";
      sa[785] = "207.6";
      sa[786] = "207.7";
      sa[787] = "207.8";
      sa[788] = "207.9";
      sa[789] = "208";
      sa[790] = "208.1";
      sa[791] = "208.2";
      sa[792] = "208.3";
      sa[793] = "208.4";
      sa[794] = "208.5";
      sa[795] = "208.6";
      sa[796] = "208.7";
      sa[797] = "208.8";
      sa[798] = "208.9";
      sa[799] = "209";
      sa[800] = "209.1";
      sa[801] = "209.2";
      sa[802] = "209.3";
      sa[803] = "209.4";
      sa[804] = "209.5";
      sa[805] = "209.6";
      sa[806] = "209.7";
      sa[807] = "209.8";
      sa[808] = "209.9";
      sa[809] = "210";
      sa[810] = "210.1";
      sa[811] = "210.2";
      sa[812] = "210.3";
      sa[813] = "210.4";
      sa[814] = "210.5";
      sa[815] = "210.6";
      sa[816] = "210.7";
      sa[817] = "210.8";
      sa[818] = "210.9";
      sa[819] = "211";
      sa[820] = "211.1";
      sa[821] = "211.2";
      sa[822] = "211.3";
      sa[823] = "211.4";
      sa[824] = "211.5";
      sa[825] = "211.6";
      sa[826] = "211.7";
      sa[827] = "211.8";
      sa[828] = "211.9";
      sa[829] = "212";
      sa[830] = "212.1";
      sa[831] = "212.2";
      sa[832] = "212.3";
      sa[833] = "212.5";
      sa[834] = "212.7";
      sa[835] = "212.8";
      sa[836] = "212.9";
      sa[837] = "213";
      sa[838] = "213.1";
      sa[839] = "213.2";
      sa[840] = "213.3";
      sa[841] = "213.4";
      sa[842] = "213.6";
      sa[843] = "213.7";
      sa[844] = "213.8";
      sa[845] = "213.9";
      sa[846] = "214";
      sa[847] = "214.1";
      sa[848] = "214.2";
      sa[849] = "214.3";
      sa[850] = "214.4";
      sa[851] = "214.5";
      sa[852] = "214.6";
      sa[853] = "214.7";
      sa[854] = "214.8";
      sa[855] = "215";
      sa[856] = "215.1";
      sa[857] = "215.2";
      sa[858] = "215.3";
      sa[859] = "215.4";
      sa[860] = "215.5";
      sa[861] = "215.6";
      sa[862] = "215.7";
      sa[863] = "215.8";
      sa[864] = "215.9";
      sa[865] = "216";
      sa[866] = "216.1";
      sa[867] = "216.2";
      sa[868] = "216.3";
      sa[869] = "216.4";
      sa[870] = "216.5";
      sa[871] = "216.6";
      sa[872] = "216.7";
      sa[873] = "216.8";
      sa[874] = "216.9";
      sa[875] = "217";
      sa[876] = "217.1";
      sa[877] = "217.2";
      sa[878] = "217.3";
      sa[879] = "217.4";
      sa[880] = "217.5";
      sa[881] = "217.6";
      sa[882] = "217.7";
      sa[883] = "217.9";
      sa[884] = "218.1";
      sa[885] = "218.2";
      sa[886] = "218.4";
      sa[887] = "218.5";
      sa[888] = "218.6";
      sa[889] = "218.7";
      sa[890] = "218.8";
      sa[891] = "218.9";
      sa[892] = "219";
      sa[893] = "219.1";
      sa[894] = "219.2";
      sa[895] = "219.3";
      sa[896] = "219.4";
      sa[897] = "219.5";
      sa[898] = "219.6";
      sa[899] = "219.7";
      sa[900] = "219.8";
      sa[901] = "219.9";
      sa[902] = "220";
      sa[903] = "220.1";
      sa[904] = "220.2";
      sa[905] = "220.3";
      sa[906] = "220.4";
      sa[907] = "220.5";
      sa[908] = "220.6";
      sa[909] = "220.7";
      sa[910] = "220.8";
      sa[911] = "220.9";
      sa[912] = "221";
      sa[913] = "221.1";
      sa[914] = "221.2";
      sa[915] = "221.3";
      sa[916] = "221.4";
      sa[917] = "221.5";
      sa[918] = "221.6";
      sa[919] = "221.8";
      sa[920] = "221.9";
      sa[921] = "222";
      sa[922] = "222.1";
      sa[923] = "222.2";
      sa[924] = "222.3";
      sa[925] = "222.4";
      sa[926] = "222.5";
      sa[927] = "222.6";
      sa[928] = "222.7";
      sa[929] = "222.8";
      sa[930] = "222.9";
      sa[931] = "223";
      sa[932] = "223.1";
      sa[933] = "223.2";
      sa[934] = "223.3";
      sa[935] = "223.4";
      sa[936] = "223.5";
      sa[937] = "223.6";
      sa[938] = "223.7";
      sa[939] = "223.8";
      sa[940] = "223.9";
      sa[941] = "224";
      sa[942] = "224.1";
      sa[943] = "224.2";
      sa[944] = "224.3";
      sa[945] = "224.4";
      sa[946] = "224.5";
      sa[947] = "224.6";
      sa[948] = "224.7";
      sa[949] = "224.8";
      sa[950] = "224.9";
      sa[951] = "225";
      sa[952] = "225.1";
      sa[953] = "225.2";
      sa[954] = "225.3";
      sa[955] = "225.4";
      sa[956] = "225.5";
      sa[957] = "225.6";
      sa[958] = "225.7";
      sa[959] = "225.8";
      sa[960] = "225.9";
      sa[961] = "226.1";
      sa[962] = "226.2";
      sa[963] = "226.4";
      sa[964] = "226.6";
      sa[965] = "226.7";
      sa[966] = "226.8";
      sa[967] = "227";
      sa[968] = "227.1";
      sa[969] = "227.2";
      sa[970] = "227.3";
      sa[971] = "227.4";
      sa[972] = "227.8";
      sa[973] = "227.9";
      sa[974] = "228";
      sa[975] = "228.1";
      sa[976] = "228.3";
      sa[977] = "228.4";
      sa[978] = "228.5";
      sa[979] = "228.6";
      sa[980] = "228.7";
      sa[981] = "228.8";
      sa[982] = "228.9";
      sa[983] = "229";
      sa[984] = "229.2";
      sa[985] = "229.4";
      sa[986] = "229.6";
      sa[987] = "229.7";
      sa[988] = "229.9";
      sa[989] = "230";
      sa[990] = "230.1";
      sa[991] = "230.2";
      sa[992] = "230.3";
      sa[993] = "230.4";
      sa[994] = "230.5";
      sa[995] = "230.6";
      sa[996] = "230.7";
      sa[997] = "230.9";
      sa[998] = "231";
      sa[999] = "231.1";
      sa[1000] = "231.2";
      sa[1001] = "231.3";
      sa[1002] = "231.4";
      sa[1003] = "231.5";
      sa[1004] = "231.6";
      sa[1005] = "231.7";
      sa[1006] = "231.8";
      sa[1007] = "231.9";
      sa[1008] = "232.1";
      sa[1009] = "232.2";
      sa[1010] = "232.3";
      sa[1011] = "232.4";
      sa[1012] = "232.5";
      sa[1013] = "232.6";
      sa[1014] = "232.7";
      sa[1015] = "232.8";
      sa[1016] = "232.9";
      sa[1017] = "233";
      sa[1018] = "233.2";
      sa[1019] = "233.3";
      sa[1020] = "233.4";
      sa[1021] = "233.5";
      sa[1022] = "233.6";
      sa[1023] = "233.7";
      sa[1024] = "233.8";
      sa[1025] = "233.9";
      sa[1026] = "234";
      sa[1027] = "234.1";
      sa[1028] = "234.2";
      sa[1029] = "234.3";
      sa[1030] = "234.4";
      sa[1031] = "234.5";
      sa[1032] = "234.7";
      sa[1033] = "234.9";
      sa[1034] = "235";
      sa[1035] = "235.1";
      sa[1036] = "235.2";
      sa[1037] = "235.3";
      sa[1038] = "235.4";
      sa[1039] = "235.5";
      sa[1040] = "235.6";
      sa[1041] = "235.8";
      sa[1042] = "235.9";
      sa[1043] = "236";
      sa[1044] = "236.1";
      sa[1045] = "236.2";
      sa[1046] = "236.3";
      sa[1047] = "236.4";
      sa[1048] = "236.5";
      sa[1049] = "236.6";
      sa[1050] = "236.7";
      sa[1051] = "236.8";
      sa[1052] = "237";
      sa[1053] = "237.1";
      sa[1054] = "237.2";
      sa[1055] = "237.3";
      sa[1056] = "237.4";
      sa[1057] = "237.6";
      sa[1058] = "237.7";
      sa[1059] = "237.9";
      sa[1060] = "238";
      sa[1061] = "238.1";
      sa[1062] = "238.2";
      sa[1063] = "238.3";
      sa[1064] = "238.5";
      sa[1065] = "238.6";
      sa[1066] = "238.7";
      sa[1067] = "238.8";
      sa[1068] = "239.1";
      sa[1069] = "239.3";
      sa[1070] = "239.5";
      sa[1071] = "239.6";
      sa[1072] = "239.7";
      sa[1073] = "239.8";
      sa[1074] = "240";
      sa[1075] = "240.1";
      sa[1076] = "240.2";
      sa[1077] = "240.3";
      sa[1078] = "240.4";
      sa[1079] = "240.5";
      sa[1080] = "240.6";
      sa[1081] = "240.7";
      sa[1082] = "240.8";
      sa[1083] = "240.9";
      sa[1084] = "241";
      sa[1085] = "241.1";
      sa[1086] = "241.2";
      sa[1087] = "241.3";
      sa[1088] = "241.4";
      sa[1089] = "241.5";
      sa[1090] = "241.6";
      sa[1091] = "241.8";
      sa[1092] = "241.9";
      sa[1093] = "242";
      sa[1094] = "242.1";
      sa[1095] = "242.2";
      sa[1096] = "242.3";
      sa[1097] = "242.4";
      sa[1098] = "242.5";
      sa[1099] = "242.6";
      sa[1100] = "242.7";
      sa[1101] = "242.8";
      sa[1102] = "242.9";
      sa[1103] = "243";
      sa[1104] = "243.1";
      sa[1105] = "243.2";
      sa[1106] = "243.3";
      sa[1107] = "243.5";
      sa[1108] = "243.7";
      sa[1109] = "243.8";
      sa[1110] = "243.9";
      sa[1111] = "244";
      sa[1112] = "244.1";
      sa[1113] = "244.2";
      sa[1114] = "244.3";
      sa[1115] = "244.4";
      sa[1116] = "244.5";
      sa[1117] = "244.7";
      sa[1118] = "244.8";
      sa[1119] = "244.9";
      sa[1120] = "245";
      sa[1121] = "245.1";
      sa[1122] = "245.2";
      sa[1123] = "245.3";
      sa[1124] = "245.4";
      sa[1125] = "245.6";
      sa[1126] = "245.8";
      sa[1127] = "245.9";
      sa[1128] = "246";
      sa[1129] = "246.1";
      sa[1130] = "246.2";
      sa[1131] = "246.3";
      sa[1132] = "246.4";
      sa[1133] = "246.5";
      sa[1134] = "246.6";
      sa[1135] = "246.7";
      sa[1136] = "246.8";
      sa[1137] = "246.9";
      sa[1138] = "247";
      sa[1139] = "247.1";
      sa[1140] = "247.2";
      sa[1141] = "247.3";
      sa[1142] = "247.5";
      sa[1143] = "247.6";
      sa[1144] = "247.7";
      sa[1145] = "247.8";
      sa[1146] = "247.9";
      sa[1147] = "248";
      sa[1148] = "248.1";
      sa[1149] = "248.2";
      sa[1150] = "248.4";
      sa[1151] = "248.5";
      sa[1152] = "248.6";
      sa[1153] = "248.7";
      sa[1154] = "248.8";
      sa[1155] = "248.9";
      sa[1156] = "249";
      sa[1157] = "249.1";
      sa[1158] = "249.2";
      sa[1159] = "249.3";
      sa[1160] = "249.4";
      sa[1161] = "249.5";
      sa[1162] = "249.6";
      sa[1163] = "249.7";
      sa[1164] = "249.8";
      sa[1165] = "249.9";
      sa[1166] = "250";
      sa[1167] = "250.2";
      sa[1168] = "250.3";
      sa[1169] = "250.4";
      sa[1170] = "250.5";
      sa[1171] = "250.7";
      sa[1172] = "250.8";
      sa[1173] = "251";
      sa[1174] = "251.1";
      sa[1175] = "251.2";
      sa[1176] = "251.3";
      sa[1177] = "251.5";
      sa[1178] = "251.6";
      sa[1179] = "251.7";
      sa[1180] = "251.8";
      sa[1181] = "252";
      sa[1182] = "252.2";
      sa[1183] = "252.3";
      sa[1184] = "252.4";
      sa[1185] = "252.5";
      sa[1186] = "252.7";
      sa[1187] = "252.8";
      sa[1188] = "253";
      sa[1189] = "253.1";
      sa[1190] = "253.2";
      sa[1191] = "253.4";
      sa[1192] = "253.5";
      sa[1193] = "253.6";
      sa[1194] = "253.8";
      sa[1195] = "253.9";
      sa[1196] = "254";
      sa[1197] = "254.1";
      sa[1198] = "254.2";
      sa[1199] = "254.3";
      sa[1200] = "254.5";
      sa[1201] = "254.7";
      sa[1202] = "254.9";
      sa[1203] = "255.1";
      sa[1204] = "255.3";
      sa[1205] = "255.5";
      sa[1206] = "255.6";
      sa[1207] = "255.7";
      sa[1208] = "255.8";
      sa[1209] = "255.9";
      sa[1210] = "256";
      sa[1211] = "256.1";
      sa[1212] = "256.2";
      sa[1213] = "256.3";
      sa[1214] = "256.4";
      sa[1215] = "256.5";
      sa[1216] = "256.6";
      sa[1217] = "256.7";
      sa[1218] = "256.8";
      sa[1219] = "256.9";
      sa[1220] = "257.1";
      sa[1221] = "257.2";
      sa[1222] = "257.4";
      sa[1223] = "257.5";
      sa[1224] = "257.7";
      sa[1225] = "257.9";
      sa[1226] = "258";
      sa[1227] = "258.1";
      sa[1228] = "258.2";
      sa[1229] = "258.4";
      sa[1230] = "258.6";
      sa[1231] = "258.7";
      sa[1232] = "258.8";
      sa[1233] = "258.9";
      sa[1234] = "259";
      sa[1235] = "259.2";
      sa[1236] = "259.3";
      sa[1237] = "259.4";
      sa[1238] = "259.6";
      sa[1239] = "259.7";
      sa[1240] = "259.8";
      sa[1241] = "259.9";
      sa[1242] = "260";
      sa[1243] = "260.1";
      sa[1244] = "260.2";
      sa[1245] = "260.3";
      sa[1246] = "260.4";
      sa[1247] = "260.5";
      sa[1248] = "260.6";
      sa[1249] = "260.7";
      sa[1250] = "260.9";
      sa[1251] = "261";
      sa[1252] = "261.1";
      sa[1253] = "261.3";
      sa[1254] = "261.5";
      sa[1255] = "261.6";
      sa[1256] = "261.7";
      sa[1257] = "261.9";
      sa[1258] = "262";
      sa[1259] = "262.1";
      sa[1260] = "262.2";
      sa[1261] = "262.3";
      sa[1262] = "262.4";
      sa[1263] = "262.6";
      sa[1264] = "262.8";
      sa[1265] = "263";
      sa[1266] = "263.2";
      sa[1267] = "263.3";
      sa[1268] = "263.4";
      sa[1269] = "263.5";
      sa[1270] = "263.6";
      sa[1271] = "263.7";
      sa[1272] = "264";
      sa[1273] = "264.1";
      sa[1274] = "264.2";
      sa[1275] = "264.3";
      sa[1276] = "264.4";
      sa[1277] = "264.5";
      sa[1278] = "264.6";
      sa[1279] = "264.7";
      sa[1280] = "264.8";
      sa[1281] = "264.9";
      sa[1282] = "265";
      sa[1283] = "265.1";
      sa[1284] = "265.3";
      sa[1285] = "265.5";
      sa[1286] = "265.7";
      sa[1287] = "265.8";
      sa[1288] = "266.2";
      sa[1289] = "266.3";
      sa[1290] = "266.4";
      sa[1291] = "266.5";
      sa[1292] = "266.6";
      sa[1293] = "266.9";
      sa[1294] = "267";
      sa[1295] = "267.1";
      sa[1296] = "267.3";
      sa[1297] = "267.4";
      sa[1298] = "267.5";
      sa[1299] = "267.6";
      sa[1300] = "267.8";
      sa[1301] = "268.1";
      sa[1302] = "268.2";
      sa[1303] = "268.3";
      sa[1304] = "268.5";
      sa[1305] = "268.6";
      sa[1306] = "268.8";
      sa[1307] = "269.1";
      sa[1308] = "269.3";
      sa[1309] = "269.4";
      sa[1310] = "269.5";
      sa[1311] = "269.7";
      sa[1312] = "269.8";
      sa[1313] = "269.9";
      sa[1314] = "270.2";
      sa[1315] = "270.4";
      sa[1316] = "270.5";
      sa[1317] = "270.6";
      sa[1318] = "270.7";
      sa[1319] = "270.8";
      sa[1320] = "270.9";
      sa[1321] = "271";
      sa[1322] = "271.2";
      sa[1323] = "271.4";
      sa[1324] = "271.5";
      sa[1325] = "271.7";
      sa[1326] = "271.8";
      sa[1327] = "272.3";
      sa[1328] = "272.5";
      sa[1329] = "272.7";
      sa[1330] = "272.8";
      sa[1331] = "272.9";
      sa[1332] = "273";
      sa[1333] = "273.2";
      sa[1334] = "273.3";
      sa[1335] = "273.5";
      sa[1336] = "273.6";
      sa[1337] = "273.7";
      sa[1338] = "273.8";
      sa[1339] = "273.9";
      sa[1340] = "274";
      sa[1341] = "274.3";
      sa[1342] = "274.4";
      sa[1343] = "274.5";
      sa[1344] = "274.6";
      sa[1345] = "274.7";
      sa[1346] = "274.8";
      sa[1347] = "274.9";
      sa[1348] = "275";
      sa[1349] = "275.4";
      sa[1350] = "275.5";
      sa[1351] = "275.6";
      sa[1352] = "275.9";
      sa[1353] = "276";
      sa[1354] = "276.1";
      sa[1355] = "276.2";
      sa[1356] = "276.3";
      sa[1357] = "276.4";
      sa[1358] = "276.5";
      sa[1359] = "276.8";
      sa[1360] = "277";
      sa[1361] = "277.1";
      sa[1362] = "277.4";
      sa[1363] = "277.5";
      sa[1364] = "277.9";
      sa[1365] = "278";
      sa[1366] = "278.2";
      sa[1367] = "278.3";
      sa[1368] = "278.5";
      sa[1369] = "278.6";
      sa[1370] = "278.7";
      sa[1371] = "279";
      sa[1372] = "279.3";
      sa[1373] = "279.5";
      sa[1374] = "279.6";
      sa[1375] = "280.1";
      sa[1376] = "280.3";
      sa[1377] = "280.4";
      sa[1378] = "280.8";
      sa[1379] = "280.9";
      sa[1380] = "281.1";
      sa[1381] = "281.2";
      sa[1382] = "281.3";
      sa[1383] = "281.7";
      sa[1384] = "282.2";
      sa[1385] = "282.6";
      sa[1386] = "282.8";
      sa[1387] = "282.9";
      sa[1388] = "283.1";
      sa[1389] = "283.2";
      sa[1390] = "283.3";
      sa[1391] = "283.4";
      sa[1392] = "284.3";
      sa[1393] = "284.5";
      sa[1394] = "284.7";
      sa[1395] = "285.1";
      sa[1396] = "285.2";
      sa[1397] = "285.6";
      sa[1398] = "285.8";
      sa[1399] = "285.9";
      sa[1400] = "286";
      sa[1401] = "286.1";
      sa[1402] = "286.2";
      sa[1403] = "286.3";
      sa[1404] = "286.7";
      sa[1405] = "287.3";
      sa[1406] = "287.4";
      sa[1407] = "287.6";
      sa[1408] = "287.7";
      sa[1409] = "287.9";
      sa[1410] = "288";
      sa[1411] = "288.4";
      sa[1412] = "288.7";
      sa[1413] = "289.2";
      sa[1414] = "289.3";
      sa[1415] = "289.4";
      sa[1416] = "289.5";
      sa[1417] = "289.6";
      sa[1418] = "289.7";
      sa[1419] = "289.8";
      sa[1420] = "289.9";
      sa[1421] = "290";
      sa[1422] = "290.3";
      sa[1423] = "290.9";
      sa[1424] = "291.2";
      sa[1425] = "291.3";
      sa[1426] = "291.7";
      sa[1427] = "292";
      sa[1428] = "292.1";
      sa[1429] = "292.3";
      sa[1430] = "292.4";
      sa[1431] = "292.5";
      sa[1432] = "292.6";
      sa[1433] = "292.7";
      sa[1434] = "292.8";
      sa[1435] = "293.1";
      sa[1436] = "293.6";
      sa[1437] = "293.8";
      sa[1438] = "293.9";
      sa[1439] = "294";
      sa[1440] = "294.3";
      sa[1441] = "294.6";
      sa[1442] = "295.3";
      sa[1443] = "295.7";
      sa[1444] = "295.9";
      sa[1445] = "296.5";
      sa[1446] = "296.8";
      sa[1447] = "297.8";
      sa[1448] = "298";
      sa[1449] = "298.5";
      sa[1450] = "298.6";
      sa[1451] = "299.1";
      sa[1452] = "299.8";
      sa[1453] = "299.9";
      sa[1454] = "300.5";
      sa[1455] = "300.9";
      sa[1456] = "301";
      sa[1457] = "301.3";
      sa[1458] = "301.5";
      sa[1459] = "301.7";
      sa[1460] = "302.6";
      sa[1461] = "303.2";
      sa[1462] = "303.3";
      sa[1463] = "303.4";
      sa[1464] = "303.5";
      sa[1465] = "303.7";
      sa[1466] = "303.8";
      sa[1467] = "304.4";
      sa[1468] = "304.6";
      sa[1469] = "304.9";
      sa[1470] = "305";
      sa[1471] = "305.5";
      sa[1472] = "305.8";
      sa[1473] = "306.2";
      sa[1474] = "306.3";
      sa[1475] = "306.6";
      sa[1476] = "307.2";
      sa[1477] = "308.7";
      sa[1478] = "309.2";
      sa[1479] = "31.2";
      sa[1480] = "310";
      sa[1481] = "310.6";
      sa[1482] = "312.2";
      sa[1483] = "312.5";
      sa[1484] = "312.6";
      sa[1485] = "312.8";
      sa[1486] = "312.9";
      sa[1487] = "313.2";
      sa[1488] = "313.4";
      sa[1489] = "313.7";
      sa[1490] = "314.3";
      sa[1491] = "314.4";
      sa[1492] = "314.9";
      sa[1493] = "315.3";
      sa[1494] = "315.4";
      sa[1495] = "316.4";
      sa[1496] = "317";
      sa[1497] = "317.2";
      sa[1498] = "317.5";
      sa[1499] = "317.8";
      sa[1500] = "318.7";
      sa[1501] = "318.8";
      sa[1502] = "319";
      sa[1503] = "319.3";
      sa[1504] = "320.5";
      sa[1505] = "320.9";
      sa[1506] = "322.2";
      sa[1507] = "322.3";
      sa[1508] = "322.7";
      sa[1509] = "323.2";
      sa[1510] = "324.7";
      sa[1511] = "324.8";
      sa[1512] = "327";
      sa[1513] = "327.1";
      sa[1514] = "328.2";
      sa[1515] = "328.7";
      sa[1516] = "329.3";
      sa[1517] = "329.8";
      sa[1518] = "330.6";
      sa[1519] = "332.1";
      sa[1520] = "332.8";
      sa[1521] = "335";
      sa[1522] = "335.7";
      sa[1523] = "336";
      sa[1524] = "337.1";
      sa[1525] = "339.9";
      sa[1526] = "341.3";
      sa[1527] = "347.3";
      sa[1528] = "348.5";
      sa[1529] = "350.5";
      sa[1530] = "350.9";
      sa[1531] = "351.6";
      sa[1532] = "354.2";
      sa[1533] = "361.8";
      sa[1534] = "363.7";
      sa[1535] = "42.2";
      sa[1536] = "42.5";
      sa[1537] = "43.9";
      sa[1538] = "48.1";
      sa[1539] = "49.2";
      sa[1540] = "52.9";
      sa[1541] = "56";
      sa[1542] = "58.6";
      sa[1543] = "58.9";
      sa[1544] = "60";
      sa[1545] = "60.8";
      sa[1546] = "61.9";
      sa[1547] = "64.3";
      sa[1548] = "65.2";
      sa[1549] = "66";
      sa[1550] = "66.5";
      sa[1551] = "67";
      sa[1552] = "67.5";
      sa[1553] = "69.2";
      sa[1554] = "70.9";
      sa[1555] = "71";
      sa[1556] = "72.9";
      sa[1557] = "73.2";
      sa[1558] = "74.6";
      sa[1559] = "75.3";
      sa[1560] = "75.9";
      sa[1561] = "76.4";
      sa[1562] = "77.1";
      sa[1563] = "77.9";
      sa[1564] = "78.3";
      sa[1565] = "78.9";
      sa[1566] = "79.3";
      sa[1567] = "80";
      sa[1568] = "80.6";
      sa[1569] = "80.8";
      sa[1570] = "81";
      sa[1571] = "81.9";
      sa[1572] = "82.2";
      sa[1573] = "83.4";
      sa[1574] = "83.9";
      sa[1575] = "85";
      sa[1576] = "86.8";
      sa[1577] = "87.6";
      sa[1578] = "87.8";
      sa[1579] = "88.1";
      sa[1580] = "88.3";
      sa[1581] = "88.6";
      sa[1582] = "88.7";
      sa[1583] = "89.1";
      sa[1584] = "89.3";
      sa[1585] = "89.7";
      sa[1586] = "89.8";
      sa[1587] = "90";
      sa[1588] = "90.2";
      sa[1589] = "90.5";
      sa[1590] = "90.7";
      sa[1591] = "91.2";
      sa[1592] = "91.7";
      sa[1593] = "92";
      sa[1594] = "92.3";
      sa[1595] = "93.4";
      sa[1596] = "93.7";
      sa[1597] = "94.4";
      sa[1598] = "95.1";
      sa[1599] = "95.6";
      sa[1600] = "96.6";
      sa[1601] = "97.6";
      sa[1602] = "97.7";
      sa[1603] = "98.3";
      sa[1604] = "99.1";
      sa[1605] = "99.5";
    }
  }
}
// The class representing column eve_calls
class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_6 {
  public static final String[] VALUES = new String[123];
  static {
    GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_6_0.fill(VALUES);
  }
  static final class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_6_0 {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "100";
      sa[2] = "101";
      sa[3] = "102";
      sa[4] = "103";
      sa[5] = "104";
      sa[6] = "105";
      sa[7] = "106";
      sa[8] = "107";
      sa[9] = "108";
      sa[10] = "109";
      sa[11] = "110";
      sa[12] = "111";
      sa[13] = "112";
      sa[14] = "113";
      sa[15] = "114";
      sa[16] = "115";
      sa[17] = "116";
      sa[18] = "117";
      sa[19] = "118";
      sa[20] = "119";
      sa[21] = "12";
      sa[22] = "120";
      sa[23] = "121";
      sa[24] = "122";
      sa[25] = "123";
      sa[26] = "124";
      sa[27] = "125";
      sa[28] = "126";
      sa[29] = "127";
      sa[30] = "128";
      sa[31] = "129";
      sa[32] = "130";
      sa[33] = "131";
      sa[34] = "132";
      sa[35] = "133";
      sa[36] = "134";
      sa[37] = "135";
      sa[38] = "136";
      sa[39] = "137";
      sa[40] = "138";
      sa[41] = "139";
      sa[42] = "140";
      sa[43] = "141";
      sa[44] = "142";
      sa[45] = "143";
      sa[46] = "144";
      sa[47] = "145";
      sa[48] = "146";
      sa[49] = "147";
      sa[50] = "148";
      sa[51] = "149";
      sa[52] = "150";
      sa[53] = "151";
      sa[54] = "152";
      sa[55] = "153";
      sa[56] = "154";
      sa[57] = "155";
      sa[58] = "156";
      sa[59] = "157";
      sa[60] = "159";
      sa[61] = "164";
      sa[62] = "168";
      sa[63] = "170";
      sa[64] = "36";
      sa[65] = "37";
      sa[66] = "42";
      sa[67] = "43";
      sa[68] = "44";
      sa[69] = "45";
      sa[70] = "46";
      sa[71] = "48";
      sa[72] = "49";
      sa[73] = "50";
      sa[74] = "51";
      sa[75] = "52";
      sa[76] = "53";
      sa[77] = "54";
      sa[78] = "55";
      sa[79] = "56";
      sa[80] = "57";
      sa[81] = "58";
      sa[82] = "59";
      sa[83] = "60";
      sa[84] = "61";
      sa[85] = "62";
      sa[86] = "63";
      sa[87] = "64";
      sa[88] = "65";
      sa[89] = "66";
      sa[90] = "67";
      sa[91] = "68";
      sa[92] = "69";
      sa[93] = "70";
      sa[94] = "71";
      sa[95] = "72";
      sa[96] = "73";
      sa[97] = "74";
      sa[98] = "75";
      sa[99] = "76";
      sa[100] = "77";
      sa[101] = "78";
      sa[102] = "79";
      sa[103] = "80";
      sa[104] = "81";
      sa[105] = "82";
      sa[106] = "83";
      sa[107] = "84";
      sa[108] = "85";
      sa[109] = "86";
      sa[110] = "87";
      sa[111] = "88";
      sa[112] = "89";
      sa[113] = "90";
      sa[114] = "91";
      sa[115] = "92";
      sa[116] = "93";
      sa[117] = "94";
      sa[118] = "95";
      sa[119] = "96";
      sa[120] = "97";
      sa[121] = "98";
      sa[122] = "99";
    }
  }
}
// The class representing column eve_charge
class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_7 {
  public static final String[] VALUES = new String[1435];
  static {
    GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_7_0.fill(VALUES);
  }
  static final class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_7_0 {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "10";
      sa[2] = "10.01";
      sa[3] = "10.02";
      sa[4] = "10.03";
      sa[5] = "10.05";
      sa[6] = "10.07";
      sa[7] = "10.08";
      sa[8] = "10.09";
      sa[9] = "10.1";
      sa[10] = "10.11";
      sa[11] = "10.12";
      sa[12] = "10.14";
      sa[13] = "10.17";
      sa[14] = "10.19";
      sa[15] = "10.2";
      sa[16] = "10.21";
      sa[17] = "10.23";
      sa[18] = "10.24";
      sa[19] = "10.25";
      sa[20] = "10.26";
      sa[21] = "10.28";
      sa[22] = "10.29";
      sa[23] = "10.3";
      sa[24] = "10.34";
      sa[25] = "10.35";
      sa[26] = "10.36";
      sa[27] = "10.38";
      sa[28] = "10.39";
      sa[29] = "10.4";
      sa[30] = "10.44";
      sa[31] = "10.45";
      sa[32] = "10.46";
      sa[33] = "10.48";
      sa[34] = "10.49";
      sa[35] = "10.5";
      sa[36] = "10.51";
      sa[37] = "10.53";
      sa[38] = "10.54";
      sa[39] = "10.56";
      sa[40] = "10.57";
      sa[41] = "10.6";
      sa[42] = "10.68";
      sa[43] = "10.69";
      sa[44] = "10.7";
      sa[45] = "10.71";
      sa[46] = "10.73";
      sa[47] = "10.74";
      sa[48] = "10.75";
      sa[49] = "10.78";
      sa[50] = "10.79";
      sa[51] = "10.8";
      sa[52] = "10.82";
      sa[53] = "10.83";
      sa[54] = "10.84";
      sa[55] = "10.85";
      sa[56] = "10.86";
      sa[57] = "10.88";
      sa[58] = "10.91";
      sa[59] = "10.94";
      sa[60] = "10.96";
      sa[61] = "10.97";
      sa[62] = "10.98";
      sa[63] = "10.99";
      sa[64] = "11";
      sa[65] = "11.01";
      sa[66] = "11.03";
      sa[67] = "11.05";
      sa[68] = "11.06";
      sa[69] = "11.07";
      sa[70] = "11.08";
      sa[71] = "11.11";
      sa[72] = "11.14";
      sa[73] = "11.15";
      sa[74] = "11.17";
      sa[75] = "11.19";
      sa[76] = "11.2";
      sa[77] = "11.24";
      sa[78] = "11.25";
      sa[79] = "11.26";
      sa[80] = "11.29";
      sa[81] = "11.3";
      sa[82] = "11.31";
      sa[83] = "11.32";
      sa[84] = "11.34";
      sa[85] = "11.38";
      sa[86] = "11.39";
      sa[87] = "11.4";
      sa[88] = "11.41";
      sa[89] = "11.42";
      sa[90] = "11.43";
      sa[91] = "11.44";
      sa[92] = "11.45";
      sa[93] = "11.47";
      sa[94] = "11.48";
      sa[95] = "11.49";
      sa[96] = "11.51";
      sa[97] = "11.54";
      sa[98] = "11.55";
      sa[99] = "11.56";
      sa[100] = "11.57";
      sa[101] = "11.58";
      sa[102] = "11.59";
      sa[103] = "11.62";
      sa[104] = "11.63";
      sa[105] = "11.64";
      sa[106] = "11.65";
      sa[107] = "11.66";
      sa[108] = "11.67";
      sa[109] = "11.69";
      sa[110] = "11.7";
      sa[111] = "11.71";
      sa[112] = "11.72";
      sa[113] = "11.73";
      sa[114] = "11.74";
      sa[115] = "11.75";
      sa[116] = "11.76";
      sa[117] = "11.77";
      sa[118] = "11.78";
      sa[119] = "11.79";
      sa[120] = "11.81";
      sa[121] = "11.82";
      sa[122] = "11.83";
      sa[123] = "11.86";
      sa[124] = "11.87";
      sa[125] = "11.88";
      sa[126] = "11.9";
      sa[127] = "11.92";
      sa[128] = "11.93";
      sa[129] = "11.96";
      sa[130] = "11.98";
      sa[131] = "11.99";
      sa[132] = "12";
      sa[133] = "12.02";
      sa[134] = "12.03";
      sa[135] = "12.04";
      sa[136] = "12.05";
      sa[137] = "12.06";
      sa[138] = "12.07";
      sa[139] = "12.08";
      sa[140] = "12.1";
      sa[141] = "12.12";
      sa[142] = "12.13";
      sa[143] = "12.16";
      sa[144] = "12.18";
      sa[145] = "12.19";
      sa[146] = "12.2";
      sa[147] = "12.21";
      sa[148] = "12.22";
      sa[149] = "12.23";
      sa[150] = "12.25";
      sa[151] = "12.26";
      sa[152] = "12.27";
      sa[153] = "12.28";
      sa[154] = "12.33";
      sa[155] = "12.34";
      sa[156] = "12.35";
      sa[157] = "12.36";
      sa[158] = "12.37";
      sa[159] = "12.38";
      sa[160] = "12.39";
      sa[161] = "12.4";
      sa[162] = "12.41";
      sa[163] = "12.43";
      sa[164] = "12.44";
      sa[165] = "12.45";
      sa[166] = "12.46";
      sa[167] = "12.47";
      sa[168] = "12.48";
      sa[169] = "12.49";
      sa[170] = "12.5";
      sa[171] = "12.51";
      sa[172] = "12.52";
      sa[173] = "12.53";
      sa[174] = "12.55";
      sa[175] = "12.56";
      sa[176] = "12.57";
      sa[177] = "12.58";
      sa[178] = "12.59";
      sa[179] = "12.6";
      sa[180] = "12.61";
      sa[181] = "12.62";
      sa[182] = "12.63";
      sa[183] = "12.64";
      sa[184] = "12.65";
      sa[185] = "12.66";
      sa[186] = "12.67";
      sa[187] = "12.68";
      sa[188] = "12.69";
      sa[189] = "12.7";
      sa[190] = "12.71";
      sa[191] = "12.72";
      sa[192] = "12.73";
      sa[193] = "12.74";
      sa[194] = "12.75";
      sa[195] = "12.76";
      sa[196] = "12.77";
      sa[197] = "12.78";
      sa[198] = "12.79";
      sa[199] = "12.8";
      sa[200] = "12.81";
      sa[201] = "12.82";
      sa[202] = "12.83";
      sa[203] = "12.84";
      sa[204] = "12.85";
      sa[205] = "12.86";
      sa[206] = "12.87";
      sa[207] = "12.88";
      sa[208] = "12.89";
      sa[209] = "12.91";
      sa[210] = "12.92";
      sa[211] = "12.93";
      sa[212] = "12.94";
      sa[213] = "12.95";
      sa[214] = "12.96";
      sa[215] = "12.97";
      sa[216] = "12.98";
      sa[217] = "12.99";
      sa[218] = "13";
      sa[219] = "13.01";
      sa[220] = "13.02";
      sa[221] = "13.03";
      sa[222] = "13.06";
      sa[223] = "13.07";
      sa[224] = "13.09";
      sa[225] = "13.11";
      sa[226] = "13.12";
      sa[227] = "13.13";
      sa[228] = "13.14";
      sa[229] = "13.15";
      sa[230] = "13.16";
      sa[231] = "13.17";
      sa[232] = "13.18";
      sa[233] = "13.19";
      sa[234] = "13.2";
      sa[235] = "13.21";
      sa[236] = "13.22";
      sa[237] = "13.23";
      sa[238] = "13.24";
      sa[239] = "13.25";
      sa[240] = "13.26";
      sa[241] = "13.27";
      sa[242] = "13.28";
      sa[243] = "13.29";
      sa[244] = "13.3";
      sa[245] = "13.32";
      sa[246] = "13.34";
      sa[247] = "13.35";
      sa[248] = "13.36";
      sa[249] = "13.37";
      sa[250] = "13.39";
      sa[251] = "13.4";
      sa[252] = "13.41";
      sa[253] = "13.43";
      sa[254] = "13.44";
      sa[255] = "13.45";
      sa[256] = "13.46";
      sa[257] = "13.47";
      sa[258] = "13.48";
      sa[259] = "13.5";
      sa[260] = "13.51";
      sa[261] = "13.52";
      sa[262] = "13.53";
      sa[263] = "13.54";
      sa[264] = "13.55";
      sa[265] = "13.56";
      sa[266] = "13.57";
      sa[267] = "13.59";
      sa[268] = "13.6";
      sa[269] = "13.61";
      sa[270] = "13.62";
      sa[271] = "13.63";
      sa[272] = "13.64";
      sa[273] = "13.65";
      sa[274] = "13.66";
      sa[275] = "13.67";
      sa[276] = "13.68";
      sa[277] = "13.69";
      sa[278] = "13.71";
      sa[279] = "13.72";
      sa[280] = "13.73";
      sa[281] = "13.74";
      sa[282] = "13.75";
      sa[283] = "13.76";
      sa[284] = "13.77";
      sa[285] = "13.78";
      sa[286] = "13.8";
      sa[287] = "13.81";
      sa[288] = "13.82";
      sa[289] = "13.83";
      sa[290] = "13.84";
      sa[291] = "13.85";
      sa[292] = "13.86";
      sa[293] = "13.87";
      sa[294] = "13.88";
      sa[295] = "13.89";
      sa[296] = "13.9";
      sa[297] = "13.91";
      sa[298] = "13.93";
      sa[299] = "13.94";
      sa[300] = "13.95";
      sa[301] = "13.96";
      sa[302] = "13.97";
      sa[303] = "13.98";
      sa[304] = "13.99";
      sa[305] = "14";
      sa[306] = "14.01";
      sa[307] = "14.02";
      sa[308] = "14.03";
      sa[309] = "14.04";
      sa[310] = "14.05";
      sa[311] = "14.06";
      sa[312] = "14.08";
      sa[313] = "14.09";
      sa[314] = "14.1";
      sa[315] = "14.11";
      sa[316] = "14.13";
      sa[317] = "14.14";
      sa[318] = "14.15";
      sa[319] = "14.16";
      sa[320] = "14.17";
      sa[321] = "14.18";
      sa[322] = "14.19";
      sa[323] = "14.2";
      sa[324] = "14.21";
      sa[325] = "14.22";
      sa[326] = "14.23";
      sa[327] = "14.24";
      sa[328] = "14.25";
      sa[329] = "14.26";
      sa[330] = "14.27";
      sa[331] = "14.28";
      sa[332] = "14.29";
      sa[333] = "14.3";
      sa[334] = "14.31";
      sa[335] = "14.32";
      sa[336] = "14.33";
      sa[337] = "14.34";
      sa[338] = "14.35";
      sa[339] = "14.37";
      sa[340] = "14.38";
      sa[341] = "14.39";
      sa[342] = "14.4";
      sa[343] = "14.41";
      sa[344] = "14.42";
      sa[345] = "14.43";
      sa[346] = "14.44";
      sa[347] = "14.45";
      sa[348] = "14.47";
      sa[349] = "14.48";
      sa[350] = "14.49";
      sa[351] = "14.5";
      sa[352] = "14.51";
      sa[353] = "14.52";
      sa[354] = "14.53";
      sa[355] = "14.54";
      sa[356] = "14.55";
      sa[357] = "14.56";
      sa[358] = "14.57";
      sa[359] = "14.58";
      sa[360] = "14.59";
      sa[361] = "14.6";
      sa[362] = "14.61";
      sa[363] = "14.62";
      sa[364] = "14.63";
      sa[365] = "14.64";
      sa[366] = "14.65";
      sa[367] = "14.67";
      sa[368] = "14.68";
      sa[369] = "14.69";
      sa[370] = "14.71";
      sa[371] = "14.72";
      sa[372] = "14.73";
      sa[373] = "14.74";
      sa[374] = "14.75";
      sa[375] = "14.76";
      sa[376] = "14.77";
      sa[377] = "14.79";
      sa[378] = "14.82";
      sa[379] = "14.83";
      sa[380] = "14.84";
      sa[381] = "14.86";
      sa[382] = "14.87";
      sa[383] = "14.88";
      sa[384] = "14.89";
      sa[385] = "14.9";
      sa[386] = "14.91";
      sa[387] = "14.93";
      sa[388] = "14.94";
      sa[389] = "14.95";
      sa[390] = "14.96";
      sa[391] = "14.97";
      sa[392] = "14.98";
      sa[393] = "14.99";
      sa[394] = "15";
      sa[395] = "15.01";
      sa[396] = "15.02";
      sa[397] = "15.04";
      sa[398] = "15.05";
      sa[399] = "15.06";
      sa[400] = "15.07";
      sa[401] = "15.08";
      sa[402] = "15.09";
      sa[403] = "15.1";
      sa[404] = "15.11";
      sa[405] = "15.12";
      sa[406] = "15.13";
      sa[407] = "15.15";
      sa[408] = "15.16";
      sa[409] = "15.17";
      sa[410] = "15.18";
      sa[411] = "15.19";
      sa[412] = "15.2";
      sa[413] = "15.21";
      sa[414] = "15.22";
      sa[415] = "15.23";
      sa[416] = "15.24";
      sa[417] = "15.25";
      sa[418] = "15.26";
      sa[419] = "15.27";
      sa[420] = "15.28";
      sa[421] = "15.29";
      sa[422] = "15.3";
      sa[423] = "15.32";
      sa[424] = "15.33";
      sa[425] = "15.34";
      sa[426] = "15.35";
      sa[427] = "15.36";
      sa[428] = "15.37";
      sa[429] = "15.39";
      sa[430] = "15.4";
      sa[431] = "15.42";
      sa[432] = "15.43";
      sa[433] = "15.44";
      sa[434] = "15.45";
      sa[435] = "15.47";
      sa[436] = "15.48";
      sa[437] = "15.49";
      sa[438] = "15.5";
      sa[439] = "15.51";
      sa[440] = "15.52";
      sa[441] = "15.53";
      sa[442] = "15.55";
      sa[443] = "15.56";
      sa[444] = "15.57";
      sa[445] = "15.58";
      sa[446] = "15.59";
      sa[447] = "15.6";
      sa[448] = "15.61";
      sa[449] = "15.62";
      sa[450] = "15.63";
      sa[451] = "15.64";
      sa[452] = "15.65";
      sa[453] = "15.66";
      sa[454] = "15.67";
      sa[455] = "15.68";
      sa[456] = "15.69";
      sa[457] = "15.7";
      sa[458] = "15.71";
      sa[459] = "15.72";
      sa[460] = "15.73";
      sa[461] = "15.75";
      sa[462] = "15.76";
      sa[463] = "15.77";
      sa[464] = "15.78";
      sa[465] = "15.79";
      sa[466] = "15.8";
      sa[467] = "15.81";
      sa[468] = "15.83";
      sa[469] = "15.84";
      sa[470] = "15.85";
      sa[471] = "15.86";
      sa[472] = "15.87";
      sa[473] = "15.88";
      sa[474] = "15.89";
      sa[475] = "15.9";
      sa[476] = "15.91";
      sa[477] = "15.92";
      sa[478] = "15.93";
      sa[479] = "15.94";
      sa[480] = "15.95";
      sa[481] = "15.96";
      sa[482] = "15.97";
      sa[483] = "15.98";
      sa[484] = "16";
      sa[485] = "16.01";
      sa[486] = "16.02";
      sa[487] = "16.03";
      sa[488] = "16.04";
      sa[489] = "16.05";
      sa[490] = "16.06";
      sa[491] = "16.07";
      sa[492] = "16.08";
      sa[493] = "16.09";
      sa[494] = "16.1";
      sa[495] = "16.11";
      sa[496] = "16.12";
      sa[497] = "16.13";
      sa[498] = "16.14";
      sa[499] = "16.15";
      sa[500] = "16.17";
      sa[501] = "16.18";
      sa[502] = "16.2";
      sa[503] = "16.21";
      sa[504] = "16.22";
      sa[505] = "16.23";
      sa[506] = "16.24";
      sa[507] = "16.26";
      sa[508] = "16.27";
      sa[509] = "16.29";
      sa[510] = "16.3";
      sa[511] = "16.31";
      sa[512] = "16.32";
      sa[513] = "16.33";
      sa[514] = "16.34";
      sa[515] = "16.35";
      sa[516] = "16.37";
      sa[517] = "16.38";
      sa[518] = "16.39";
      sa[519] = "16.4";
      sa[520] = "16.41";
      sa[521] = "16.42";
      sa[522] = "16.43";
      sa[523] = "16.44";
      sa[524] = "16.45";
      sa[525] = "16.46";
      sa[526] = "16.47";
      sa[527] = "16.48";
      sa[528] = "16.49";
      sa[529] = "16.5";
      sa[530] = "16.52";
      sa[531] = "16.53";
      sa[532] = "16.54";
      sa[533] = "16.55";
      sa[534] = "16.56";
      sa[535] = "16.57";
      sa[536] = "16.58";
      sa[537] = "16.59";
      sa[538] = "16.6";
      sa[539] = "16.61";
      sa[540] = "16.62";
      sa[541] = "16.63";
      sa[542] = "16.64";
      sa[543] = "16.65";
      sa[544] = "16.66";
      sa[545] = "16.67";
      sa[546] = "16.68";
      sa[547] = "16.69";
      sa[548] = "16.7";
      sa[549] = "16.71";
      sa[550] = "16.72";
      sa[551] = "16.73";
      sa[552] = "16.74";
      sa[553] = "16.75";
      sa[554] = "16.76";
      sa[555] = "16.77";
      sa[556] = "16.78";
      sa[557] = "16.79";
      sa[558] = "16.8";
      sa[559] = "16.81";
      sa[560] = "16.82";
      sa[561] = "16.83";
      sa[562] = "16.84";
      sa[563] = "16.85";
      sa[564] = "16.86";
      sa[565] = "16.87";
      sa[566] = "16.88";
      sa[567] = "16.89";
      sa[568] = "16.9";
      sa[569] = "16.91";
      sa[570] = "16.92";
      sa[571] = "16.93";
      sa[572] = "16.95";
      sa[573] = "16.96";
      sa[574] = "16.97";
      sa[575] = "16.98";
      sa[576] = "16.99";
      sa[577] = "17";
      sa[578] = "17.01";
      sa[579] = "17.02";
      sa[580] = "17.03";
      sa[581] = "17.04";
      sa[582] = "17.05";
      sa[583] = "17.06";
      sa[584] = "17.07";
      sa[585] = "17.08";
      sa[586] = "17.09";
      sa[587] = "17.1";
      sa[588] = "17.11";
      sa[589] = "17.12";
      sa[590] = "17.13";
      sa[591] = "17.14";
      sa[592] = "17.15";
      sa[593] = "17.18";
      sa[594] = "17.19";
      sa[595] = "17.2";
      sa[596] = "17.21";
      sa[597] = "17.22";
      sa[598] = "17.23";
      sa[599] = "17.24";
      sa[600] = "17.25";
      sa[601] = "17.26";
      sa[602] = "17.27";
      sa[603] = "17.29";
      sa[604] = "17.3";
      sa[605] = "17.31";
      sa[606] = "17.32";
      sa[607] = "17.33";
      sa[608] = "17.34";
      sa[609] = "17.35";
      sa[610] = "17.36";
      sa[611] = "17.37";
      sa[612] = "17.38";
      sa[613] = "17.39";
      sa[614] = "17.4";
      sa[615] = "17.41";
      sa[616] = "17.42";
      sa[617] = "17.43";
      sa[618] = "17.44";
      sa[619] = "17.45";
      sa[620] = "17.46";
      sa[621] = "17.47";
      sa[622] = "17.48";
      sa[623] = "17.5";
      sa[624] = "17.51";
      sa[625] = "17.53";
      sa[626] = "17.54";
      sa[627] = "17.55";
      sa[628] = "17.56";
      sa[629] = "17.57";
      sa[630] = "17.58";
      sa[631] = "17.59";
      sa[632] = "17.6";
      sa[633] = "17.61";
      sa[634] = "17.62";
      sa[635] = "17.63";
      sa[636] = "17.64";
      sa[637] = "17.65";
      sa[638] = "17.66";
      sa[639] = "17.67";
      sa[640] = "17.68";
      sa[641] = "17.69";
      sa[642] = "17.7";
      sa[643] = "17.71";
      sa[644] = "17.72";
      sa[645] = "17.73";
      sa[646] = "17.74";
      sa[647] = "17.75";
      sa[648] = "17.76";
      sa[649] = "17.77";
      sa[650] = "17.78";
      sa[651] = "17.79";
      sa[652] = "17.8";
      sa[653] = "17.81";
      sa[654] = "17.82";
      sa[655] = "17.83";
      sa[656] = "17.84";
      sa[657] = "17.85";
      sa[658] = "17.86";
      sa[659] = "17.87";
      sa[660] = "17.88";
      sa[661] = "17.89";
      sa[662] = "17.9";
      sa[663] = "17.91";
      sa[664] = "17.92";
      sa[665] = "17.93";
      sa[666] = "17.94";
      sa[667] = "17.95";
      sa[668] = "17.96";
      sa[669] = "17.97";
      sa[670] = "17.98";
      sa[671] = "17.99";
      sa[672] = "18";
      sa[673] = "18.01";
      sa[674] = "18.02";
      sa[675] = "18.03";
      sa[676] = "18.04";
      sa[677] = "18.05";
      sa[678] = "18.06";
      sa[679] = "18.08";
      sa[680] = "18.09";
      sa[681] = "18.1";
      sa[682] = "18.11";
      sa[683] = "18.12";
      sa[684] = "18.13";
      sa[685] = "18.14";
      sa[686] = "18.16";
      sa[687] = "18.17";
      sa[688] = "18.18";
      sa[689] = "18.19";
      sa[690] = "18.2";
      sa[691] = "18.21";
      sa[692] = "18.22";
      sa[693] = "18.23";
      sa[694] = "18.24";
      sa[695] = "18.25";
      sa[696] = "18.26";
      sa[697] = "18.28";
      sa[698] = "18.29";
      sa[699] = "18.3";
      sa[700] = "18.31";
      sa[701] = "18.32";
      sa[702] = "18.33";
      sa[703] = "18.34";
      sa[704] = "18.35";
      sa[705] = "18.36";
      sa[706] = "18.37";
      sa[707] = "18.38";
      sa[708] = "18.39";
      sa[709] = "18.4";
      sa[710] = "18.41";
      sa[711] = "18.42";
      sa[712] = "18.43";
      sa[713] = "18.44";
      sa[714] = "18.45";
      sa[715] = "18.46";
      sa[716] = "18.47";
      sa[717] = "18.48";
      sa[718] = "18.49";
      sa[719] = "18.5";
      sa[720] = "18.52";
      sa[721] = "18.54";
      sa[722] = "18.55";
      sa[723] = "18.56";
      sa[724] = "18.57";
      sa[725] = "18.58";
      sa[726] = "18.59";
      sa[727] = "18.6";
      sa[728] = "18.61";
      sa[729] = "18.62";
      sa[730] = "18.63";
      sa[731] = "18.64";
      sa[732] = "18.65";
      sa[733] = "18.66";
      sa[734] = "18.67";
      sa[735] = "18.68";
      sa[736] = "18.69";
      sa[737] = "18.7";
      sa[738] = "18.71";
      sa[739] = "18.72";
      sa[740] = "18.73";
      sa[741] = "18.74";
      sa[742] = "18.75";
      sa[743] = "18.76";
      sa[744] = "18.77";
      sa[745] = "18.78";
      sa[746] = "18.79";
      sa[747] = "18.8";
      sa[748] = "18.81";
      sa[749] = "18.82";
      sa[750] = "18.83";
      sa[751] = "18.84";
      sa[752] = "18.85";
      sa[753] = "18.86";
      sa[754] = "18.87";
      sa[755] = "18.88";
      sa[756] = "18.89";
      sa[757] = "18.9";
      sa[758] = "18.91";
      sa[759] = "18.92";
      sa[760] = "18.93";
      sa[761] = "18.94";
      sa[762] = "18.95";
      sa[763] = "18.96";
      sa[764] = "18.97";
      sa[765] = "18.98";
      sa[766] = "18.99";
      sa[767] = "19";
      sa[768] = "19.01";
      sa[769] = "19.02";
      sa[770] = "19.03";
      sa[771] = "19.04";
      sa[772] = "19.05";
      sa[773] = "19.06";
      sa[774] = "19.07";
      sa[775] = "19.08";
      sa[776] = "19.09";
      sa[777] = "19.1";
      sa[778] = "19.11";
      sa[779] = "19.12";
      sa[780] = "19.13";
      sa[781] = "19.14";
      sa[782] = "19.15";
      sa[783] = "19.16";
      sa[784] = "19.17";
      sa[785] = "19.18";
      sa[786] = "19.19";
      sa[787] = "19.2";
      sa[788] = "19.22";
      sa[789] = "19.23";
      sa[790] = "19.24";
      sa[791] = "19.26";
      sa[792] = "19.27";
      sa[793] = "19.28";
      sa[794] = "19.3";
      sa[795] = "19.31";
      sa[796] = "19.32";
      sa[797] = "19.33";
      sa[798] = "19.36";
      sa[799] = "19.37";
      sa[800] = "19.38";
      sa[801] = "19.39";
      sa[802] = "19.41";
      sa[803] = "19.42";
      sa[804] = "19.43";
      sa[805] = "19.44";
      sa[806] = "19.45";
      sa[807] = "19.46";
      sa[808] = "19.47";
      sa[809] = "19.48";
      sa[810] = "19.5";
      sa[811] = "19.52";
      sa[812] = "19.54";
      sa[813] = "19.55";
      sa[814] = "19.56";
      sa[815] = "19.57";
      sa[816] = "19.58";
      sa[817] = "19.59";
      sa[818] = "19.6";
      sa[819] = "19.61";
      sa[820] = "19.63";
      sa[821] = "19.64";
      sa[822] = "19.65";
      sa[823] = "19.66";
      sa[824] = "19.67";
      sa[825] = "19.68";
      sa[826] = "19.69";
      sa[827] = "19.7";
      sa[828] = "19.71";
      sa[829] = "19.73";
      sa[830] = "19.74";
      sa[831] = "19.75";
      sa[832] = "19.76";
      sa[833] = "19.77";
      sa[834] = "19.78";
      sa[835] = "19.79";
      sa[836] = "19.8";
      sa[837] = "19.81";
      sa[838] = "19.82";
      sa[839] = "19.83";
      sa[840] = "19.84";
      sa[841] = "19.85";
      sa[842] = "19.86";
      sa[843] = "19.87";
      sa[844] = "19.88";
      sa[845] = "19.89";
      sa[846] = "19.9";
      sa[847] = "19.91";
      sa[848] = "19.92";
      sa[849] = "19.93";
      sa[850] = "19.95";
      sa[851] = "19.97";
      sa[852] = "19.98";
      sa[853] = "19.99";
      sa[854] = "2.65";
      sa[855] = "20";
      sa[856] = "20.01";
      sa[857] = "20.02";
      sa[858] = "20.03";
      sa[859] = "20.04";
      sa[860] = "20.05";
      sa[861] = "20.06";
      sa[862] = "20.07";
      sa[863] = "20.08";
      sa[864] = "20.09";
      sa[865] = "20.1";
      sa[866] = "20.11";
      sa[867] = "20.12";
      sa[868] = "20.13";
      sa[869] = "20.15";
      sa[870] = "20.16";
      sa[871] = "20.17";
      sa[872] = "20.18";
      sa[873] = "20.2";
      sa[874] = "20.22";
      sa[875] = "20.23";
      sa[876] = "20.24";
      sa[877] = "20.25";
      sa[878] = "20.26";
      sa[879] = "20.27";
      sa[880] = "20.28";
      sa[881] = "20.29";
      sa[882] = "20.3";
      sa[883] = "20.32";
      sa[884] = "20.34";
      sa[885] = "20.36";
      sa[886] = "20.37";
      sa[887] = "20.38";
      sa[888] = "20.4";
      sa[889] = "20.41";
      sa[890] = "20.42";
      sa[891] = "20.43";
      sa[892] = "20.44";
      sa[893] = "20.45";
      sa[894] = "20.46";
      sa[895] = "20.47";
      sa[896] = "20.48";
      sa[897] = "20.49";
      sa[898] = "20.5";
      sa[899] = "20.51";
      sa[900] = "20.52";
      sa[901] = "20.53";
      sa[902] = "20.54";
      sa[903] = "20.55";
      sa[904] = "20.56";
      sa[905] = "20.57";
      sa[906] = "20.58";
      sa[907] = "20.59";
      sa[908] = "20.6";
      sa[909] = "20.61";
      sa[910] = "20.62";
      sa[911] = "20.63";
      sa[912] = "20.64";
      sa[913] = "20.65";
      sa[914] = "20.66";
      sa[915] = "20.67";
      sa[916] = "20.68";
      sa[917] = "20.7";
      sa[918] = "20.71";
      sa[919] = "20.72";
      sa[920] = "20.73";
      sa[921] = "20.74";
      sa[922] = "20.75";
      sa[923] = "20.76";
      sa[924] = "20.77";
      sa[925] = "20.78";
      sa[926] = "20.8";
      sa[927] = "20.81";
      sa[928] = "20.82";
      sa[929] = "20.83";
      sa[930] = "20.84";
      sa[931] = "20.85";
      sa[932] = "20.86";
      sa[933] = "20.88";
      sa[934] = "20.89";
      sa[935] = "20.9";
      sa[936] = "20.91";
      sa[937] = "20.92";
      sa[938] = "20.93";
      sa[939] = "20.94";
      sa[940] = "20.95";
      sa[941] = "20.96";
      sa[942] = "20.97";
      sa[943] = "20.98";
      sa[944] = "20.99";
      sa[945] = "21";
      sa[946] = "21.01";
      sa[947] = "21.02";
      sa[948] = "21.04";
      sa[949] = "21.05";
      sa[950] = "21.06";
      sa[951] = "21.07";
      sa[952] = "21.08";
      sa[953] = "21.09";
      sa[954] = "21.1";
      sa[955] = "21.11";
      sa[956] = "21.12";
      sa[957] = "21.13";
      sa[958] = "21.14";
      sa[959] = "21.15";
      sa[960] = "21.16";
      sa[961] = "21.17";
      sa[962] = "21.18";
      sa[963] = "21.19";
      sa[964] = "21.2";
      sa[965] = "21.21";
      sa[966] = "21.22";
      sa[967] = "21.23";
      sa[968] = "21.24";
      sa[969] = "21.25";
      sa[970] = "21.27";
      sa[971] = "21.28";
      sa[972] = "21.29";
      sa[973] = "21.31";
      sa[974] = "21.32";
      sa[975] = "21.34";
      sa[976] = "21.35";
      sa[977] = "21.36";
      sa[978] = "21.38";
      sa[979] = "21.39";
      sa[980] = "21.4";
      sa[981] = "21.42";
      sa[982] = "21.44";
      sa[983] = "21.45";
      sa[984] = "21.46";
      sa[985] = "21.48";
      sa[986] = "21.49";
      sa[987] = "21.51";
      sa[988] = "21.52";
      sa[989] = "21.54";
      sa[990] = "21.55";
      sa[991] = "21.56";
      sa[992] = "21.57";
      sa[993] = "21.58";
      sa[994] = "21.59";
      sa[995] = "21.6";
      sa[996] = "21.61";
      sa[997] = "21.62";
      sa[998] = "21.63";
      sa[999] = "21.65";
      sa[1000] = "21.67";
      sa[1001] = "21.68";
      sa[1002] = "21.7";
      sa[1003] = "21.72";
      sa[1004] = "21.73";
      sa[1005] = "21.74";
      sa[1006] = "21.75";
      sa[1007] = "21.76";
      sa[1008] = "21.77";
      sa[1009] = "21.78";
      sa[1010] = "21.79";
      sa[1011] = "21.8";
      sa[1012] = "21.81";
      sa[1013] = "21.82";
      sa[1014] = "21.83";
      sa[1015] = "21.84";
      sa[1016] = "21.85";
      sa[1017] = "21.86";
      sa[1018] = "21.88";
      sa[1019] = "21.89";
      sa[1020] = "21.9";
      sa[1021] = "21.92";
      sa[1022] = "21.93";
      sa[1023] = "21.94";
      sa[1024] = "21.95";
      sa[1025] = "21.96";
      sa[1026] = "21.98";
      sa[1027] = "21.99";
      sa[1028] = "22";
      sa[1029] = "22.01";
      sa[1030] = "22.02";
      sa[1031] = "22.03";
      sa[1032] = "22.04";
      sa[1033] = "22.05";
      sa[1034] = "22.07";
      sa[1035] = "22.08";
      sa[1036] = "22.09";
      sa[1037] = "22.1";
      sa[1038] = "22.11";
      sa[1039] = "22.12";
      sa[1040] = "22.13";
      sa[1041] = "22.14";
      sa[1042] = "22.15";
      sa[1043] = "22.16";
      sa[1044] = "22.18";
      sa[1045] = "22.19";
      sa[1046] = "22.21";
      sa[1047] = "22.23";
      sa[1048] = "22.24";
      sa[1049] = "22.26";
      sa[1050] = "22.27";
      sa[1051] = "22.28";
      sa[1052] = "22.29";
      sa[1053] = "22.3";
      sa[1054] = "22.32";
      sa[1055] = "22.34";
      sa[1056] = "22.36";
      sa[1057] = "22.37";
      sa[1058] = "22.38";
      sa[1059] = "22.39";
      sa[1060] = "22.4";
      sa[1061] = "22.41";
      sa[1062] = "22.44";
      sa[1063] = "22.45";
      sa[1064] = "22.46";
      sa[1065] = "22.47";
      sa[1066] = "22.48";
      sa[1067] = "22.49";
      sa[1068] = "22.5";
      sa[1069] = "22.51";
      sa[1070] = "22.52";
      sa[1071] = "22.53";
      sa[1072] = "22.55";
      sa[1073] = "22.57";
      sa[1074] = "22.58";
      sa[1075] = "22.59";
      sa[1076] = "22.63";
      sa[1077] = "22.64";
      sa[1078] = "22.65";
      sa[1079] = "22.66";
      sa[1080] = "22.69";
      sa[1081] = "22.7";
      sa[1082] = "22.72";
      sa[1083] = "22.73";
      sa[1084] = "22.74";
      sa[1085] = "22.75";
      sa[1086] = "22.76";
      sa[1087] = "22.79";
      sa[1088] = "22.8";
      sa[1089] = "22.81";
      sa[1090] = "22.82";
      sa[1091] = "22.83";
      sa[1092] = "22.85";
      sa[1093] = "22.87";
      sa[1094] = "22.89";
      sa[1095] = "22.9";
      sa[1096] = "22.91";
      sa[1097] = "22.92";
      sa[1098] = "22.93";
      sa[1099] = "22.94";
      sa[1100] = "22.97";
      sa[1101] = "22.98";
      sa[1102] = "22.99";
      sa[1103] = "23";
      sa[1104] = "23.01";
      sa[1105] = "23.02";
      sa[1106] = "23.03";
      sa[1107] = "23.04";
      sa[1108] = "23.05";
      sa[1109] = "23.07";
      sa[1110] = "23.08";
      sa[1111] = "23.09";
      sa[1112] = "23.1";
      sa[1113] = "23.15";
      sa[1114] = "23.16";
      sa[1115] = "23.18";
      sa[1116] = "23.19";
      sa[1117] = "23.2";
      sa[1118] = "23.21";
      sa[1119] = "23.22";
      sa[1120] = "23.23";
      sa[1121] = "23.25";
      sa[1122] = "23.26";
      sa[1123] = "23.27";
      sa[1124] = "23.28";
      sa[1125] = "23.29";
      sa[1126] = "23.32";
      sa[1127] = "23.33";
      sa[1128] = "23.34";
      sa[1129] = "23.35";
      sa[1130] = "23.36";
      sa[1131] = "23.37";
      sa[1132] = "23.38";
      sa[1133] = "23.41";
      sa[1134] = "23.42";
      sa[1135] = "23.43";
      sa[1136] = "23.45";
      sa[1137] = "23.46";
      sa[1138] = "23.47";
      sa[1139] = "23.48";
      sa[1140] = "23.49";
      sa[1141] = "23.5";
      sa[1142] = "23.53";
      sa[1143] = "23.55";
      sa[1144] = "23.58";
      sa[1145] = "23.59";
      sa[1146] = "23.62";
      sa[1147] = "23.63";
      sa[1148] = "23.65";
      sa[1149] = "23.66";
      sa[1150] = "23.67";
      sa[1151] = "23.68";
      sa[1152] = "23.69";
      sa[1153] = "23.72";
      sa[1154] = "23.74";
      sa[1155] = "23.76";
      sa[1156] = "23.77";
      sa[1157] = "23.81";
      sa[1158] = "23.83";
      sa[1159] = "23.87";
      sa[1160] = "23.88";
      sa[1161] = "23.89";
      sa[1162] = "23.9";
      sa[1163] = "23.91";
      sa[1164] = "23.94";
      sa[1165] = "23.99";
      sa[1166] = "24.02";
      sa[1167] = "24.04";
      sa[1168] = "24.05";
      sa[1169] = "24.06";
      sa[1170] = "24.07";
      sa[1171] = "24.08";
      sa[1172] = "24.09";
      sa[1173] = "24.17";
      sa[1174] = "24.18";
      sa[1175] = "24.2";
      sa[1176] = "24.23";
      sa[1177] = "24.24";
      sa[1178] = "24.28";
      sa[1179] = "24.29";
      sa[1180] = "24.3";
      sa[1181] = "24.31";
      sa[1182] = "24.32";
      sa[1183] = "24.33";
      sa[1184] = "24.34";
      sa[1185] = "24.37";
      sa[1186] = "24.42";
      sa[1187] = "24.43";
      sa[1188] = "24.45";
      sa[1189] = "24.47";
      sa[1190] = "24.48";
      sa[1191] = "24.51";
      sa[1192] = "24.54";
      sa[1193] = "24.58";
      sa[1194] = "24.59";
      sa[1195] = "24.6";
      sa[1196] = "24.61";
      sa[1197] = "24.62";
      sa[1198] = "24.63";
      sa[1199] = "24.64";
      sa[1200] = "24.65";
      sa[1201] = "24.68";
      sa[1202] = "24.73";
      sa[1203] = "24.75";
      sa[1204] = "24.76";
      sa[1205] = "24.79";
      sa[1206] = "24.82";
      sa[1207] = "24.83";
      sa[1208] = "24.85";
      sa[1209] = "24.86";
      sa[1210] = "24.87";
      sa[1211] = "24.88";
      sa[1212] = "24.89";
      sa[1213] = "24.91";
      sa[1214] = "24.96";
      sa[1215] = "24.97";
      sa[1216] = "24.98";
      sa[1217] = "24.99";
      sa[1218] = "25.02";
      sa[1219] = "25.04";
      sa[1220] = "25.1";
      sa[1221] = "25.13";
      sa[1222] = "25.15";
      sa[1223] = "25.2";
      sa[1224] = "25.23";
      sa[1225] = "25.31";
      sa[1226] = "25.33";
      sa[1227] = "25.37";
      sa[1228] = "25.38";
      sa[1229] = "25.42";
      sa[1230] = "25.48";
      sa[1231] = "25.49";
      sa[1232] = "25.54";
      sa[1233] = "25.58";
      sa[1234] = "25.59";
      sa[1235] = "25.61";
      sa[1236] = "25.63";
      sa[1237] = "25.64";
      sa[1238] = "25.72";
      sa[1239] = "25.77";
      sa[1240] = "25.78";
      sa[1241] = "25.79";
      sa[1242] = "25.8";
      sa[1243] = "25.81";
      sa[1244] = "25.82";
      sa[1245] = "25.87";
      sa[1246] = "25.89";
      sa[1247] = "25.92";
      sa[1248] = "25.93";
      sa[1249] = "25.97";
      sa[1250] = "25.99";
      sa[1251] = "26.03";
      sa[1252] = "26.04";
      sa[1253] = "26.06";
      sa[1254] = "26.11";
      sa[1255] = "26.24";
      sa[1256] = "26.28";
      sa[1257] = "26.35";
      sa[1258] = "26.4";
      sa[1259] = "26.54";
      sa[1260] = "26.56";
      sa[1261] = "26.57";
      sa[1262] = "26.59";
      sa[1263] = "26.6";
      sa[1264] = "26.62";
      sa[1265] = "26.64";
      sa[1266] = "26.66";
      sa[1267] = "26.72";
      sa[1268] = "26.77";
      sa[1269] = "26.8";
      sa[1270] = "26.81";
      sa[1271] = "26.89";
      sa[1272] = "26.95";
      sa[1273] = "26.96";
      sa[1274] = "26.99";
      sa[1275] = "27.01";
      sa[1276] = "27.09";
      sa[1277] = "27.1";
      sa[1278] = "27.12";
      sa[1279] = "27.14";
      sa[1280] = "27.24";
      sa[1281] = "27.28";
      sa[1282] = "27.39";
      sa[1283] = "27.4";
      sa[1284] = "27.43";
      sa[1285] = "27.47";
      sa[1286] = "27.6";
      sa[1287] = "27.61";
      sa[1288] = "27.8";
      sa[1289] = "27.9";
      sa[1290] = "27.94";
      sa[1291] = "27.99";
      sa[1292] = "28.03";
      sa[1293] = "28.1";
      sa[1294] = "28.23";
      sa[1295] = "28.29";
      sa[1296] = "28.48";
      sa[1297] = "28.53";
      sa[1298] = "28.56";
      sa[1299] = "28.65";
      sa[1300] = "28.89";
      sa[1301] = "29.01";
      sa[1302] = "29.52";
      sa[1303] = "29.62";
      sa[1304] = "29.79";
      sa[1305] = "29.83";
      sa[1306] = "29.89";
      sa[1307] = "3.59";
      sa[1308] = "3.61";
      sa[1309] = "3.73";
      sa[1310] = "30.11";
      sa[1311] = "30.75";
      sa[1312] = "30.91";
      sa[1313] = "4.09";
      sa[1314] = "4.18";
      sa[1315] = "4.5";
      sa[1316] = "4.76";
      sa[1317] = "4.98";
      sa[1318] = "5.01";
      sa[1319] = "5.1";
      sa[1320] = "5.17";
      sa[1321] = "5.26";
      sa[1322] = "5.47";
      sa[1323] = "5.54";
      sa[1324] = "5.61";
      sa[1325] = "5.65";
      sa[1326] = "5.7";
      sa[1327] = "5.74";
      sa[1328] = "5.88";
      sa[1329] = "6.03";
      sa[1330] = "6.04";
      sa[1331] = "6.2";
      sa[1332] = "6.22";
      sa[1333] = "6.34";
      sa[1334] = "6.4";
      sa[1335] = "6.45";
      sa[1336] = "6.49";
      sa[1337] = "6.55";
      sa[1338] = "6.62";
      sa[1339] = "6.66";
      sa[1340] = "6.71";
      sa[1341] = "6.74";
      sa[1342] = "6.8";
      sa[1343] = "6.85";
      sa[1344] = "6.87";
      sa[1345] = "6.89";
      sa[1346] = "6.96";
      sa[1347] = "6.99";
      sa[1348] = "7.09";
      sa[1349] = "7.13";
      sa[1350] = "7.23";
      sa[1351] = "7.38";
      sa[1352] = "7.45";
      sa[1353] = "7.46";
      sa[1354] = "7.49";
      sa[1355] = "7.51";
      sa[1356] = "7.53";
      sa[1357] = "7.54";
      sa[1358] = "7.57";
      sa[1359] = "7.59";
      sa[1360] = "7.62";
      sa[1361] = "7.63";
      sa[1362] = "7.65";
      sa[1363] = "7.67";
      sa[1364] = "7.69";
      sa[1365] = "7.71";
      sa[1366] = "7.75";
      sa[1367] = "7.79";
      sa[1368] = "7.82";
      sa[1369] = "7.85";
      sa[1370] = "7.94";
      sa[1371] = "7.96";
      sa[1372] = "8.02";
      sa[1373] = "8.08";
      sa[1374] = "8.13";
      sa[1375] = "8.21";
      sa[1376] = "8.3";
      sa[1377] = "8.36";
      sa[1378] = "8.42";
      sa[1379] = "8.46";
      sa[1380] = "8.61";
      sa[1381] = "8.63";
      sa[1382] = "8.69";
      sa[1383] = "8.7";
      sa[1384] = "8.72";
      sa[1385] = "8.74";
      sa[1386] = "8.76";
      sa[1387] = "8.77";
      sa[1388] = "8.78";
      sa[1389] = "8.79";
      sa[1390] = "8.81";
      sa[1391] = "8.82";
      sa[1392] = "8.92";
      sa[1393] = "8.97";
      sa[1394] = "8.98";
      sa[1395] = "8.99";
      sa[1396] = "9.02";
      sa[1397] = "9.03";
      sa[1398] = "9.05";
      sa[1399] = "9.08";
      sa[1400] = "9.1";
      sa[1401] = "9.17";
      sa[1402] = "9.19";
      sa[1403] = "9.2";
      sa[1404] = "9.22";
      sa[1405] = "9.32";
      sa[1406] = "9.34";
      sa[1407] = "9.36";
      sa[1408] = "9.37";
      sa[1409] = "9.38";
      sa[1410] = "9.42";
      sa[1411] = "9.46";
      sa[1412] = "9.49";
      sa[1413] = "9.55";
      sa[1414] = "9.56";
      sa[1415] = "9.58";
      sa[1416] = "9.6";
      sa[1417] = "9.61";
      sa[1418] = "9.62";
      sa[1419] = "9.63";
      sa[1420] = "9.64";
      sa[1421] = "9.69";
      sa[1422] = "9.72";
      sa[1423] = "9.73";
      sa[1424] = "9.74";
      sa[1425] = "9.75";
      sa[1426] = "9.76";
      sa[1427] = "9.78";
      sa[1428] = "9.79";
      sa[1429] = "9.82";
      sa[1430] = "9.83";
      sa[1431] = "9.85";
      sa[1432] = "9.9";
      sa[1433] = "9.91";
      sa[1434] = "9.95";
    }
  }
}
// The class representing column night_mins
class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_8 {
  public static final String[] VALUES = new String[1590];
  static {
    GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_8_0.fill(VALUES);
  }
  static final class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_8_0 {
    static final void fill(String[] sa) {
      sa[0] = "100.3";
      sa[1] = "100.9";
      sa[2] = "101.2";
      sa[3] = "101.7";
      sa[4] = "101.8";
      sa[5] = "102";
      sa[6] = "102.1";
      sa[7] = "102.4";
      sa[8] = "103.1";
      sa[9] = "103.7";
      sa[10] = "103.8";
      sa[11] = "103.9";
      sa[12] = "104";
      sa[13] = "104.1";
      sa[14] = "104.5";
      sa[15] = "104.7";
      sa[16] = "104.8";
      sa[17] = "104.9";
      sa[18] = "105.2";
      sa[19] = "105.4";
      sa[20] = "105.6";
      sa[21] = "105.9";
      sa[22] = "107.3";
      sa[23] = "107.5";
      sa[24] = "107.6";
      sa[25] = "107.9";
      sa[26] = "108";
      sa[27] = "108.1";
      sa[28] = "108.8";
      sa[29] = "108.9";
      sa[30] = "109.3";
      sa[31] = "109.6";
      sa[32] = "109.7";
      sa[33] = "109.9";
      sa[34] = "110.1";
      sa[35] = "110.3";
      sa[36] = "110.4";
      sa[37] = "110.7";
      sa[38] = "111";
      sa[39] = "111.2";
      sa[40] = "111.4";
      sa[41] = "111.5";
      sa[42] = "111.6";
      sa[43] = "111.7";
      sa[44] = "112.2";
      sa[45] = "112.3";
      sa[46] = "112.4";
      sa[47] = "112.8";
      sa[48] = "112.9";
      sa[49] = "113.3";
      sa[50] = "113.5";
      sa[51] = "113.8";
      sa[52] = "114.1";
      sa[53] = "114.2";
      sa[54] = "114.3";
      sa[55] = "114.5";
      sa[56] = "114.9";
      sa[57] = "115.6";
      sa[58] = "115.7";
      sa[59] = "115.9";
      sa[60] = "116.1";
      sa[61] = "116.3";
      sa[62] = "116.4";
      sa[63] = "116.6";
      sa[64] = "117";
      sa[65] = "117.1";
      sa[66] = "117.3";
      sa[67] = "117.6";
      sa[68] = "117.8";
      sa[69] = "117.9";
      sa[70] = "118";
      sa[71] = "118.3";
      sa[72] = "118.5";
      sa[73] = "118.9";
      sa[74] = "119";
      sa[75] = "119.1";
      sa[76] = "119.2";
      sa[77] = "119.4";
      sa[78] = "119.5";
      sa[79] = "119.8";
      sa[80] = "120";
      sa[81] = "120.1";
      sa[82] = "120.2";
      sa[83] = "120.3";
      sa[84] = "120.4";
      sa[85] = "120.5";
      sa[86] = "120.8";
      sa[87] = "121";
      sa[88] = "121.1";
      sa[89] = "121.6";
      sa[90] = "122";
      sa[91] = "122.1";
      sa[92] = "122.2";
      sa[93] = "122.3";
      sa[94] = "122.4";
      sa[95] = "122.5";
      sa[96] = "122.6";
      sa[97] = "123";
      sa[98] = "123.2";
      sa[99] = "123.4";
      sa[100] = "123.5";
      sa[101] = "123.8";
      sa[102] = "123.9";
      sa[103] = "124";
      sa[104] = "125.1";
      sa[105] = "125.6";
      sa[106] = "125.7";
      sa[107] = "126.3";
      sa[108] = "126.6";
      sa[109] = "126.7";
      sa[110] = "126.8";
      sa[111] = "126.9";
      sa[112] = "127.1";
      sa[113] = "127.4";
      sa[114] = "127.6";
      sa[115] = "127.7";
      sa[116] = "127.8";
      sa[117] = "127.9";
      sa[118] = "128.1";
      sa[119] = "128.2";
      sa[120] = "128.3";
      sa[121] = "128.4";
      sa[122] = "128.5";
      sa[123] = "128.6";
      sa[124] = "128.7";
      sa[125] = "128.8";
      sa[126] = "128.9";
      sa[127] = "129";
      sa[128] = "129.1";
      sa[129] = "129.2";
      sa[130] = "129.3";
      sa[131] = "129.4";
      sa[132] = "129.6";
      sa[133] = "129.7";
      sa[134] = "129.8";
      sa[135] = "129.9";
      sa[136] = "130";
      sa[137] = "130.2";
      sa[138] = "130.3";
      sa[139] = "130.6";
      sa[140] = "130.7";
      sa[141] = "130.9";
      sa[142] = "131.1";
      sa[143] = "131.2";
      sa[144] = "131.3";
      sa[145] = "131.4";
      sa[146] = "131.6";
      sa[147] = "131.9";
      sa[148] = "132";
      sa[149] = "132.3";
      sa[150] = "132.5";
      sa[151] = "132.6";
      sa[152] = "132.7";
      sa[153] = "132.8";
      sa[154] = "132.9";
      sa[155] = "133.1";
      sa[156] = "133.3";
      sa[157] = "133.4";
      sa[158] = "133.5";
      sa[159] = "133.6";
      sa[160] = "133.7";
      sa[161] = "133.9";
      sa[162] = "134";
      sa[163] = "134.1";
      sa[164] = "134.2";
      sa[165] = "134.3";
      sa[166] = "134.4";
      sa[167] = "134.5";
      sa[168] = "134.6";
      sa[169] = "134.7";
      sa[170] = "134.9";
      sa[171] = "135";
      sa[172] = "135.3";
      sa[173] = "135.4";
      sa[174] = "135.7";
      sa[175] = "135.9";
      sa[176] = "136";
      sa[177] = "136.1";
      sa[178] = "136.2";
      sa[179] = "136.3";
      sa[180] = "136.5";
      sa[181] = "136.6";
      sa[182] = "136.7";
      sa[183] = "136.8";
      sa[184] = "136.9";
      sa[185] = "137.4";
      sa[186] = "137.5";
      sa[187] = "137.6";
      sa[188] = "137.7";
      sa[189] = "137.9";
      sa[190] = "138";
      sa[191] = "138.1";
      sa[192] = "138.2";
      sa[193] = "138.3";
      sa[194] = "138.4";
      sa[195] = "138.6";
      sa[196] = "138.7";
      sa[197] = "139.1";
      sa[198] = "139.2";
      sa[199] = "139.3";
      sa[200] = "139.4";
      sa[201] = "139.5";
      sa[202] = "139.6";
      sa[203] = "139.8";
      sa[204] = "140";
      sa[205] = "140.1";
      sa[206] = "140.3";
      sa[207] = "140.5";
      sa[208] = "140.8";
      sa[209] = "141.1";
      sa[210] = "141.2";
      sa[211] = "141.5";
      sa[212] = "141.6";
      sa[213] = "141.7";
      sa[214] = "141.8";
      sa[215] = "141.9";
      sa[216] = "142";
      sa[217] = "142.1";
      sa[218] = "142.2";
      sa[219] = "142.3";
      sa[220] = "142.4";
      sa[221] = "142.6";
      sa[222] = "142.7";
      sa[223] = "142.8";
      sa[224] = "143";
      sa[225] = "143.1";
      sa[226] = "143.2";
      sa[227] = "143.3";
      sa[228] = "143.4";
      sa[229] = "143.6";
      sa[230] = "143.7";
      sa[231] = "143.9";
      sa[232] = "144";
      sa[233] = "144.1";
      sa[234] = "144.2";
      sa[235] = "144.4";
      sa[236] = "144.6";
      sa[237] = "144.7";
      sa[238] = "144.9";
      sa[239] = "145.1";
      sa[240] = "145.2";
      sa[241] = "145.4";
      sa[242] = "145.5";
      sa[243] = "145.7";
      sa[244] = "145.8";
      sa[245] = "146.2";
      sa[246] = "146.3";
      sa[247] = "146.4";
      sa[248] = "146.5";
      sa[249] = "146.7";
      sa[250] = "146.8";
      sa[251] = "146.9";
      sa[252] = "147";
      sa[253] = "147.1";
      sa[254] = "147.4";
      sa[255] = "147.5";
      sa[256] = "147.6";
      sa[257] = "147.7";
      sa[258] = "147.8";
      sa[259] = "147.9";
      sa[260] = "148";
      sa[261] = "148.1";
      sa[262] = "148.2";
      sa[263] = "148.4";
      sa[264] = "148.6";
      sa[265] = "148.7";
      sa[266] = "148.8";
      sa[267] = "149.2";
      sa[268] = "149.3";
      sa[269] = "149.4";
      sa[270] = "149.5";
      sa[271] = "149.7";
      sa[272] = "149.8";
      sa[273] = "149.9";
      sa[274] = "150";
      sa[275] = "150.2";
      sa[276] = "150.3";
      sa[277] = "150.4";
      sa[278] = "150.5";
      sa[279] = "150.6";
      sa[280] = "150.7";
      sa[281] = "150.8";
      sa[282] = "150.9";
      sa[283] = "151";
      sa[284] = "151.1";
      sa[285] = "151.2";
      sa[286] = "151.3";
      sa[287] = "151.5";
      sa[288] = "151.6";
      sa[289] = "151.7";
      sa[290] = "151.8";
      sa[291] = "151.9";
      sa[292] = "152.1";
      sa[293] = "152.2";
      sa[294] = "152.3";
      sa[295] = "152.4";
      sa[296] = "152.5";
      sa[297] = "152.6";
      sa[298] = "152.7";
      sa[299] = "152.8";
      sa[300] = "152.9";
      sa[301] = "153";
      sa[302] = "153.2";
      sa[303] = "153.3";
      sa[304] = "153.4";
      sa[305] = "153.5";
      sa[306] = "153.6";
      sa[307] = "153.7";
      sa[308] = "153.8";
      sa[309] = "153.9";
      sa[310] = "154";
      sa[311] = "154.1";
      sa[312] = "154.2";
      sa[313] = "154.3";
      sa[314] = "154.4";
      sa[315] = "154.5";
      sa[316] = "154.6";
      sa[317] = "154.7";
      sa[318] = "154.8";
      sa[319] = "154.9";
      sa[320] = "155";
      sa[321] = "155.1";
      sa[322] = "155.3";
      sa[323] = "155.5";
      sa[324] = "155.6";
      sa[325] = "155.7";
      sa[326] = "156.2";
      sa[327] = "156.3";
      sa[328] = "156.6";
      sa[329] = "156.7";
      sa[330] = "156.8";
      sa[331] = "156.9";
      sa[332] = "157";
      sa[333] = "157.2";
      sa[334] = "157.4";
      sa[335] = "157.6";
      sa[336] = "157.7";
      sa[337] = "157.8";
      sa[338] = "157.9";
      sa[339] = "158.1";
      sa[340] = "158.2";
      sa[341] = "158.4";
      sa[342] = "158.5";
      sa[343] = "158.6";
      sa[344] = "158.7";
      sa[345] = "158.8";
      sa[346] = "158.9";
      sa[347] = "159";
      sa[348] = "159.1";
      sa[349] = "159.4";
      sa[350] = "159.6";
      sa[351] = "159.7";
      sa[352] = "159.8";
      sa[353] = "160";
      sa[354] = "160.1";
      sa[355] = "160.2";
      sa[356] = "160.3";
      sa[357] = "160.4";
      sa[358] = "160.5";
      sa[359] = "160.6";
      sa[360] = "160.7";
      sa[361] = "160.8";
      sa[362] = "161";
      sa[363] = "161.1";
      sa[364] = "161.2";
      sa[365] = "161.3";
      sa[366] = "161.4";
      sa[367] = "161.5";
      sa[368] = "161.6";
      sa[369] = "161.8";
      sa[370] = "161.9";
      sa[371] = "162.1";
      sa[372] = "162.2";
      sa[373] = "162.4";
      sa[374] = "162.5";
      sa[375] = "162.6";
      sa[376] = "162.8";
      sa[377] = "162.9";
      sa[378] = "163";
      sa[379] = "163.1";
      sa[380] = "163.2";
      sa[381] = "163.3";
      sa[382] = "163.4";
      sa[383] = "163.5";
      sa[384] = "163.6";
      sa[385] = "163.7";
      sa[386] = "163.9";
      sa[387] = "164";
      sa[388] = "164.2";
      sa[389] = "164.3";
      sa[390] = "164.4";
      sa[391] = "164.5";
      sa[392] = "164.6";
      sa[393] = "164.7";
      sa[394] = "164.8";
      sa[395] = "164.9";
      sa[396] = "165";
      sa[397] = "165.1";
      sa[398] = "165.2";
      sa[399] = "165.3";
      sa[400] = "165.4";
      sa[401] = "165.5";
      sa[402] = "165.6";
      sa[403] = "165.7";
      sa[404] = "165.8";
      sa[405] = "165.9";
      sa[406] = "166";
      sa[407] = "166.1";
      sa[408] = "166.2";
      sa[409] = "166.3";
      sa[410] = "166.4";
      sa[411] = "166.5";
      sa[412] = "166.6";
      sa[413] = "166.7";
      sa[414] = "166.8";
      sa[415] = "166.9";
      sa[416] = "167";
      sa[417] = "167.1";
      sa[418] = "167.2";
      sa[419] = "167.3";
      sa[420] = "167.4";
      sa[421] = "167.5";
      sa[422] = "167.6";
      sa[423] = "167.7";
      sa[424] = "167.8";
      sa[425] = "167.9";
      sa[426] = "168";
      sa[427] = "168.2";
      sa[428] = "168.3";
      sa[429] = "168.4";
      sa[430] = "168.5";
      sa[431] = "168.6";
      sa[432] = "168.7";
      sa[433] = "168.8";
      sa[434] = "168.9";
      sa[435] = "169";
      sa[436] = "169.1";
      sa[437] = "169.2";
      sa[438] = "169.3";
      sa[439] = "169.4";
      sa[440] = "169.5";
      sa[441] = "169.6";
      sa[442] = "169.7";
      sa[443] = "169.8";
      sa[444] = "169.9";
      sa[445] = "170";
      sa[446] = "170.1";
      sa[447] = "170.2";
      sa[448] = "170.3";
      sa[449] = "170.5";
      sa[450] = "170.6";
      sa[451] = "170.7";
      sa[452] = "170.8";
      sa[453] = "170.9";
      sa[454] = "171";
      sa[455] = "171.2";
      sa[456] = "171.3";
      sa[457] = "171.4";
      sa[458] = "171.5";
      sa[459] = "171.6";
      sa[460] = "171.7";
      sa[461] = "171.8";
      sa[462] = "172";
      sa[463] = "172.1";
      sa[464] = "172.2";
      sa[465] = "172.3";
      sa[466] = "172.4";
      sa[467] = "172.5";
      sa[468] = "172.7";
      sa[469] = "172.8";
      sa[470] = "172.9";
      sa[471] = "173";
      sa[472] = "173.1";
      sa[473] = "173.2";
      sa[474] = "173.3";
      sa[475] = "173.4";
      sa[476] = "173.6";
      sa[477] = "173.8";
      sa[478] = "173.9";
      sa[479] = "174";
      sa[480] = "174.1";
      sa[481] = "174.2";
      sa[482] = "174.3";
      sa[483] = "174.4";
      sa[484] = "174.5";
      sa[485] = "174.6";
      sa[486] = "174.7";
      sa[487] = "174.8";
      sa[488] = "174.9";
      sa[489] = "175";
      sa[490] = "175.1";
      sa[491] = "175.2";
      sa[492] = "175.3";
      sa[493] = "175.4";
      sa[494] = "175.5";
      sa[495] = "175.7";
      sa[496] = "175.8";
      sa[497] = "175.9";
      sa[498] = "176";
      sa[499] = "176.1";
      sa[500] = "176.2";
      sa[501] = "176.3";
      sa[502] = "176.4";
      sa[503] = "176.6";
      sa[504] = "176.7";
      sa[505] = "176.9";
      sa[506] = "177.1";
      sa[507] = "177.3";
      sa[508] = "177.4";
      sa[509] = "177.5";
      sa[510] = "177.6";
      sa[511] = "177.7";
      sa[512] = "177.9";
      sa[513] = "178";
      sa[514] = "178.1";
      sa[515] = "178.2";
      sa[516] = "178.3";
      sa[517] = "178.4";
      sa[518] = "178.5";
      sa[519] = "178.6";
      sa[520] = "178.7";
      sa[521] = "178.8";
      sa[522] = "178.9";
      sa[523] = "179";
      sa[524] = "179.1";
      sa[525] = "179.2";
      sa[526] = "179.3";
      sa[527] = "179.4";
      sa[528] = "179.5";
      sa[529] = "179.6";
      sa[530] = "179.7";
      sa[531] = "179.8";
      sa[532] = "179.9";
      sa[533] = "180";
      sa[534] = "180.1";
      sa[535] = "180.2";
      sa[536] = "180.3";
      sa[537] = "180.4";
      sa[538] = "180.5";
      sa[539] = "180.6";
      sa[540] = "180.7";
      sa[541] = "180.8";
      sa[542] = "180.9";
      sa[543] = "181";
      sa[544] = "181.1";
      sa[545] = "181.2";
      sa[546] = "181.4";
      sa[547] = "181.5";
      sa[548] = "181.6";
      sa[549] = "181.7";
      sa[550] = "181.8";
      sa[551] = "181.9";
      sa[552] = "182.1";
      sa[553] = "182.2";
      sa[554] = "182.3";
      sa[555] = "182.4";
      sa[556] = "182.5";
      sa[557] = "182.6";
      sa[558] = "182.7";
      sa[559] = "182.9";
      sa[560] = "183";
      sa[561] = "183.1";
      sa[562] = "183.3";
      sa[563] = "183.4";
      sa[564] = "183.5";
      sa[565] = "183.8";
      sa[566] = "183.9";
      sa[567] = "184";
      sa[568] = "184.1";
      sa[569] = "184.2";
      sa[570] = "184.3";
      sa[571] = "184.4";
      sa[572] = "184.5";
      sa[573] = "184.6";
      sa[574] = "184.7";
      sa[575] = "184.8";
      sa[576] = "184.9";
      sa[577] = "185";
      sa[578] = "185.1";
      sa[579] = "185.2";
      sa[580] = "185.3";
      sa[581] = "185.4";
      sa[582] = "185.5";
      sa[583] = "185.6";
      sa[584] = "185.7";
      sa[585] = "185.8";
      sa[586] = "185.9";
      sa[587] = "186";
      sa[588] = "186.1";
      sa[589] = "186.2";
      sa[590] = "186.3";
      sa[591] = "186.4";
      sa[592] = "186.5";
      sa[593] = "186.6";
      sa[594] = "186.7";
      sa[595] = "186.8";
      sa[596] = "186.9";
      sa[597] = "187.1";
      sa[598] = "187.2";
      sa[599] = "187.3";
      sa[600] = "187.4";
      sa[601] = "187.5";
      sa[602] = "187.6";
      sa[603] = "187.7";
      sa[604] = "187.8";
      sa[605] = "187.9";
      sa[606] = "188";
      sa[607] = "188.1";
      sa[608] = "188.2";
      sa[609] = "188.3";
      sa[610] = "188.4";
      sa[611] = "188.5";
      sa[612] = "188.6";
      sa[613] = "188.7";
      sa[614] = "188.8";
      sa[615] = "188.9";
      sa[616] = "189";
      sa[617] = "189.1";
      sa[618] = "189.2";
      sa[619] = "189.3";
      sa[620] = "189.4";
      sa[621] = "189.5";
      sa[622] = "189.6";
      sa[623] = "189.7";
      sa[624] = "189.8";
      sa[625] = "189.9";
      sa[626] = "190";
      sa[627] = "190.1";
      sa[628] = "190.4";
      sa[629] = "190.5";
      sa[630] = "190.6";
      sa[631] = "190.7";
      sa[632] = "190.8";
      sa[633] = "190.9";
      sa[634] = "191";
      sa[635] = "191.1";
      sa[636] = "191.2";
      sa[637] = "191.3";
      sa[638] = "191.4";
      sa[639] = "191.5";
      sa[640] = "191.6";
      sa[641] = "191.7";
      sa[642] = "191.8";
      sa[643] = "191.9";
      sa[644] = "192";
      sa[645] = "192.1";
      sa[646] = "192.2";
      sa[647] = "192.3";
      sa[648] = "192.4";
      sa[649] = "192.5";
      sa[650] = "192.6";
      sa[651] = "192.7";
      sa[652] = "192.8";
      sa[653] = "192.9";
      sa[654] = "193";
      sa[655] = "193.1";
      sa[656] = "193.2";
      sa[657] = "193.3";
      sa[658] = "193.4";
      sa[659] = "193.5";
      sa[660] = "193.6";
      sa[661] = "193.7";
      sa[662] = "193.8";
      sa[663] = "193.9";
      sa[664] = "194";
      sa[665] = "194.1";
      sa[666] = "194.2";
      sa[667] = "194.3";
      sa[668] = "194.4";
      sa[669] = "194.5";
      sa[670] = "194.6";
      sa[671] = "194.7";
      sa[672] = "194.8";
      sa[673] = "194.9";
      sa[674] = "195";
      sa[675] = "195.1";
      sa[676] = "195.2";
      sa[677] = "195.3";
      sa[678] = "195.4";
      sa[679] = "195.5";
      sa[680] = "195.6";
      sa[681] = "195.7";
      sa[682] = "195.9";
      sa[683] = "196";
      sa[684] = "196.1";
      sa[685] = "196.2";
      sa[686] = "196.3";
      sa[687] = "196.5";
      sa[688] = "196.7";
      sa[689] = "196.8";
      sa[690] = "196.9";
      sa[691] = "197";
      sa[692] = "197.1";
      sa[693] = "197.2";
      sa[694] = "197.3";
      sa[695] = "197.4";
      sa[696] = "197.5";
      sa[697] = "197.6";
      sa[698] = "197.7";
      sa[699] = "197.8";
      sa[700] = "197.9";
      sa[701] = "198";
      sa[702] = "198.1";
      sa[703] = "198.4";
      sa[704] = "198.5";
      sa[705] = "198.6";
      sa[706] = "198.7";
      sa[707] = "198.8";
      sa[708] = "198.9";
      sa[709] = "199";
      sa[710] = "199.1";
      sa[711] = "199.2";
      sa[712] = "199.3";
      sa[713] = "199.4";
      sa[714] = "199.5";
      sa[715] = "199.7";
      sa[716] = "199.8";
      sa[717] = "200";
      sa[718] = "200.1";
      sa[719] = "200.4";
      sa[720] = "200.5";
      sa[721] = "200.6";
      sa[722] = "200.7";
      sa[723] = "200.8";
      sa[724] = "200.9";
      sa[725] = "201";
      sa[726] = "201.1";
      sa[727] = "201.2";
      sa[728] = "201.3";
      sa[729] = "201.4";
      sa[730] = "201.6";
      sa[731] = "201.7";
      sa[732] = "201.8";
      sa[733] = "201.9";
      sa[734] = "202";
      sa[735] = "202.1";
      sa[736] = "202.2";
      sa[737] = "202.3";
      sa[738] = "202.4";
      sa[739] = "202.5";
      sa[740] = "202.6";
      sa[741] = "202.7";
      sa[742] = "202.8";
      sa[743] = "203";
      sa[744] = "203.1";
      sa[745] = "203.2";
      sa[746] = "203.3";
      sa[747] = "203.4";
      sa[748] = "203.5";
      sa[749] = "203.6";
      sa[750] = "203.7";
      sa[751] = "203.8";
      sa[752] = "203.9";
      sa[753] = "204";
      sa[754] = "204.1";
      sa[755] = "204.2";
      sa[756] = "204.3";
      sa[757] = "204.4";
      sa[758] = "204.6";
      sa[759] = "204.7";
      sa[760] = "204.8";
      sa[761] = "205";
      sa[762] = "205.1";
      sa[763] = "205.2";
      sa[764] = "205.3";
      sa[765] = "205.5";
      sa[766] = "205.6";
      sa[767] = "205.7";
      sa[768] = "205.8";
      sa[769] = "205.9";
      sa[770] = "206";
      sa[771] = "206.1";
      sa[772] = "206.2";
      sa[773] = "206.3";
      sa[774] = "206.4";
      sa[775] = "206.5";
      sa[776] = "206.6";
      sa[777] = "206.7";
      sa[778] = "206.8";
      sa[779] = "206.9";
      sa[780] = "207";
      sa[781] = "207.1";
      sa[782] = "207.2";
      sa[783] = "207.3";
      sa[784] = "207.4";
      sa[785] = "207.5";
      sa[786] = "207.6";
      sa[787] = "207.7";
      sa[788] = "207.8";
      sa[789] = "207.9";
      sa[790] = "208";
      sa[791] = "208.1";
      sa[792] = "208.2";
      sa[793] = "208.3";
      sa[794] = "208.4";
      sa[795] = "208.5";
      sa[796] = "208.6";
      sa[797] = "208.7";
      sa[798] = "208.8";
      sa[799] = "208.9";
      sa[800] = "209";
      sa[801] = "209.2";
      sa[802] = "209.3";
      sa[803] = "209.5";
      sa[804] = "209.6";
      sa[805] = "209.7";
      sa[806] = "209.9";
      sa[807] = "210";
      sa[808] = "210.1";
      sa[809] = "210.2";
      sa[810] = "210.3";
      sa[811] = "210.4";
      sa[812] = "210.5";
      sa[813] = "210.6";
      sa[814] = "210.7";
      sa[815] = "210.8";
      sa[816] = "211";
      sa[817] = "211.1";
      sa[818] = "211.2";
      sa[819] = "211.3";
      sa[820] = "211.4";
      sa[821] = "211.5";
      sa[822] = "211.6";
      sa[823] = "211.7";
      sa[824] = "211.8";
      sa[825] = "211.9";
      sa[826] = "212";
      sa[827] = "212.1";
      sa[828] = "212.2";
      sa[829] = "212.3";
      sa[830] = "212.4";
      sa[831] = "212.5";
      sa[832] = "212.6";
      sa[833] = "212.7";
      sa[834] = "212.8";
      sa[835] = "212.9";
      sa[836] = "213.1";
      sa[837] = "213.2";
      sa[838] = "213.3";
      sa[839] = "213.4";
      sa[840] = "213.5";
      sa[841] = "213.6";
      sa[842] = "213.7";
      sa[843] = "213.8";
      sa[844] = "213.9";
      sa[845] = "214";
      sa[846] = "214.1";
      sa[847] = "214.2";
      sa[848] = "214.3";
      sa[849] = "214.4";
      sa[850] = "214.5";
      sa[851] = "214.6";
      sa[852] = "214.7";
      sa[853] = "214.8";
      sa[854] = "214.9";
      sa[855] = "215.1";
      sa[856] = "215.3";
      sa[857] = "215.4";
      sa[858] = "215.5";
      sa[859] = "215.6";
      sa[860] = "215.7";
      sa[861] = "215.8";
      sa[862] = "215.9";
      sa[863] = "216";
      sa[864] = "216.1";
      sa[865] = "216.2";
      sa[866] = "216.3";
      sa[867] = "216.4";
      sa[868] = "216.5";
      sa[869] = "216.6";
      sa[870] = "216.7";
      sa[871] = "216.8";
      sa[872] = "216.9";
      sa[873] = "217";
      sa[874] = "217.1";
      sa[875] = "217.2";
      sa[876] = "217.4";
      sa[877] = "217.5";
      sa[878] = "217.6";
      sa[879] = "217.7";
      sa[880] = "217.8";
      sa[881] = "217.9";
      sa[882] = "218";
      sa[883] = "218.2";
      sa[884] = "218.3";
      sa[885] = "218.4";
      sa[886] = "218.5";
      sa[887] = "218.6";
      sa[888] = "218.7";
      sa[889] = "218.8";
      sa[890] = "218.9";
      sa[891] = "219";
      sa[892] = "219.1";
      sa[893] = "219.3";
      sa[894] = "219.4";
      sa[895] = "219.5";
      sa[896] = "219.6";
      sa[897] = "219.7";
      sa[898] = "219.8";
      sa[899] = "219.9";
      sa[900] = "220";
      sa[901] = "220.1";
      sa[902] = "220.2";
      sa[903] = "220.3";
      sa[904] = "220.4";
      sa[905] = "220.6";
      sa[906] = "220.8";
      sa[907] = "220.9";
      sa[908] = "221";
      sa[909] = "221.1";
      sa[910] = "221.2";
      sa[911] = "221.3";
      sa[912] = "221.4";
      sa[913] = "221.5";
      sa[914] = "221.6";
      sa[915] = "221.7";
      sa[916] = "221.8";
      sa[917] = "221.9";
      sa[918] = "222.1";
      sa[919] = "222.2";
      sa[920] = "222.3";
      sa[921] = "222.4";
      sa[922] = "222.5";
      sa[923] = "222.6";
      sa[924] = "222.7";
      sa[925] = "222.8";
      sa[926] = "223";
      sa[927] = "223.1";
      sa[928] = "223.2";
      sa[929] = "223.3";
      sa[930] = "223.5";
      sa[931] = "223.6";
      sa[932] = "223.7";
      sa[933] = "223.8";
      sa[934] = "223.9";
      sa[935] = "224";
      sa[936] = "224.1";
      sa[937] = "224.2";
      sa[938] = "224.3";
      sa[939] = "224.5";
      sa[940] = "224.6";
      sa[941] = "224.7";
      sa[942] = "224.8";
      sa[943] = "224.9";
      sa[944] = "225.1";
      sa[945] = "225.2";
      sa[946] = "225.3";
      sa[947] = "225.5";
      sa[948] = "225.6";
      sa[949] = "225.7";
      sa[950] = "225.8";
      sa[951] = "225.9";
      sa[952] = "226";
      sa[953] = "226.1";
      sa[954] = "226.2";
      sa[955] = "226.3";
      sa[956] = "226.4";
      sa[957] = "226.5";
      sa[958] = "226.6";
      sa[959] = "226.7";
      sa[960] = "226.9";
      sa[961] = "227";
      sa[962] = "227.1";
      sa[963] = "227.2";
      sa[964] = "227.3";
      sa[965] = "227.4";
      sa[966] = "227.5";
      sa[967] = "227.6";
      sa[968] = "227.7";
      sa[969] = "227.8";
      sa[970] = "228";
      sa[971] = "228.1";
      sa[972] = "228.2";
      sa[973] = "228.3";
      sa[974] = "228.4";
      sa[975] = "228.5";
      sa[976] = "228.6";
      sa[977] = "228.7";
      sa[978] = "228.9";
      sa[979] = "229";
      sa[980] = "229.1";
      sa[981] = "229.2";
      sa[982] = "229.4";
      sa[983] = "229.5";
      sa[984] = "229.6";
      sa[985] = "229.7";
      sa[986] = "229.8";
      sa[987] = "229.9";
      sa[988] = "23.2";
      sa[989] = "230";
      sa[990] = "230.1";
      sa[991] = "230.2";
      sa[992] = "230.4";
      sa[993] = "230.5";
      sa[994] = "230.6";
      sa[995] = "230.7";
      sa[996] = "230.8";
      sa[997] = "230.9";
      sa[998] = "231.1";
      sa[999] = "231.2";
      sa[1000] = "231.3";
      sa[1001] = "231.4";
      sa[1002] = "231.5";
      sa[1003] = "231.6";
      sa[1004] = "231.7";
      sa[1005] = "231.8";
      sa[1006] = "231.9";
      sa[1007] = "232";
      sa[1008] = "232.1";
      sa[1009] = "232.2";
      sa[1010] = "232.3";
      sa[1011] = "232.4";
      sa[1012] = "232.5";
      sa[1013] = "232.6";
      sa[1014] = "232.7";
      sa[1015] = "232.8";
      sa[1016] = "232.9";
      sa[1017] = "233";
      sa[1018] = "233.1";
      sa[1019] = "233.2";
      sa[1020] = "233.3";
      sa[1021] = "233.4";
      sa[1022] = "233.5";
      sa[1023] = "233.6";
      sa[1024] = "233.7";
      sa[1025] = "233.8";
      sa[1026] = "234";
      sa[1027] = "234.2";
      sa[1028] = "234.3";
      sa[1029] = "234.5";
      sa[1030] = "234.7";
      sa[1031] = "234.8";
      sa[1032] = "234.9";
      sa[1033] = "235";
      sa[1034] = "235.1";
      sa[1035] = "235.2";
      sa[1036] = "235.3";
      sa[1037] = "235.4";
      sa[1038] = "235.5";
      sa[1039] = "235.6";
      sa[1040] = "235.7";
      sa[1041] = "235.8";
      sa[1042] = "236";
      sa[1043] = "236.1";
      sa[1044] = "236.2";
      sa[1045] = "236.3";
      sa[1046] = "236.4";
      sa[1047] = "236.5";
      sa[1048] = "236.6";
      sa[1049] = "236.7";
      sa[1050] = "236.8";
      sa[1051] = "236.9";
      sa[1052] = "237";
      sa[1053] = "237.3";
      sa[1054] = "237.4";
      sa[1055] = "237.5";
      sa[1056] = "237.6";
      sa[1057] = "237.7";
      sa[1058] = "237.9";
      sa[1059] = "238";
      sa[1060] = "238.2";
      sa[1061] = "238.4";
      sa[1062] = "238.5";
      sa[1063] = "238.6";
      sa[1064] = "238.7";
      sa[1065] = "238.8";
      sa[1066] = "238.9";
      sa[1067] = "239.1";
      sa[1068] = "239.2";
      sa[1069] = "239.3";
      sa[1070] = "239.4";
      sa[1071] = "239.5";
      sa[1072] = "239.6";
      sa[1073] = "239.7";
      sa[1074] = "239.8";
      sa[1075] = "239.9";
      sa[1076] = "240";
      sa[1077] = "240.1";
      sa[1078] = "240.2";
      sa[1079] = "240.3";
      sa[1080] = "240.4";
      sa[1081] = "240.5";
      sa[1082] = "240.6";
      sa[1083] = "240.7";
      sa[1084] = "240.8";
      sa[1085] = "241";
      sa[1086] = "241.1";
      sa[1087] = "241.2";
      sa[1088] = "241.3";
      sa[1089] = "241.4";
      sa[1090] = "241.5";
      sa[1091] = "241.6";
      sa[1092] = "241.7";
      sa[1093] = "241.8";
      sa[1094] = "242";
      sa[1095] = "242.1";
      sa[1096] = "242.2";
      sa[1097] = "242.3";
      sa[1098] = "242.6";
      sa[1099] = "242.7";
      sa[1100] = "242.8";
      sa[1101] = "242.9";
      sa[1102] = "243";
      sa[1103] = "243.1";
      sa[1104] = "243.2";
      sa[1105] = "243.3";
      sa[1106] = "243.4";
      sa[1107] = "243.5";
      sa[1108] = "243.6";
      sa[1109] = "243.7";
      sa[1110] = "243.9";
      sa[1111] = "244";
      sa[1112] = "244.1";
      sa[1113] = "244.2";
      sa[1114] = "244.3";
      sa[1115] = "244.4";
      sa[1116] = "244.6";
      sa[1117] = "244.7";
      sa[1118] = "244.8";
      sa[1119] = "244.9";
      sa[1120] = "245";
      sa[1121] = "245.1";
      sa[1122] = "245.2";
      sa[1123] = "245.3";
      sa[1124] = "245.4";
      sa[1125] = "245.5";
      sa[1126] = "245.7";
      sa[1127] = "245.8";
      sa[1128] = "245.9";
      sa[1129] = "246";
      sa[1130] = "246.1";
      sa[1131] = "246.2";
      sa[1132] = "246.4";
      sa[1133] = "246.5";
      sa[1134] = "246.7";
      sa[1135] = "246.8";
      sa[1136] = "246.9";
      sa[1137] = "247";
      sa[1138] = "247.1";
      sa[1139] = "247.2";
      sa[1140] = "247.3";
      sa[1141] = "247.4";
      sa[1142] = "247.5";
      sa[1143] = "247.6";
      sa[1144] = "247.8";
      sa[1145] = "247.9";
      sa[1146] = "248.1";
      sa[1147] = "248.2";
      sa[1148] = "248.3";
      sa[1149] = "248.5";
      sa[1150] = "248.6";
      sa[1151] = "248.7";
      sa[1152] = "248.9";
      sa[1153] = "249";
      sa[1154] = "249.1";
      sa[1155] = "249.2";
      sa[1156] = "249.4";
      sa[1157] = "249.5";
      sa[1158] = "249.6";
      sa[1159] = "249.7";
      sa[1160] = "249.9";
      sa[1161] = "250";
      sa[1162] = "250.1";
      sa[1163] = "250.2";
      sa[1164] = "250.3";
      sa[1165] = "250.5";
      sa[1166] = "250.6";
      sa[1167] = "250.7";
      sa[1168] = "250.8";
      sa[1169] = "250.9";
      sa[1170] = "251.2";
      sa[1171] = "251.3";
      sa[1172] = "251.4";
      sa[1173] = "251.5";
      sa[1174] = "251.6";
      sa[1175] = "251.7";
      sa[1176] = "251.9";
      sa[1177] = "252";
      sa[1178] = "252.1";
      sa[1179] = "252.2";
      sa[1180] = "252.3";
      sa[1181] = "252.4";
      sa[1182] = "252.5";
      sa[1183] = "252.7";
      sa[1184] = "252.9";
      sa[1185] = "253";
      sa[1186] = "253.1";
      sa[1187] = "253.2";
      sa[1188] = "253.4";
      sa[1189] = "253.5";
      sa[1190] = "253.6";
      sa[1191] = "253.7";
      sa[1192] = "253.8";
      sa[1193] = "253.9";
      sa[1194] = "254";
      sa[1195] = "254.1";
      sa[1196] = "254.2";
      sa[1197] = "254.3";
      sa[1198] = "254.4";
      sa[1199] = "254.6";
      sa[1200] = "254.7";
      sa[1201] = "254.8";
      sa[1202] = "254.9";
      sa[1203] = "255";
      sa[1204] = "255.1";
      sa[1205] = "255.2";
      sa[1206] = "255.3";
      sa[1207] = "255.4";
      sa[1208] = "255.5";
      sa[1209] = "255.6";
      sa[1210] = "255.7";
      sa[1211] = "255.8";
      sa[1212] = "255.9";
      sa[1213] = "256";
      sa[1214] = "256.1";
      sa[1215] = "256.2";
      sa[1216] = "256.3";
      sa[1217] = "256.4";
      sa[1218] = "256.5";
      sa[1219] = "256.6";
      sa[1220] = "256.7";
      sa[1221] = "256.9";
      sa[1222] = "257";
      sa[1223] = "257.1";
      sa[1224] = "257.2";
      sa[1225] = "257.4";
      sa[1226] = "257.5";
      sa[1227] = "257.6";
      sa[1228] = "257.9";
      sa[1229] = "258";
      sa[1230] = "258.2";
      sa[1231] = "258.3";
      sa[1232] = "258.4";
      sa[1233] = "258.5";
      sa[1234] = "258.6";
      sa[1235] = "258.8";
      sa[1236] = "259";
      sa[1237] = "259.2";
      sa[1238] = "259.3";
      sa[1239] = "259.5";
      sa[1240] = "259.6";
      sa[1241] = "259.7";
      sa[1242] = "259.8";
      sa[1243] = "259.9";
      sa[1244] = "260";
      sa[1245] = "260.1";
      sa[1246] = "260.2";
      sa[1247] = "260.4";
      sa[1248] = "260.6";
      sa[1249] = "260.7";
      sa[1250] = "260.8";
      sa[1251] = "260.9";
      sa[1252] = "261.2";
      sa[1253] = "261.3";
      sa[1254] = "261.4";
      sa[1255] = "261.5";
      sa[1256] = "261.6";
      sa[1257] = "261.7";
      sa[1258] = "261.8";
      sa[1259] = "261.9";
      sa[1260] = "262";
      sa[1261] = "262.1";
      sa[1262] = "262.2";
      sa[1263] = "262.4";
      sa[1264] = "262.6";
      sa[1265] = "262.7";
      sa[1266] = "262.8";
      sa[1267] = "262.9";
      sa[1268] = "263.2";
      sa[1269] = "263.3";
      sa[1270] = "263.4";
      sa[1271] = "263.6";
      sa[1272] = "263.7";
      sa[1273] = "263.8";
      sa[1274] = "263.9";
      sa[1275] = "264";
      sa[1276] = "264.1";
      sa[1277] = "264.2";
      sa[1278] = "264.3";
      sa[1279] = "264.4";
      sa[1280] = "264.5";
      sa[1281] = "264.6";
      sa[1282] = "264.7";
      sa[1283] = "264.8";
      sa[1284] = "264.9";
      sa[1285] = "265";
      sa[1286] = "265.2";
      sa[1287] = "265.3";
      sa[1288] = "265.4";
      sa[1289] = "265.5";
      sa[1290] = "265.7";
      sa[1291] = "265.9";
      sa[1292] = "266";
      sa[1293] = "266.2";
      sa[1294] = "266.3";
      sa[1295] = "266.6";
      sa[1296] = "266.7";
      sa[1297] = "266.9";
      sa[1298] = "267.1";
      sa[1299] = "267.4";
      sa[1300] = "267.6";
      sa[1301] = "267.9";
      sa[1302] = "268";
      sa[1303] = "268.1";
      sa[1304] = "268.2";
      sa[1305] = "268.3";
      sa[1306] = "268.4";
      sa[1307] = "268.5";
      sa[1308] = "268.6";
      sa[1309] = "268.7";
      sa[1310] = "268.8";
      sa[1311] = "268.9";
      sa[1312] = "269";
      sa[1313] = "269.1";
      sa[1314] = "269.2";
      sa[1315] = "269.3";
      sa[1316] = "269.5";
      sa[1317] = "269.6";
      sa[1318] = "269.7";
      sa[1319] = "269.8";
      sa[1320] = "269.9";
      sa[1321] = "270";
      sa[1322] = "270.1";
      sa[1323] = "270.2";
      sa[1324] = "270.4";
      sa[1325] = "270.6";
      sa[1326] = "270.9";
      sa[1327] = "271.2";
      sa[1328] = "271.3";
      sa[1329] = "271.5";
      sa[1330] = "271.7";
      sa[1331] = "271.8";
      sa[1332] = "271.9";
      sa[1333] = "272";
      sa[1334] = "272.1";
      sa[1335] = "272.4";
      sa[1336] = "272.6";
      sa[1337] = "272.8";
      sa[1338] = "272.9";
      sa[1339] = "273";
      sa[1340] = "273.1";
      sa[1341] = "273.2";
      sa[1342] = "273.4";
      sa[1343] = "273.7";
      sa[1344] = "274";
      sa[1345] = "274.2";
      sa[1346] = "274.4";
      sa[1347] = "274.7";
      sa[1348] = "274.9";
      sa[1349] = "275";
      sa[1350] = "275.2";
      sa[1351] = "275.4";
      sa[1352] = "275.5";
      sa[1353] = "275.6";
      sa[1354] = "275.8";
      sa[1355] = "275.9";
      sa[1356] = "276.6";
      sa[1357] = "276.7";
      sa[1358] = "276.9";
      sa[1359] = "277.3";
      sa[1360] = "277.4";
      sa[1361] = "277.6";
      sa[1362] = "277.8";
      sa[1363] = "278.2";
      sa[1364] = "278.4";
      sa[1365] = "278.5";
      sa[1366] = "279.2";
      sa[1367] = "279.5";
      sa[1368] = "279.6";
      sa[1369] = "279.8";
      sa[1370] = "280";
      sa[1371] = "280.2";
      sa[1372] = "280.4";
      sa[1373] = "280.5";
      sa[1374] = "280.7";
      sa[1375] = "280.8";
      sa[1376] = "280.9";
      sa[1377] = "281.1";
      sa[1378] = "281.3";
      sa[1379] = "281.4";
      sa[1380] = "281.5";
      sa[1381] = "281.8";
      sa[1382] = "281.9";
      sa[1383] = "282.2";
      sa[1384] = "282.3";
      sa[1385] = "282.5";
      sa[1386] = "282.6";
      sa[1387] = "282.8";
      sa[1388] = "282.9";
      sa[1389] = "283.2";
      sa[1390] = "283.4";
      sa[1391] = "283.6";
      sa[1392] = "283.7";
      sa[1393] = "284.4";
      sa[1394] = "284.5";
      sa[1395] = "284.6";
      sa[1396] = "284.7";
      sa[1397] = "285";
      sa[1398] = "285.1";
      sa[1399] = "285.3";
      sa[1400] = "285.4";
      sa[1401] = "285.5";
      sa[1402] = "285.7";
      sa[1403] = "285.9";
      sa[1404] = "286.2";
      sa[1405] = "286.3";
      sa[1406] = "286.5";
      sa[1407] = "286.7";
      sa[1408] = "286.9";
      sa[1409] = "287.4";
      sa[1410] = "287.6";
      sa[1411] = "287.7";
      sa[1412] = "287.8";
      sa[1413] = "288";
      sa[1414] = "288.1";
      sa[1415] = "288.8";
      sa[1416] = "288.9";
      sa[1417] = "289.2";
      sa[1418] = "289.3";
      sa[1419] = "289.4";
      sa[1420] = "289.5";
      sa[1421] = "289.6";
      sa[1422] = "289.9";
      sa[1423] = "290";
      sa[1424] = "291";
      sa[1425] = "291.2";
      sa[1426] = "291.6";
      sa[1427] = "291.8";
      sa[1428] = "292.1";
      sa[1429] = "292.4";
      sa[1430] = "292.7";
      sa[1431] = "292.8";
      sa[1432] = "293.3";
      sa[1433] = "293.5";
      sa[1434] = "293.7";
      sa[1435] = "293.9";
      sa[1436] = "294.5";
      sa[1437] = "294.6";
      sa[1438] = "294.7";
      sa[1439] = "294.8";
      sa[1440] = "295.3";
      sa[1441] = "295.6";
      sa[1442] = "295.8";
      sa[1443] = "296.3";
      sa[1444] = "297";
      sa[1445] = "297.1";
      sa[1446] = "297.9";
      sa[1447] = "298.2";
      sa[1448] = "298.9";
      sa[1449] = "299";
      sa[1450] = "299.3";
      sa[1451] = "299.6";
      sa[1452] = "299.7";
      sa[1453] = "300";
      sa[1454] = "300.7";
      sa[1455] = "301.7";
      sa[1456] = "302";
      sa[1457] = "302.2";
      sa[1458] = "302.8";
      sa[1459] = "303.5";
      sa[1460] = "304.2";
      sa[1461] = "304.3";
      sa[1462] = "304.4";
      sa[1463] = "305.4";
      sa[1464] = "305.5";
      sa[1465] = "306.2";
      sa[1466] = "306.3";
      sa[1467] = "306.6";
      sa[1468] = "307.1";
      sa[1469] = "307.6";
      sa[1470] = "308.2";
      sa[1471] = "308.9";
      sa[1472] = "309.1";
      sa[1473] = "309.2";
      sa[1474] = "309.6";
      sa[1475] = "310.1";
      sa[1476] = "310.5";
      sa[1477] = "310.7";
      sa[1478] = "311.1";
      sa[1479] = "311.5";
      sa[1480] = "311.6";
      sa[1481] = "311.8";
      sa[1482] = "312.1";
      sa[1483] = "312.5";
      sa[1484] = "312.8";
      sa[1485] = "313.2";
      sa[1486] = "313.4";
      sa[1487] = "314.1";
      sa[1488] = "315";
      sa[1489] = "316.7";
      sa[1490] = "317.8";
      sa[1491] = "318.3";
      sa[1492] = "320.7";
      sa[1493] = "321.2";
      sa[1494] = "321.3";
      sa[1495] = "322.2";
      sa[1496] = "323";
      sa[1497] = "323.5";
      sa[1498] = "325.6";
      sa[1499] = "325.9";
      sa[1500] = "326";
      sa[1501] = "326.4";
      sa[1502] = "328.5";
      sa[1503] = "329.2";
      sa[1504] = "329.3";
      sa[1505] = "332.7";
      sa[1506] = "333.5";
      sa[1507] = "334.7";
      sa[1508] = "342.8";
      sa[1509] = "344.3";
      sa[1510] = "345.8";
      sa[1511] = "349.2";
      sa[1512] = "349.7";
      sa[1513] = "350.2";
      sa[1514] = "352.2";
      sa[1515] = "352.5";
      sa[1516] = "354.9";
      sa[1517] = "364.3";
      sa[1518] = "364.9";
      sa[1519] = "367.7";
      sa[1520] = "377.5";
      sa[1521] = "381.9";
      sa[1522] = "395";
      sa[1523] = "43.7";
      sa[1524] = "45";
      sa[1525] = "47.4";
      sa[1526] = "50.1";
      sa[1527] = "53.3";
      sa[1528] = "54";
      sa[1529] = "54.5";
      sa[1530] = "56.6";
      sa[1531] = "57.5";
      sa[1532] = "61.4";
      sa[1533] = "63.3";
      sa[1534] = "63.6";
      sa[1535] = "64.2";
      sa[1536] = "65.7";
      sa[1537] = "65.8";
      sa[1538] = "67.7";
      sa[1539] = "70.6";
      sa[1540] = "71.1";
      sa[1541] = "72.2";
      sa[1542] = "72.4";
      sa[1543] = "73.2";
      sa[1544] = "73.7";
      sa[1545] = "75.8";
      sa[1546] = "76.4";
      sa[1547] = "76.5";
      sa[1548] = "77.2";
      sa[1549] = "77.3";
      sa[1550] = "77.9";
      sa[1551] = "78.1";
      sa[1552] = "79.3";
      sa[1553] = "79.7";
      sa[1554] = "79.9";
      sa[1555] = "80.2";
      sa[1556] = "81.6";
      sa[1557] = "82.3";
      sa[1558] = "82.4";
      sa[1559] = "83.9";
      sa[1560] = "84.8";
      sa[1561] = "85.8";
      sa[1562] = "87.4";
      sa[1563] = "87.5";
      sa[1564] = "88.2";
      sa[1565] = "88.7";
      sa[1566] = "89.3";
      sa[1567] = "89.6";
      sa[1568] = "89.7";
      sa[1569] = "90.9";
      sa[1570] = "91.2";
      sa[1571] = "91.6";
      sa[1572] = "94";
      sa[1573] = "94.1";
      sa[1574] = "94.3";
      sa[1575] = "94.4";
      sa[1576] = "94.9";
      sa[1577] = "95";
      sa[1578] = "95.1";
      sa[1579] = "95.3";
      sa[1580] = "95.6";
      sa[1581] = "96.4";
      sa[1582] = "97.4";
      sa[1583] = "98";
      sa[1584] = "98.2";
      sa[1585] = "98.3";
      sa[1586] = "98.6";
      sa[1587] = "98.9";
      sa[1588] = "99";
      sa[1589] = "99.3";
    }
  }
}
// The class representing column night_calls
class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_9 {
  public static final String[] VALUES = new String[120];
  static {
    GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_9_0.fill(VALUES);
  }
  static final class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_9_0 {
    static final void fill(String[] sa) {
      sa[0] = "100";
      sa[1] = "101";
      sa[2] = "102";
      sa[3] = "103";
      sa[4] = "104";
      sa[5] = "105";
      sa[6] = "106";
      sa[7] = "107";
      sa[8] = "108";
      sa[9] = "109";
      sa[10] = "110";
      sa[11] = "111";
      sa[12] = "112";
      sa[13] = "113";
      sa[14] = "114";
      sa[15] = "115";
      sa[16] = "116";
      sa[17] = "117";
      sa[18] = "118";
      sa[19] = "119";
      sa[20] = "120";
      sa[21] = "121";
      sa[22] = "122";
      sa[23] = "123";
      sa[24] = "124";
      sa[25] = "125";
      sa[26] = "126";
      sa[27] = "127";
      sa[28] = "128";
      sa[29] = "129";
      sa[30] = "130";
      sa[31] = "131";
      sa[32] = "132";
      sa[33] = "133";
      sa[34] = "134";
      sa[35] = "135";
      sa[36] = "136";
      sa[37] = "137";
      sa[38] = "138";
      sa[39] = "139";
      sa[40] = "140";
      sa[41] = "141";
      sa[42] = "142";
      sa[43] = "143";
      sa[44] = "144";
      sa[45] = "145";
      sa[46] = "146";
      sa[47] = "147";
      sa[48] = "148";
      sa[49] = "149";
      sa[50] = "150";
      sa[51] = "151";
      sa[52] = "152";
      sa[53] = "153";
      sa[54] = "154";
      sa[55] = "155";
      sa[56] = "156";
      sa[57] = "157";
      sa[58] = "158";
      sa[59] = "164";
      sa[60] = "166";
      sa[61] = "175";
      sa[62] = "33";
      sa[63] = "36";
      sa[64] = "38";
      sa[65] = "42";
      sa[66] = "44";
      sa[67] = "46";
      sa[68] = "48";
      sa[69] = "49";
      sa[70] = "50";
      sa[71] = "51";
      sa[72] = "52";
      sa[73] = "53";
      sa[74] = "54";
      sa[75] = "55";
      sa[76] = "56";
      sa[77] = "57";
      sa[78] = "58";
      sa[79] = "59";
      sa[80] = "60";
      sa[81] = "61";
      sa[82] = "62";
      sa[83] = "63";
      sa[84] = "64";
      sa[85] = "65";
      sa[86] = "66";
      sa[87] = "67";
      sa[88] = "68";
      sa[89] = "69";
      sa[90] = "70";
      sa[91] = "71";
      sa[92] = "72";
      sa[93] = "73";
      sa[94] = "74";
      sa[95] = "75";
      sa[96] = "76";
      sa[97] = "77";
      sa[98] = "78";
      sa[99] = "79";
      sa[100] = "80";
      sa[101] = "81";
      sa[102] = "82";
      sa[103] = "83";
      sa[104] = "84";
      sa[105] = "85";
      sa[106] = "86";
      sa[107] = "87";
      sa[108] = "88";
      sa[109] = "89";
      sa[110] = "90";
      sa[111] = "91";
      sa[112] = "92";
      sa[113] = "93";
      sa[114] = "94";
      sa[115] = "95";
      sa[116] = "96";
      sa[117] = "97";
      sa[118] = "98";
      sa[119] = "99";
    }
  }
}
// The class representing column night_charge
class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_10 {
  public static final String[] VALUES = new String[933];
  static {
    GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_10_0.fill(VALUES);
  }
  static final class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_10_0 {
    static final void fill(String[] sa) {
      sa[0] = "1.04";
      sa[1] = "1.97";
      sa[2] = "10";
      sa[3] = "10.01";
      sa[4] = "10.02";
      sa[5] = "10.03";
      sa[6] = "10.04";
      sa[7] = "10.05";
      sa[8] = "10.06";
      sa[9] = "10.07";
      sa[10] = "10.08";
      sa[11] = "10.09";
      sa[12] = "10.1";
      sa[13] = "10.11";
      sa[14] = "10.12";
      sa[15] = "10.13";
      sa[16] = "10.14";
      sa[17] = "10.15";
      sa[18] = "10.16";
      sa[19] = "10.17";
      sa[20] = "10.18";
      sa[21] = "10.19";
      sa[22] = "10.2";
      sa[23] = "10.21";
      sa[24] = "10.22";
      sa[25] = "10.23";
      sa[26] = "10.24";
      sa[27] = "10.25";
      sa[28] = "10.26";
      sa[29] = "10.27";
      sa[30] = "10.28";
      sa[31] = "10.29";
      sa[32] = "10.3";
      sa[33] = "10.31";
      sa[34] = "10.32";
      sa[35] = "10.33";
      sa[36] = "10.34";
      sa[37] = "10.35";
      sa[38] = "10.36";
      sa[39] = "10.37";
      sa[40] = "10.38";
      sa[41] = "10.39";
      sa[42] = "10.4";
      sa[43] = "10.41";
      sa[44] = "10.42";
      sa[45] = "10.43";
      sa[46] = "10.44";
      sa[47] = "10.45";
      sa[48] = "10.46";
      sa[49] = "10.47";
      sa[50] = "10.48";
      sa[51] = "10.49";
      sa[52] = "10.5";
      sa[53] = "10.51";
      sa[54] = "10.52";
      sa[55] = "10.53";
      sa[56] = "10.54";
      sa[57] = "10.55";
      sa[58] = "10.56";
      sa[59] = "10.57";
      sa[60] = "10.58";
      sa[61] = "10.59";
      sa[62] = "10.6";
      sa[63] = "10.61";
      sa[64] = "10.62";
      sa[65] = "10.63";
      sa[66] = "10.64";
      sa[67] = "10.65";
      sa[68] = "10.66";
      sa[69] = "10.67";
      sa[70] = "10.68";
      sa[71] = "10.69";
      sa[72] = "10.7";
      sa[73] = "10.71";
      sa[74] = "10.72";
      sa[75] = "10.73";
      sa[76] = "10.74";
      sa[77] = "10.75";
      sa[78] = "10.76";
      sa[79] = "10.77";
      sa[80] = "10.78";
      sa[81] = "10.79";
      sa[82] = "10.8";
      sa[83] = "10.81";
      sa[84] = "10.82";
      sa[85] = "10.83";
      sa[86] = "10.84";
      sa[87] = "10.85";
      sa[88] = "10.86";
      sa[89] = "10.87";
      sa[90] = "10.88";
      sa[91] = "10.89";
      sa[92] = "10.9";
      sa[93] = "10.92";
      sa[94] = "10.93";
      sa[95] = "10.94";
      sa[96] = "10.95";
      sa[97] = "10.96";
      sa[98] = "10.97";
      sa[99] = "10.98";
      sa[100] = "10.99";
      sa[101] = "11";
      sa[102] = "11.01";
      sa[103] = "11.02";
      sa[104] = "11.03";
      sa[105] = "11.04";
      sa[106] = "11.05";
      sa[107] = "11.06";
      sa[108] = "11.07";
      sa[109] = "11.08";
      sa[110] = "11.09";
      sa[111] = "11.1";
      sa[112] = "11.11";
      sa[113] = "11.12";
      sa[114] = "11.13";
      sa[115] = "11.14";
      sa[116] = "11.15";
      sa[117] = "11.16";
      sa[118] = "11.17";
      sa[119] = "11.18";
      sa[120] = "11.19";
      sa[121] = "11.2";
      sa[122] = "11.21";
      sa[123] = "11.22";
      sa[124] = "11.23";
      sa[125] = "11.24";
      sa[126] = "11.25";
      sa[127] = "11.26";
      sa[128] = "11.27";
      sa[129] = "11.28";
      sa[130] = "11.29";
      sa[131] = "11.3";
      sa[132] = "11.31";
      sa[133] = "11.32";
      sa[134] = "11.33";
      sa[135] = "11.34";
      sa[136] = "11.35";
      sa[137] = "11.36";
      sa[138] = "11.37";
      sa[139] = "11.38";
      sa[140] = "11.39";
      sa[141] = "11.4";
      sa[142] = "11.41";
      sa[143] = "11.42";
      sa[144] = "11.43";
      sa[145] = "11.44";
      sa[146] = "11.45";
      sa[147] = "11.46";
      sa[148] = "11.47";
      sa[149] = "11.48";
      sa[150] = "11.49";
      sa[151] = "11.5";
      sa[152] = "11.51";
      sa[153] = "11.52";
      sa[154] = "11.53";
      sa[155] = "11.54";
      sa[156] = "11.55";
      sa[157] = "11.56";
      sa[158] = "11.57";
      sa[159] = "11.58";
      sa[160] = "11.59";
      sa[161] = "11.61";
      sa[162] = "11.62";
      sa[163] = "11.63";
      sa[164] = "11.64";
      sa[165] = "11.65";
      sa[166] = "11.66";
      sa[167] = "11.67";
      sa[168] = "11.68";
      sa[169] = "11.69";
      sa[170] = "11.7";
      sa[171] = "11.71";
      sa[172] = "11.72";
      sa[173] = "11.73";
      sa[174] = "11.74";
      sa[175] = "11.75";
      sa[176] = "11.76";
      sa[177] = "11.77";
      sa[178] = "11.78";
      sa[179] = "11.79";
      sa[180] = "11.8";
      sa[181] = "11.81";
      sa[182] = "11.82";
      sa[183] = "11.83";
      sa[184] = "11.84";
      sa[185] = "11.85";
      sa[186] = "11.86";
      sa[187] = "11.87";
      sa[188] = "11.88";
      sa[189] = "11.89";
      sa[190] = "11.9";
      sa[191] = "11.91";
      sa[192] = "11.92";
      sa[193] = "11.93";
      sa[194] = "11.94";
      sa[195] = "11.95";
      sa[196] = "11.96";
      sa[197] = "11.97";
      sa[198] = "11.98";
      sa[199] = "12";
      sa[200] = "12.01";
      sa[201] = "12.02";
      sa[202] = "12.03";
      sa[203] = "12.04";
      sa[204] = "12.06";
      sa[205] = "12.07";
      sa[206] = "12.08";
      sa[207] = "12.09";
      sa[208] = "12.1";
      sa[209] = "12.11";
      sa[210] = "12.12";
      sa[211] = "12.13";
      sa[212] = "12.14";
      sa[213] = "12.15";
      sa[214] = "12.16";
      sa[215] = "12.17";
      sa[216] = "12.18";
      sa[217] = "12.19";
      sa[218] = "12.2";
      sa[219] = "12.21";
      sa[220] = "12.22";
      sa[221] = "12.23";
      sa[222] = "12.24";
      sa[223] = "12.26";
      sa[224] = "12.27";
      sa[225] = "12.28";
      sa[226] = "12.29";
      sa[227] = "12.3";
      sa[228] = "12.32";
      sa[229] = "12.33";
      sa[230] = "12.34";
      sa[231] = "12.35";
      sa[232] = "12.36";
      sa[233] = "12.37";
      sa[234] = "12.38";
      sa[235] = "12.39";
      sa[236] = "12.4";
      sa[237] = "12.41";
      sa[238] = "12.42";
      sa[239] = "12.45";
      sa[240] = "12.46";
      sa[241] = "12.48";
      sa[242] = "12.49";
      sa[243] = "12.5";
      sa[244] = "12.52";
      sa[245] = "12.53";
      sa[246] = "12.56";
      sa[247] = "12.58";
      sa[248] = "12.59";
      sa[249] = "12.6";
      sa[250] = "12.61";
      sa[251] = "12.62";
      sa[252] = "12.63";
      sa[253] = "12.64";
      sa[254] = "12.65";
      sa[255] = "12.66";
      sa[256] = "12.67";
      sa[257] = "12.68";
      sa[258] = "12.69";
      sa[259] = "12.7";
      sa[260] = "12.71";
      sa[261] = "12.72";
      sa[262] = "12.73";
      sa[263] = "12.74";
      sa[264] = "12.75";
      sa[265] = "12.76";
      sa[266] = "12.77";
      sa[267] = "12.8";
      sa[268] = "12.81";
      sa[269] = "12.83";
      sa[270] = "12.84";
      sa[271] = "12.85";
      sa[272] = "12.86";
      sa[273] = "12.87";
      sa[274] = "12.88";
      sa[275] = "12.89";
      sa[276] = "12.9";
      sa[277] = "12.91";
      sa[278] = "12.93";
      sa[279] = "12.94";
      sa[280] = "12.95";
      sa[281] = "12.96";
      sa[282] = "13";
      sa[283] = "13.01";
      sa[284] = "13.02";
      sa[285] = "13.03";
      sa[286] = "13.05";
      sa[287] = "13.1";
      sa[288] = "13.12";
      sa[289] = "13.13";
      sa[290] = "13.14";
      sa[291] = "13.16";
      sa[292] = "13.17";
      sa[293] = "13.18";
      sa[294] = "13.2";
      sa[295] = "13.21";
      sa[296] = "13.22";
      sa[297] = "13.23";
      sa[298] = "13.25";
      sa[299] = "13.26";
      sa[300] = "13.27";
      sa[301] = "13.29";
      sa[302] = "13.3";
      sa[303] = "13.31";
      sa[304] = "13.33";
      sa[305] = "13.37";
      sa[306] = "13.41";
      sa[307] = "13.42";
      sa[308] = "13.45";
      sa[309] = "13.46";
      sa[310] = "13.47";
      sa[311] = "13.48";
      sa[312] = "13.49";
      sa[313] = "13.5";
      sa[314] = "13.53";
      sa[315] = "13.58";
      sa[316] = "13.59";
      sa[317] = "13.6";
      sa[318] = "13.63";
      sa[319] = "13.66";
      sa[320] = "13.69";
      sa[321] = "13.7";
      sa[322] = "13.74";
      sa[323] = "13.75";
      sa[324] = "13.78";
      sa[325] = "13.8";
      sa[326] = "13.82";
      sa[327] = "13.84";
      sa[328] = "13.87";
      sa[329] = "13.9";
      sa[330] = "13.91";
      sa[331] = "13.93";
      sa[332] = "13.95";
      sa[333] = "13.97";
      sa[334] = "13.98";
      sa[335] = "14";
      sa[336] = "14.02";
      sa[337] = "14.03";
      sa[338] = "14.04";
      sa[339] = "14.06";
      sa[340] = "14.08";
      sa[341] = "14.09";
      sa[342] = "14.1";
      sa[343] = "14.13";
      sa[344] = "14.18";
      sa[345] = "14.25";
      sa[346] = "14.3";
      sa[347] = "14.32";
      sa[348] = "14.43";
      sa[349] = "14.45";
      sa[350] = "14.46";
      sa[351] = "14.5";
      sa[352] = "14.54";
      sa[353] = "14.56";
      sa[354] = "14.65";
      sa[355] = "14.67";
      sa[356] = "14.69";
      sa[357] = "14.78";
      sa[358] = "14.81";
      sa[359] = "14.82";
      sa[360] = "14.97";
      sa[361] = "15.01";
      sa[362] = "15.06";
      sa[363] = "15.43";
      sa[364] = "15.49";
      sa[365] = "15.56";
      sa[366] = "15.71";
      sa[367] = "15.74";
      sa[368] = "15.76";
      sa[369] = "15.85";
      sa[370] = "15.86";
      sa[371] = "15.97";
      sa[372] = "16.39";
      sa[373] = "16.42";
      sa[374] = "16.55";
      sa[375] = "16.99";
      sa[376] = "17.19";
      sa[377] = "17.77";
      sa[378] = "2.03";
      sa[379] = "2.13";
      sa[380] = "2.25";
      sa[381] = "2.4";
      sa[382] = "2.43";
      sa[383] = "2.45";
      sa[384] = "2.55";
      sa[385] = "2.59";
      sa[386] = "2.76";
      sa[387] = "2.85";
      sa[388] = "2.86";
      sa[389] = "2.89";
      sa[390] = "2.96";
      sa[391] = "3.05";
      sa[392] = "3.18";
      sa[393] = "3.2";
      sa[394] = "3.25";
      sa[395] = "3.26";
      sa[396] = "3.29";
      sa[397] = "3.32";
      sa[398] = "3.41";
      sa[399] = "3.44";
      sa[400] = "3.47";
      sa[401] = "3.48";
      sa[402] = "3.51";
      sa[403] = "3.57";
      sa[404] = "3.59";
      sa[405] = "3.6";
      sa[406] = "3.61";
      sa[407] = "3.67";
      sa[408] = "3.7";
      sa[409] = "3.71";
      sa[410] = "3.78";
      sa[411] = "3.82";
      sa[412] = "3.86";
      sa[413] = "3.93";
      sa[414] = "3.94";
      sa[415] = "3.97";
      sa[416] = "3.99";
      sa[417] = "4.02";
      sa[418] = "4.03";
      sa[419] = "4.04";
      sa[420] = "4.09";
      sa[421] = "4.1";
      sa[422] = "4.12";
      sa[423] = "4.23";
      sa[424] = "4.24";
      sa[425] = "4.25";
      sa[426] = "4.27";
      sa[427] = "4.28";
      sa[428] = "4.29";
      sa[429] = "4.3";
      sa[430] = "4.34";
      sa[431] = "4.38";
      sa[432] = "4.41";
      sa[433] = "4.42";
      sa[434] = "4.44";
      sa[435] = "4.45";
      sa[436] = "4.46";
      sa[437] = "4.47";
      sa[438] = "4.51";
      sa[439] = "4.54";
      sa[440] = "4.55";
      sa[441] = "4.58";
      sa[442] = "4.59";
      sa[443] = "4.61";
      sa[444] = "4.64";
      sa[445] = "4.67";
      sa[446] = "4.68";
      sa[447] = "4.7";
      sa[448] = "4.71";
      sa[449] = "4.72";
      sa[450] = "4.73";
      sa[451] = "4.74";
      sa[452] = "4.75";
      sa[453] = "4.77";
      sa[454] = "4.83";
      sa[455] = "4.84";
      sa[456] = "4.86";
      sa[457] = "4.9";
      sa[458] = "4.92";
      sa[459] = "4.93";
      sa[460] = "4.94";
      sa[461] = "4.95";
      sa[462] = "4.96";
      sa[463] = "4.97";
      sa[464] = "4.98";
      sa[465] = "5";
      sa[466] = "5.01";
      sa[467] = "5.02";
      sa[468] = "5.03";
      sa[469] = "5.05";
      sa[470] = "5.06";
      sa[471] = "5.08";
      sa[472] = "5.1";
      sa[473] = "5.11";
      sa[474] = "5.12";
      sa[475] = "5.13";
      sa[476] = "5.14";
      sa[477] = "5.15";
      sa[478] = "5.17";
      sa[479] = "5.2";
      sa[480] = "5.21";
      sa[481] = "5.22";
      sa[482] = "5.23";
      sa[483] = "5.24";
      sa[484] = "5.25";
      sa[485] = "5.27";
      sa[486] = "5.28";
      sa[487] = "5.29";
      sa[488] = "5.3";
      sa[489] = "5.31";
      sa[490] = "5.32";
      sa[491] = "5.33";
      sa[492] = "5.35";
      sa[493] = "5.36";
      sa[494] = "5.37";
      sa[495] = "5.38";
      sa[496] = "5.39";
      sa[497] = "5.4";
      sa[498] = "5.41";
      sa[499] = "5.42";
      sa[500] = "5.44";
      sa[501] = "5.45";
      sa[502] = "5.47";
      sa[503] = "5.49";
      sa[504] = "5.5";
      sa[505] = "5.51";
      sa[506] = "5.52";
      sa[507] = "5.54";
      sa[508] = "5.55";
      sa[509] = "5.56";
      sa[510] = "5.57";
      sa[511] = "5.58";
      sa[512] = "5.63";
      sa[513] = "5.65";
      sa[514] = "5.66";
      sa[515] = "5.68";
      sa[516] = "5.7";
      sa[517] = "5.71";
      sa[518] = "5.72";
      sa[519] = "5.73";
      sa[520] = "5.74";
      sa[521] = "5.75";
      sa[522] = "5.76";
      sa[523] = "5.77";
      sa[524] = "5.78";
      sa[525] = "5.79";
      sa[526] = "5.8";
      sa[527] = "5.81";
      sa[528] = "5.82";
      sa[529] = "5.83";
      sa[530] = "5.84";
      sa[531] = "5.85";
      sa[532] = "5.86";
      sa[533] = "5.88";
      sa[534] = "5.89";
      sa[535] = "5.9";
      sa[536] = "5.91";
      sa[537] = "5.92";
      sa[538] = "5.94";
      sa[539] = "5.95";
      sa[540] = "5.96";
      sa[541] = "5.97";
      sa[542] = "5.98";
      sa[543] = "5.99";
      sa[544] = "6";
      sa[545] = "6.01";
      sa[546] = "6.02";
      sa[547] = "6.03";
      sa[548] = "6.04";
      sa[549] = "6.05";
      sa[550] = "6.06";
      sa[551] = "6.07";
      sa[552] = "6.08";
      sa[553] = "6.09";
      sa[554] = "6.11";
      sa[555] = "6.12";
      sa[556] = "6.13";
      sa[557] = "6.14";
      sa[558] = "6.15";
      sa[559] = "6.16";
      sa[560] = "6.18";
      sa[561] = "6.19";
      sa[562] = "6.2";
      sa[563] = "6.21";
      sa[564] = "6.22";
      sa[565] = "6.23";
      sa[566] = "6.24";
      sa[567] = "6.26";
      sa[568] = "6.27";
      sa[569] = "6.28";
      sa[570] = "6.29";
      sa[571] = "6.3";
      sa[572] = "6.31";
      sa[573] = "6.32";
      sa[574] = "6.34";
      sa[575] = "6.35";
      sa[576] = "6.37";
      sa[577] = "6.38";
      sa[578] = "6.39";
      sa[579] = "6.4";
      sa[580] = "6.41";
      sa[581] = "6.42";
      sa[582] = "6.43";
      sa[583] = "6.44";
      sa[584] = "6.45";
      sa[585] = "6.46";
      sa[586] = "6.47";
      sa[587] = "6.48";
      sa[588] = "6.49";
      sa[589] = "6.5";
      sa[590] = "6.51";
      sa[591] = "6.52";
      sa[592] = "6.53";
      sa[593] = "6.54";
      sa[594] = "6.55";
      sa[595] = "6.56";
      sa[596] = "6.58";
      sa[597] = "6.59";
      sa[598] = "6.6";
      sa[599] = "6.61";
      sa[600] = "6.62";
      sa[601] = "6.63";
      sa[602] = "6.64";
      sa[603] = "6.65";
      sa[604] = "6.66";
      sa[605] = "6.67";
      sa[606] = "6.68";
      sa[607] = "6.69";
      sa[608] = "6.7";
      sa[609] = "6.71";
      sa[610] = "6.72";
      sa[611] = "6.73";
      sa[612] = "6.74";
      sa[613] = "6.75";
      sa[614] = "6.76";
      sa[615] = "6.77";
      sa[616] = "6.78";
      sa[617] = "6.79";
      sa[618] = "6.8";
      sa[619] = "6.81";
      sa[620] = "6.82";
      sa[621] = "6.83";
      sa[622] = "6.84";
      sa[623] = "6.85";
      sa[624] = "6.86";
      sa[625] = "6.87";
      sa[626] = "6.88";
      sa[627] = "6.89";
      sa[628] = "6.9";
      sa[629] = "6.91";
      sa[630] = "6.92";
      sa[631] = "6.93";
      sa[632] = "6.94";
      sa[633] = "6.95";
      sa[634] = "6.96";
      sa[635] = "6.97";
      sa[636] = "6.98";
      sa[637] = "6.99";
      sa[638] = "7";
      sa[639] = "7.01";
      sa[640] = "7.03";
      sa[641] = "7.05";
      sa[642] = "7.06";
      sa[643] = "7.07";
      sa[644] = "7.08";
      sa[645] = "7.09";
      sa[646] = "7.1";
      sa[647] = "7.11";
      sa[648] = "7.12";
      sa[649] = "7.13";
      sa[650] = "7.14";
      sa[651] = "7.15";
      sa[652] = "7.16";
      sa[653] = "7.17";
      sa[654] = "7.18";
      sa[655] = "7.19";
      sa[656] = "7.2";
      sa[657] = "7.21";
      sa[658] = "7.22";
      sa[659] = "7.23";
      sa[660] = "7.24";
      sa[661] = "7.25";
      sa[662] = "7.26";
      sa[663] = "7.27";
      sa[664] = "7.28";
      sa[665] = "7.29";
      sa[666] = "7.3";
      sa[667] = "7.31";
      sa[668] = "7.32";
      sa[669] = "7.33";
      sa[670] = "7.34";
      sa[671] = "7.35";
      sa[672] = "7.36";
      sa[673] = "7.37";
      sa[674] = "7.38";
      sa[675] = "7.39";
      sa[676] = "7.4";
      sa[677] = "7.41";
      sa[678] = "7.42";
      sa[679] = "7.43";
      sa[680] = "7.44";
      sa[681] = "7.45";
      sa[682] = "7.46";
      sa[683] = "7.47";
      sa[684] = "7.48";
      sa[685] = "7.49";
      sa[686] = "7.5";
      sa[687] = "7.51";
      sa[688] = "7.52";
      sa[689] = "7.53";
      sa[690] = "7.54";
      sa[691] = "7.55";
      sa[692] = "7.56";
      sa[693] = "7.57";
      sa[694] = "7.58";
      sa[695] = "7.59";
      sa[696] = "7.6";
      sa[697] = "7.61";
      sa[698] = "7.62";
      sa[699] = "7.63";
      sa[700] = "7.64";
      sa[701] = "7.65";
      sa[702] = "7.66";
      sa[703] = "7.67";
      sa[704] = "7.68";
      sa[705] = "7.69";
      sa[706] = "7.7";
      sa[707] = "7.71";
      sa[708] = "7.72";
      sa[709] = "7.73";
      sa[710] = "7.74";
      sa[711] = "7.75";
      sa[712] = "7.76";
      sa[713] = "7.77";
      sa[714] = "7.78";
      sa[715] = "7.79";
      sa[716] = "7.8";
      sa[717] = "7.81";
      sa[718] = "7.82";
      sa[719] = "7.83";
      sa[720] = "7.84";
      sa[721] = "7.85";
      sa[722] = "7.86";
      sa[723] = "7.87";
      sa[724] = "7.88";
      sa[725] = "7.89";
      sa[726] = "7.9";
      sa[727] = "7.91";
      sa[728] = "7.92";
      sa[729] = "7.93";
      sa[730] = "7.94";
      sa[731] = "7.95";
      sa[732] = "7.96";
      sa[733] = "7.97";
      sa[734] = "7.98";
      sa[735] = "7.99";
      sa[736] = "8";
      sa[737] = "8.01";
      sa[738] = "8.02";
      sa[739] = "8.03";
      sa[740] = "8.04";
      sa[741] = "8.05";
      sa[742] = "8.06";
      sa[743] = "8.07";
      sa[744] = "8.08";
      sa[745] = "8.09";
      sa[746] = "8.1";
      sa[747] = "8.11";
      sa[748] = "8.12";
      sa[749] = "8.13";
      sa[750] = "8.14";
      sa[751] = "8.15";
      sa[752] = "8.16";
      sa[753] = "8.17";
      sa[754] = "8.18";
      sa[755] = "8.19";
      sa[756] = "8.2";
      sa[757] = "8.21";
      sa[758] = "8.22";
      sa[759] = "8.23";
      sa[760] = "8.24";
      sa[761] = "8.25";
      sa[762] = "8.26";
      sa[763] = "8.27";
      sa[764] = "8.28";
      sa[765] = "8.29";
      sa[766] = "8.3";
      sa[767] = "8.31";
      sa[768] = "8.32";
      sa[769] = "8.33";
      sa[770] = "8.34";
      sa[771] = "8.35";
      sa[772] = "8.36";
      sa[773] = "8.37";
      sa[774] = "8.38";
      sa[775] = "8.39";
      sa[776] = "8.4";
      sa[777] = "8.41";
      sa[778] = "8.42";
      sa[779] = "8.43";
      sa[780] = "8.44";
      sa[781] = "8.45";
      sa[782] = "8.46";
      sa[783] = "8.47";
      sa[784] = "8.48";
      sa[785] = "8.49";
      sa[786] = "8.5";
      sa[787] = "8.51";
      sa[788] = "8.52";
      sa[789] = "8.53";
      sa[790] = "8.54";
      sa[791] = "8.55";
      sa[792] = "8.57";
      sa[793] = "8.58";
      sa[794] = "8.59";
      sa[795] = "8.6";
      sa[796] = "8.61";
      sa[797] = "8.62";
      sa[798] = "8.63";
      sa[799] = "8.64";
      sa[800] = "8.65";
      sa[801] = "8.66";
      sa[802] = "8.67";
      sa[803] = "8.68";
      sa[804] = "8.69";
      sa[805] = "8.7";
      sa[806] = "8.71";
      sa[807] = "8.72";
      sa[808] = "8.73";
      sa[809] = "8.74";
      sa[810] = "8.75";
      sa[811] = "8.76";
      sa[812] = "8.77";
      sa[813] = "8.78";
      sa[814] = "8.79";
      sa[815] = "8.8";
      sa[816] = "8.81";
      sa[817] = "8.82";
      sa[818] = "8.83";
      sa[819] = "8.84";
      sa[820] = "8.85";
      sa[821] = "8.86";
      sa[822] = "8.87";
      sa[823] = "8.88";
      sa[824] = "8.89";
      sa[825] = "8.9";
      sa[826] = "8.91";
      sa[827] = "8.93";
      sa[828] = "8.94";
      sa[829] = "8.95";
      sa[830] = "8.96";
      sa[831] = "8.97";
      sa[832] = "8.98";
      sa[833] = "8.99";
      sa[834] = "9";
      sa[835] = "9.02";
      sa[836] = "9.03";
      sa[837] = "9.04";
      sa[838] = "9.05";
      sa[839] = "9.06";
      sa[840] = "9.07";
      sa[841] = "9.08";
      sa[842] = "9.09";
      sa[843] = "9.1";
      sa[844] = "9.11";
      sa[845] = "9.12";
      sa[846] = "9.13";
      sa[847] = "9.14";
      sa[848] = "9.15";
      sa[849] = "9.16";
      sa[850] = "9.17";
      sa[851] = "9.18";
      sa[852] = "9.19";
      sa[853] = "9.2";
      sa[854] = "9.21";
      sa[855] = "9.22";
      sa[856] = "9.23";
      sa[857] = "9.24";
      sa[858] = "9.25";
      sa[859] = "9.26";
      sa[860] = "9.27";
      sa[861] = "9.28";
      sa[862] = "9.29";
      sa[863] = "9.3";
      sa[864] = "9.31";
      sa[865] = "9.32";
      sa[866] = "9.33";
      sa[867] = "9.34";
      sa[868] = "9.35";
      sa[869] = "9.36";
      sa[870] = "9.37";
      sa[871] = "9.38";
      sa[872] = "9.39";
      sa[873] = "9.4";
      sa[874] = "9.41";
      sa[875] = "9.42";
      sa[876] = "9.43";
      sa[877] = "9.44";
      sa[878] = "9.45";
      sa[879] = "9.46";
      sa[880] = "9.47";
      sa[881] = "9.48";
      sa[882] = "9.49";
      sa[883] = "9.5";
      sa[884] = "9.51";
      sa[885] = "9.52";
      sa[886] = "9.53";
      sa[887] = "9.54";
      sa[888] = "9.55";
      sa[889] = "9.56";
      sa[890] = "9.57";
      sa[891] = "9.58";
      sa[892] = "9.59";
      sa[893] = "9.6";
      sa[894] = "9.61";
      sa[895] = "9.62";
      sa[896] = "9.63";
      sa[897] = "9.64";
      sa[898] = "9.65";
      sa[899] = "9.66";
      sa[900] = "9.67";
      sa[901] = "9.68";
      sa[902] = "9.69";
      sa[903] = "9.7";
      sa[904] = "9.71";
      sa[905] = "9.72";
      sa[906] = "9.73";
      sa[907] = "9.74";
      sa[908] = "9.75";
      sa[909] = "9.76";
      sa[910] = "9.77";
      sa[911] = "9.78";
      sa[912] = "9.79";
      sa[913] = "9.8";
      sa[914] = "9.81";
      sa[915] = "9.82";
      sa[916] = "9.83";
      sa[917] = "9.84";
      sa[918] = "9.85";
      sa[919] = "9.86";
      sa[920] = "9.87";
      sa[921] = "9.88";
      sa[922] = "9.89";
      sa[923] = "9.9";
      sa[924] = "9.91";
      sa[925] = "9.92";
      sa[926] = "9.93";
      sa[927] = "9.94";
      sa[928] = "9.95";
      sa[929] = "9.96";
      sa[930] = "9.97";
      sa[931] = "9.98";
      sa[932] = "9.99";
    }
  }
}
// The class representing column intl_mins
class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_11 {
  public static final String[] VALUES = new String[162];
  static {
    GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_11_0.fill(VALUES);
  }
  static final class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_11_0 {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "1.1";
      sa[2] = "1.3";
      sa[3] = "10";
      sa[4] = "10.1";
      sa[5] = "10.2";
      sa[6] = "10.3";
      sa[7] = "10.4";
      sa[8] = "10.5";
      sa[9] = "10.6";
      sa[10] = "10.7";
      sa[11] = "10.8";
      sa[12] = "10.9";
      sa[13] = "11";
      sa[14] = "11.1";
      sa[15] = "11.2";
      sa[16] = "11.3";
      sa[17] = "11.4";
      sa[18] = "11.5";
      sa[19] = "11.6";
      sa[20] = "11.7";
      sa[21] = "11.8";
      sa[22] = "11.9";
      sa[23] = "12";
      sa[24] = "12.1";
      sa[25] = "12.2";
      sa[26] = "12.3";
      sa[27] = "12.4";
      sa[28] = "12.5";
      sa[29] = "12.6";
      sa[30] = "12.7";
      sa[31] = "12.8";
      sa[32] = "12.9";
      sa[33] = "13";
      sa[34] = "13.1";
      sa[35] = "13.2";
      sa[36] = "13.3";
      sa[37] = "13.4";
      sa[38] = "13.5";
      sa[39] = "13.6";
      sa[40] = "13.7";
      sa[41] = "13.8";
      sa[42] = "13.9";
      sa[43] = "14";
      sa[44] = "14.1";
      sa[45] = "14.2";
      sa[46] = "14.3";
      sa[47] = "14.4";
      sa[48] = "14.5";
      sa[49] = "14.6";
      sa[50] = "14.7";
      sa[51] = "14.8";
      sa[52] = "14.9";
      sa[53] = "15";
      sa[54] = "15.1";
      sa[55] = "15.2";
      sa[56] = "15.3";
      sa[57] = "15.4";
      sa[58] = "15.5";
      sa[59] = "15.6";
      sa[60] = "15.7";
      sa[61] = "15.8";
      sa[62] = "15.9";
      sa[63] = "16";
      sa[64] = "16.1";
      sa[65] = "16.2";
      sa[66] = "16.3";
      sa[67] = "16.4";
      sa[68] = "16.5";
      sa[69] = "16.6";
      sa[70] = "16.7";
      sa[71] = "16.9";
      sa[72] = "17";
      sa[73] = "17.1";
      sa[74] = "17.2";
      sa[75] = "17.3";
      sa[76] = "17.5";
      sa[77] = "17.6";
      sa[78] = "17.8";
      sa[79] = "17.9";
      sa[80] = "18";
      sa[81] = "18.2";
      sa[82] = "18.3";
      sa[83] = "18.4";
      sa[84] = "18.9";
      sa[85] = "2";
      sa[86] = "2.1";
      sa[87] = "2.2";
      sa[88] = "2.4";
      sa[89] = "2.5";
      sa[90] = "2.6";
      sa[91] = "2.7";
      sa[92] = "2.9";
      sa[93] = "20";
      sa[94] = "3.1";
      sa[95] = "3.3";
      sa[96] = "3.4";
      sa[97] = "3.5";
      sa[98] = "3.6";
      sa[99] = "3.7";
      sa[100] = "3.8";
      sa[101] = "3.9";
      sa[102] = "4";
      sa[103] = "4.1";
      sa[104] = "4.2";
      sa[105] = "4.3";
      sa[106] = "4.4";
      sa[107] = "4.5";
      sa[108] = "4.6";
      sa[109] = "4.7";
      sa[110] = "4.8";
      sa[111] = "4.9";
      sa[112] = "5";
      sa[113] = "5.1";
      sa[114] = "5.2";
      sa[115] = "5.3";
      sa[116] = "5.4";
      sa[117] = "5.5";
      sa[118] = "5.6";
      sa[119] = "5.7";
      sa[120] = "5.8";
      sa[121] = "5.9";
      sa[122] = "6";
      sa[123] = "6.1";
      sa[124] = "6.2";
      sa[125] = "6.3";
      sa[126] = "6.4";
      sa[127] = "6.5";
      sa[128] = "6.6";
      sa[129] = "6.7";
      sa[130] = "6.8";
      sa[131] = "6.9";
      sa[132] = "7";
      sa[133] = "7.1";
      sa[134] = "7.2";
      sa[135] = "7.3";
      sa[136] = "7.4";
      sa[137] = "7.5";
      sa[138] = "7.6";
      sa[139] = "7.7";
      sa[140] = "7.8";
      sa[141] = "7.9";
      sa[142] = "8";
      sa[143] = "8.1";
      sa[144] = "8.2";
      sa[145] = "8.3";
      sa[146] = "8.4";
      sa[147] = "8.5";
      sa[148] = "8.6";
      sa[149] = "8.7";
      sa[150] = "8.8";
      sa[151] = "8.9";
      sa[152] = "9";
      sa[153] = "9.1";
      sa[154] = "9.2";
      sa[155] = "9.3";
      sa[156] = "9.4";
      sa[157] = "9.5";
      sa[158] = "9.6";
      sa[159] = "9.7";
      sa[160] = "9.8";
      sa[161] = "9.9";
    }
  }
}
// The class representing column intl_calls
class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_12 {
  public static final String[] VALUES = new String[21];
  static {
    GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_12_0.fill(VALUES);
  }
  static final class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_12_0 {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "1";
      sa[2] = "10";
      sa[3] = "11";
      sa[4] = "12";
      sa[5] = "13";
      sa[6] = "14";
      sa[7] = "15";
      sa[8] = "16";
      sa[9] = "17";
      sa[10] = "18";
      sa[11] = "19";
      sa[12] = "2";
      sa[13] = "20";
      sa[14] = "3";
      sa[15] = "4";
      sa[16] = "5";
      sa[17] = "6";
      sa[18] = "7";
      sa[19] = "8";
      sa[20] = "9";
    }
  }
}
// The class representing column intl_charge
class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_13 {
  public static final String[] VALUES = new String[162];
  static {
    GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_13_0.fill(VALUES);
  }
  static final class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_13_0 {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "0.3";
      sa[2] = "0.35";
      sa[3] = "0.54";
      sa[4] = "0.57";
      sa[5] = "0.59";
      sa[6] = "0.65";
      sa[7] = "0.68";
      sa[8] = "0.7";
      sa[9] = "0.73";
      sa[10] = "0.78";
      sa[11] = "0.84";
      sa[12] = "0.89";
      sa[13] = "0.92";
      sa[14] = "0.95";
      sa[15] = "0.97";
      sa[16] = "1";
      sa[17] = "1.03";
      sa[18] = "1.05";
      sa[19] = "1.08";
      sa[20] = "1.11";
      sa[21] = "1.13";
      sa[22] = "1.16";
      sa[23] = "1.19";
      sa[24] = "1.22";
      sa[25] = "1.24";
      sa[26] = "1.27";
      sa[27] = "1.3";
      sa[28] = "1.32";
      sa[29] = "1.35";
      sa[30] = "1.38";
      sa[31] = "1.4";
      sa[32] = "1.43";
      sa[33] = "1.46";
      sa[34] = "1.49";
      sa[35] = "1.51";
      sa[36] = "1.54";
      sa[37] = "1.57";
      sa[38] = "1.59";
      sa[39] = "1.62";
      sa[40] = "1.65";
      sa[41] = "1.67";
      sa[42] = "1.7";
      sa[43] = "1.73";
      sa[44] = "1.76";
      sa[45] = "1.78";
      sa[46] = "1.81";
      sa[47] = "1.84";
      sa[48] = "1.86";
      sa[49] = "1.89";
      sa[50] = "1.92";
      sa[51] = "1.94";
      sa[52] = "1.97";
      sa[53] = "2";
      sa[54] = "2.03";
      sa[55] = "2.05";
      sa[56] = "2.08";
      sa[57] = "2.11";
      sa[58] = "2.13";
      sa[59] = "2.16";
      sa[60] = "2.19";
      sa[61] = "2.21";
      sa[62] = "2.24";
      sa[63] = "2.27";
      sa[64] = "2.3";
      sa[65] = "2.32";
      sa[66] = "2.35";
      sa[67] = "2.38";
      sa[68] = "2.4";
      sa[69] = "2.43";
      sa[70] = "2.46";
      sa[71] = "2.48";
      sa[72] = "2.51";
      sa[73] = "2.54";
      sa[74] = "2.57";
      sa[75] = "2.59";
      sa[76] = "2.62";
      sa[77] = "2.65";
      sa[78] = "2.67";
      sa[79] = "2.7";
      sa[80] = "2.73";
      sa[81] = "2.75";
      sa[82] = "2.78";
      sa[83] = "2.81";
      sa[84] = "2.84";
      sa[85] = "2.86";
      sa[86] = "2.89";
      sa[87] = "2.92";
      sa[88] = "2.94";
      sa[89] = "2.97";
      sa[90] = "3";
      sa[91] = "3.02";
      sa[92] = "3.05";
      sa[93] = "3.08";
      sa[94] = "3.11";
      sa[95] = "3.13";
      sa[96] = "3.16";
      sa[97] = "3.19";
      sa[98] = "3.21";
      sa[99] = "3.24";
      sa[100] = "3.27";
      sa[101] = "3.29";
      sa[102] = "3.32";
      sa[103] = "3.35";
      sa[104] = "3.38";
      sa[105] = "3.4";
      sa[106] = "3.43";
      sa[107] = "3.46";
      sa[108] = "3.48";
      sa[109] = "3.51";
      sa[110] = "3.54";
      sa[111] = "3.56";
      sa[112] = "3.59";
      sa[113] = "3.62";
      sa[114] = "3.65";
      sa[115] = "3.67";
      sa[116] = "3.7";
      sa[117] = "3.73";
      sa[118] = "3.75";
      sa[119] = "3.78";
      sa[120] = "3.81";
      sa[121] = "3.83";
      sa[122] = "3.86";
      sa[123] = "3.89";
      sa[124] = "3.92";
      sa[125] = "3.94";
      sa[126] = "3.97";
      sa[127] = "4";
      sa[128] = "4.02";
      sa[129] = "4.05";
      sa[130] = "4.08";
      sa[131] = "4.1";
      sa[132] = "4.13";
      sa[133] = "4.16";
      sa[134] = "4.19";
      sa[135] = "4.21";
      sa[136] = "4.24";
      sa[137] = "4.27";
      sa[138] = "4.29";
      sa[139] = "4.32";
      sa[140] = "4.35";
      sa[141] = "4.37";
      sa[142] = "4.4";
      sa[143] = "4.43";
      sa[144] = "4.46";
      sa[145] = "4.48";
      sa[146] = "4.51";
      sa[147] = "4.56";
      sa[148] = "4.59";
      sa[149] = "4.62";
      sa[150] = "4.64";
      sa[151] = "4.67";
      sa[152] = "4.73";
      sa[153] = "4.75";
      sa[154] = "4.81";
      sa[155] = "4.83";
      sa[156] = "4.86";
      sa[157] = "4.91";
      sa[158] = "4.94";
      sa[159] = "4.97";
      sa[160] = "5.1";
      sa[161] = "5.4";
    }
  }
}
// The class representing column svc_calls
class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_14 {
  public static final String[] VALUES = new String[10];
  static {
    GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_14_0.fill(VALUES);
  }
  static final class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_14_0 {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "1";
      sa[2] = "2";
      sa[3] = "3";
      sa[4] = "4";
      sa[5] = "5";
      sa[6] = "6";
      sa[7] = "7";
      sa[8] = "8";
      sa[9] = "9";
    }
  }
}
// The class representing column churn
class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_15 {
  public static final String[] VALUES = new String[2];
  static {
    GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_15_0.fill(VALUES);
  }
  static final class GBMModel__8fe38c53c0ae591a42846386ad74498e_ColInfo_15_0 {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "1";
    }
  }
}

class GBMModel__8fe38c53c0ae591a42846386ad74498e_Forest_0 {
  public static void score0(float[] fdata, float[] preds) {
    preds[1] += GBMModel__8fe38c53c0ae591a42846386ad74498e_Tree_0_class_0.score0(fdata);
  }
}
class GBMModel__8fe38c53c0ae591a42846386ad74498e_Tree_0_class_0 {
  static final float score0(float[] data) {
    float pred =  (!GenModel.bitSetContains(GRPSPLIT0, 0, (int) data[10 /* night_charge */])
      ? (data[4 /* day_charge */] <1254.5f
        ? (!GenModel.bitSetContains(GRPSPLIT1, 0, (int) data[14 /* svc_calls */])
          ? (!GenModel.bitSetContains(GRPSPLIT2, 0, (int) data[10 /* night_charge */])
            ? (!GenModel.bitSetContains(GRPSPLIT3, 0, (int) data[3 /* day_calls */]) ? 3.4532218f : -0.58465326f)
            : (!GenModel.bitSetContains(GRPSPLIT4, 1, (int) data[10 /* night_charge */]) ? 3.0861423f : 2.78816f))
          : (!GenModel.bitSetContains(GRPSPLIT5, 1, (int) data[10 /* night_charge */])
            ? (!GenModel.bitSetContains(GRPSPLIT6, 2, (int) data[3 /* day_calls */]) ? 0.12791301f : 0.36873403f)
            : (!GenModel.bitSetContains(GRPSPLIT7, 1, (int) data[10 /* night_charge */]) ? 0.0f : 0.17101721f)))
        : (!GenModel.bitSetContains(GRPSPLIT8, 0, (int) data[4 /* day_charge */])
          ? (!GenModel.bitSetContains(GRPSPLIT9, 1, (int) data[2 /* day_mins */])
            ? (!GenModel.bitSetContains(GRPSPLIT10, 1, (int) data[2 /* day_mins */]) ? 2.1618295f : 0.0f)
            : 0.0f)
          : 0.0f))
      : (!GenModel.bitSetContains(GRPSPLIT11, 0, (int) data[10 /* night_charge */])
        ? (data[4 /* day_charge */] <1417.0f
          ? (!GenModel.bitSetContains(GRPSPLIT12, 0, (int) data[14 /* svc_calls */])
            ? (!GenModel.bitSetContains(GRPSPLIT13, 0, (int) data[11 /* intl_mins */]) ? 2.892406f : -0.44044343f)
            : (!GenModel.bitSetContains(GRPSPLIT14, 0, (int) data[11 /* intl_mins */]) ? 0.49796554f : -0.47509852f))
          : (!GenModel.bitSetContains(GRPSPLIT15, 0, (int) data[4 /* day_charge */])
            ? (!GenModel.bitSetContains(GRPSPLIT16, 1, (int) data[2 /* day_mins */]) ? 1.6650202f : 0.0f)
            : 0.0f))
        : (!GenModel.bitSetContains(GRPSPLIT17, 0, (int) data[10 /* night_charge */])
          ? -0.2962336f
          : (data[0 /* vmail */] <0.5f
            ? -0.58465326f
            : (data[2 /* day_mins */] <1456.5f ? -0.58465326f : -0.58465326f)))));
    return pred;
  }
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-81, -39, -37, -2, -8, -44, -81, -82, -1, 111, 110, 23, -17, -65, -65, -9, 39, -1, 46, -33, -34, -71, 55, -12, -51, 92, -67, -49, -5, -77, -83, -42, -1, -123, -19, -4, -5, -66, -7, 127, -17, -7, -5, -33, -1, -2, -9, -9, -1, -25, -1, -34, -1, -1, -1, -1, -75, -2, -1, -1, -97, -5, -71, -50, -17, -69, -9, -65, -29, 119, -57, -11, 126, -1, -20, -26, -17, -69, -76, 119, -37, -17, -33, -35, -5, -2, 20, -33, 79, 115, -1, -10, -39, -1, 119, -54, -67, -26, -73, 13, -85, -34, 63, -57, -65, -65, 83, -1, -46, -20, 127, 78, -67, -15, 58, -4, 23};
  // {10110000 01010000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {15, 1, 0, 0};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -3, -17, -17, -33, -1, -1, -1, -1, -17, -1, -11, -1, -5, -1, -1, -9, -1, -2, -1, -33, -1, -1, -1, -1, -1, -1, -4, -1, -5, -5, -1, 127, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, 127, -1, -1, -1, -17, -3, -1, -1, -1, -33, -1, -1, -1, -1, -3, -33, -1, -1, -66, 127, -1, -65, -2, 127, -3, -17, -9, -17, 127, -1, -65, -5, 123, -1, -1, -1, -35, -1, -1, 111, -3, -3, -65, -9, -17, -1, -1, 127, -1, -3, 111, -1, -37, -1, -22, -1, -13, -1, -5, -1, -9, 111, -35, -2, -9, -41, 91, -1, -9, -1};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11110101 10011011 11011011 01111111 00011111 00101011 11110101 01110101}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -33, -5, -1, -9, -1, -2, -1, -1, -1, -1, -1, -65, -17, 127};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -5, -5, -9, -1, -1, -1, -1, -5, 127, -3, -1, -2, -1, -1, -3, -65, -1, -1, -9, -1, -1, -1, -1, -1, 63, -1, -1, -2, -2, -1, 95, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -33, -1, -1, -1, 123, -1, -1, -1, -1, -9, -1, -1, -1, 127, -1, -9, -1, -65, -17, -33, -1, -81, -1, 95, -1, -5, -3, -5, -33, -1, -1, -2, -34, -1, -1, -1, -9, -1, -1, 91, 127, -1, -17, -3, -5, -1, -1, -33, 127, -1, -37, -1, -10, -1, -6, -1, -4, -1, -2, -1, -3, -37, -73, -1, -3, -11, -42, -1, 1};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT5 = new byte[] {-19, -1, -2, -1, -1, -1, -11, -1, 127, -9, -65, 127, -1, -1, -67, 63, -1, 127, -5, -9, -2, -67, -79, -1, -1, -18, -1, -1, -1, -17, -73, -1, -1, 127, -17, -1, -1, -19, -1, -1, -1, -1, -1, -1, -9, -65, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -11, -2, -1, -67, -1, -1, -1, 127, -81, -1, -1, -9, -1, -1, -1, -1, -65, -5, -1, -1, -2, -33, -1, -65, -5, 126, -37, -1, -65, -17, -1, -65, 123, -18, -1, -1, -1, -36, -1, -1, -65, -2, -1, -65, -1, -33, -1, -1, 119, -18, -49, -1, -3, 63};
  // {...2 0-bits... 10110000 01010000 00000000 00000000 00000000 10101110 00000000 11110101 10011011 11011011 01111111 00011111 00101011 11110101 01110101}
  public static final byte[] GRPSPLIT6 = new byte[] {-5, -11, -1, -1, -2, -5, -1, 127, -1, -33, -33, -8, -43, -11, 15};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT7 = new byte[] {-3, -1, -2, -1, -1, -1, -11, -1, -1, -9, -65, 127, -1, -1, -67, 63, -1, 127, -5, -9, -2, -3, -73, -1, -1, -17, -1, -1, -1, -17, -1, -1, -1, 127, -17, -1, -1, -19, -1, -1, -1, -1, -1, -1, -9, -65, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -11, -2, -1, -67, -1, -1, -1, 127, -17, -1, -1, -9, -1, -1, -1, -1, -1, -5, -1, -1, -1, -33, -1, -1, -5, 127, -5, -1, -65, -17, -1, -1, 123, -17, -1, -1, -1, -34, -1, -1, -1, -1, -1, -65, -1, -33, -1, -1, -1, -17, -33, -1, -3, 127};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11110101 10011011 11011011 01111111 00011111 00101011 11110101 01110101 11111111 11110110 01110110 11101000 11110111 11111101 11111101 11101111 11100100 11111111 01110100 11111011 01111011 10011101 11101100 00101111 10110011 00111010 10111101 11110011 11011111 11001101 10110101 01101011 11111111 10100001 10110111 00111111 11011111 01111101 10011111 11111110 11110111 10011111 11011111 11111011}
  public static final byte[] GRPSPLIT8 = new byte[] {-3, 95, 103, -115, -9, -3, -1, -9, -5, -1, -35, -67, -75, 15, -17, -18, -1, -73, -35, 109, -33, -69, -5, -1, -13, 99, -28, 91, 104, 114, -47, -29, -49, 47, -53, 125, 123, 24, 110, 66, -98, 74, -17, -66, 93, -126, 44, -2, -25, 127, 127};
  // {...1 0-bits... 10110000 01010000 00000000 00000000 00000000 10101110 00000000 11110101 10011011 11011011 01111111 00011111 00101011 11110101 01110101 11111111 11110110 01110110 11101000 11110111 11111101 11111101 11101111 11100100 11111111 01110100 11111011 01111011 10011101 11101100 00101111 10110011 00111010 10111101 11110011 11011111 11001101 10110101 01101011 11111111 10100001 10110111 00111111 11011111 01111101 10011111 11111110 11110111 10011111 11011111 11111011}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 117, -42, 120, -33, -1, 127, -65, -1, -33, -35, 91, -5, -28, -35, -3, -1, -74, -69, -19, 123, 119, -1, 127, 126, -116, 124, 75, -102, 92, -12, -8, -13, -53, 114, -33, 30, -122, 91, 33, 84, -6, -18, -37, 37, -56, -90, -1, -7, -33, 31};
  // {...1 0-bits... 10110000 01010000 00000000 00000000 00000000 10101110 00000000 11110101 10011011 11011011 01111111 00011111 00101011 11110101 01110101 11111111 11110110 01110110 11101000 11110111 11111101 11111101 11101111 11100100 11111111 01110100 11111011 01111011 10011101 11101100 00101111 10110011 00111010 10111101 11110011 11011111 11001101 10110101 01101011 11111111 10100001 10110111 00111111 11011111 01111101 10011111 11111110 11110111 10011111 11011111 11111011}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 117, -42, 120, -33, -1, 127, -65, -1, -33, -35, 91, -5, -28, -35, -3, -1, -74, -69, -19, 123, 119, -1, 127, 126, -116, 124, 75, -102, 92, -12, -8, -13, -53, 114, -33, 30, -122, 91, 33, 84, -6, -18, -37, 37, -56, -90, -1, -7, -33, 31};
  // {}
  public static final byte[] GRPSPLIT11 = new byte[] {-81, -48, -37, -6, -16, -60, -90, -118, -1, 103, 64, 20, -89, -82, -66, -9, 37, -17, 10, -50, -98, -71, 53, 116, -51, 92, -99, -49, -5, -77, -83, -46, -1, -123, -19, -4, -5, -66, -7, 127, -17, -7, -5, -33, -1, -2, -9, -9, -1, -25, -1, -34, -1, -1, -1, -1, -75, -2, -1, -1, -97, -5, -71, -50, -17, -69, -9, -65, -29, 119, -57, 117, 126, -9, 76, 102, -49, 27, 20, 117, -39, -29, -45, 29, 91, 34, 16, -122, 78, 113, -34, -74, 89, 61, 67, 74, -68, -30, -105, 8, -96, -98, 61, -59, 59, 59, 1, -66, 80, 44, 125, 12, 40, -48, 42, -24, 18};
  // {10110000 01010000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-113, 0, 0, 0};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11110101 10011011 11011011 01111111 00011111 00101011 11110101 01110101 11111111 11110110 01110110 11101000 11110111 11111101}
  public static final byte[] GRPSPLIT13 = new byte[] {55, -114, 79, -3, -66, -19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -97, -65, -89, 3};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11110101 10011011 11011011 01111111 00011111 00101011 11110101 01110101 11111111 11110110 01110110 11101000 11110111 11111101}
  public static final byte[] GRPSPLIT14 = new byte[] {127, -41, -33, -81, 23, 27, 127, -4, -1, 127, -1, -1, 127, -11, -2, -66, -1, -2, -97, -9, 1};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11110101 10011011 11011011 01111111 00011111 00101011 11110101 01110101 11111111 11110110 01110110 11101000 11110111 11111101 11111101 11101111 11100100 11111111 01110100 11111011 01111011 10011101 11101100 00101111}
  public static final byte[] GRPSPLIT15 = new byte[] {119, -1, -7, -25, 115, -25, -33, -5, 63, -17, -17, -1, -33, -2, -19, -1, -1, -9, -9, -1, -1, 125, 94, -1, 122, -34, -12, 127, -1, -1, 127};
  // {...1 0-bits... 10110000 01010000 00000000 00000000 00000000 10101110 00000000 11110101 10011011 11011011 01111111 00011111 00101011 11110101 01110101 11111111 11110110 01110110 11101000 11110111 11111101 11111101 11101111 11100100 11111111 01110100 11111011 01111011 10011101 11101100 00101111}
  public static final byte[] GRPSPLIT16 = new byte[] {-9, -97, 127, 62, 119, -2, -67, -1, -25, -3, -3, -1, -37, -65, -3, -1, -1, -2, -2, -1, -9, -11, -6, -41, -13, -90, -1, -17, -1, -1, 15};
  // {}
  public static final byte[] GRPSPLIT17 = new byte[] {-81, -48, -37, -6, -16, -60, -90, -118, -1, 103, 64, 20, -89, -82, -66, -9, 37, -17, 10, -50, -98, -71, 53, 116, -51, 92, -99, -49, -5, -77, -83, -46, -1, -123, -19, -4, -5, -66, -7, 127, -17, -7, -5, -33, -1, -2, -9, -9, -1, -25, -1, -34, -1, -1, -1, -1, -75, -2, -1, -1, -97, -5, -71, -50, -17, -69, -9, -65, -29, 119, -57, 117, 126, -9, 76, 102, -49, 27, 20, 117, -39, -29, -45, 29, 91, 34, 16, -122, 76, 113, -34, -74, 89, 61, 67, 74, -68, -30, -105, 8, -96, -98, 61, -59, 59, 59, 1, -66, 80, 44, 125, 12, 32, -48, 42, -24, 18};
}

class GBMModel__8fe38c53c0ae591a42846386ad74498e_Forest_1 {
  public static void score0(float[] fdata, float[] preds) {
    preds[1] += GBMModel__8fe38c53c0ae591a42846386ad74498e_Tree_1_class_0.score0(fdata);
  }
}
class GBMModel__8fe38c53c0ae591a42846386ad74498e_Tree_1_class_0 {
  static final float score0(float[] data) {
    float pred =  (!GenModel.bitSetContains(GRPSPLIT0, 8, (int) data[10 /* night_charge */])
      ? (!GenModel.bitSetContains(GRPSPLIT1, 0, (int) data[10 /* night_charge */])
        ? (!GenModel.bitSetContains(GRPSPLIT2, 0, (int) data[3 /* day_calls */])
          ? (!GenModel.bitSetContains(GRPSPLIT3, 0, (int) data[11 /* intl_mins */])
            ? (!GenModel.bitSetContains(GRPSPLIT4, 0, (int) data[6 /* eve_calls */]) ? 1.1531812f : 1.151838f)
            : (!GenModel.bitSetContains(GRPSPLIT5, 0, (int) data[9 /* night_calls */]) ? 2.4900343f : -0.13812354f))
          : (!GenModel.bitSetContains(GRPSPLIT6, 0, (int) data[11 /* intl_mins */])
            ? (!GenModel.bitSetContains(GRPSPLIT7, 0, (int) data[9 /* night_calls */]) ? 2.5977437f : -0.8736017f)
            : (!GenModel.bitSetContains(GRPSPLIT8, 0, (int) data[11 /* intl_mins */]) ? 0.0f : -0.32915476f)))
        : (!GenModel.bitSetContains(GRPSPLIT9, 0, (int) data[11 /* intl_mins */])
          ? (!GenModel.bitSetContains(GRPSPLIT10, 0, (int) data[10 /* night_charge */])
            ? (!GenModel.bitSetContains(GRPSPLIT11, 0, (int) data[9 /* night_calls */]) ? 2.6670215f : 0.46332997f)
            : (!GenModel.bitSetContains(GRPSPLIT12, 0, (int) data[10 /* night_charge */]) ? -0.45856225f : -0.33167025f))
          : (!GenModel.bitSetContains(GRPSPLIT13, 4, (int) data[10 /* night_charge */])
            ? (!GenModel.bitSetContains(GRPSPLIT14, 0, (int) data[6 /* eve_calls */]) ? -0.15910302f : -0.55019337f)
            : (data[4 /* day_charge */] <1273.5f ? -0.6030491f : -3.334233f))))
      : (!GenModel.bitSetContains(GRPSPLIT15, 3, (int) data[11 /* intl_mins */])
        ? (!GenModel.bitSetContains(GRPSPLIT16, 1, (int) data[6 /* eve_calls */])
          ? (!GenModel.bitSetContains(GRPSPLIT17, 10, (int) data[9 /* night_calls */])
            ? (!GenModel.bitSetContains(GRPSPLIT18, 0, (int) data[3 /* day_calls */]) ? -0.05816583f : -0.40818745f)
            : -3.8846467f)
          : (!GenModel.bitSetContains(GRPSPLIT19, 0, (int) data[9 /* night_calls */])
            ? (!GenModel.bitSetContains(GRPSPLIT20, 0, (int) data[3 /* day_calls */]) ? -0.58826816f : -0.1695066f)
            : -1.9848222f))
        : (!GenModel.bitSetContains(GRPSPLIT21, 1, (int) data[3 /* day_calls */])
          ? (!GenModel.bitSetContains(GRPSPLIT22, 0, (int) data[10 /* night_charge */])
            ? (!GenModel.bitSetContains(GRPSPLIT23, 5, (int) data[10 /* night_charge */]) ? -2.9052796f : 0.0f)
            : (data[0 /* vmail */] <0.5f ? -6.8882957f : -22.856745f))
          : (!GenModel.bitSetContains(GRPSPLIT24, 1, (int) data[9 /* night_calls */])
            ? (!GenModel.bitSetContains(GRPSPLIT25, 3, (int) data[11 /* intl_mins */]) ? -0.34421f : 0.5391341f)
            : -4.5157037f))));
    return pred;
  }
  // {...8 0-bits}
  public static final byte[] GRPSPLIT0 = new byte[] {33, 4, 4, 0, 2, 16, 0, 0, -128, 8, 0, 16, 64, 0, 0, -48, 0, 64, 0, 0, 6, -128, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, -128, 32, 0, 0, 0, -127, -127, 16, 0, 74, 0, 0, 8, 0, 64, 0, 13, 64, 0, 32, 0, 0, 8, -124, 0, 0, 4, 0, 8, 72, -128, 64, 33, -128, 16, 0, -128, 0, 64, 32, 16, 0, -128, 0, 0, -108};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -3, -33, -1, -1, -1, -66, -2, -1, -17, -34, -9, -9, -1, -1, -9, -9, -1, -17, -33, -34, -65, -75, -10, -17, -3, -3, -1, -1, -9, -19, -10, -1, -19, -19, -3, -5, -65, -7, -1, -1, -3, -5, -1, -1, -2, -9, -1, -1, -25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -65, -34, -1, -1, -9, -1, -1, -1, -17, -11, -1, -1, -3, -1, -1, -33, -1, 125, -3, -17, -33, -1, -5, -1, -1, -1, 111, -5, -1, -1, -3, 127, 127, -33, -3, -1, -1, -33, -1, -1, -1, -33, -1, -65, -3, -1, 127, -65, -1, -17, -7, -5, -65, -1, 31};
  // {10110000 01010000 00000000 00010000 00000000 01001110 00000000 10000100 00100000 00100000 00000000 01000000 00001000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {109, 93, 97, 43, -9, -1, -1, -1, -17, 47, 123, -49, 109, 8, 113};
  // {10110000 01010000 00000000 00010000 00000000 01001110 00000000 10000100 00100000 00100000 00000000 01000000 00001000 00000000 00000000 00000001 00010000 00000000 00001000 00000010}
  public static final byte[] GRPSPLIT3 = new byte[] {119, 113, 98, -40, 77, -71, 79, -35, -25, -18, -5, -5, -1, -1, -45, -25, -37, 59, 21, 87};
  // {10110000 01010000 00000000 00010000 00000000 01001110 00000000 10000100 00100000 00100000 00000000 01000000 00001000 00000000 00000000 00000001}
  public static final byte[] GRPSPLIT4 = new byte[] {-65, -20, 127, -17, -1, -1, -1, -1, -1, -1, -9, 91, -5, -55, -55, 2};
  // {10110000 01010000 00000000 00010000 00000000 01001110 00000000 10000100 00100000 00100000 00000000 01000000 00001000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {49, 70, -44, -39, -10, -1, -9, -1, -1, -1, -7, -3, -7, -34, 26};
  // {10110000 01010000 00000000 00010000 00000000 01001110 00000000 10000100 00100000 00100000 00000000 01000000 00001000 00000000 00000000 00000001 00010000 00000000 00001000 00000010}
  public static final byte[] GRPSPLIT6 = new byte[] {-25, -1, -33, -1, -2, -3, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -17, 61};
  // {10110000 01010000 00000000 00010000 00000000 01001110 00000000 10000100 00100000 00100000 00000000 01000000 00001000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1};
  // {10110000 01010000 00000000 00010000 00000000 01001110 00000000 10000100 00100000 00100000 00000000 01000000 00001000 00000000 00000000 00000001 00010000 00000000 00001000 00000010}
  public static final byte[] GRPSPLIT8 = new byte[] {-25, -1, -33, -1, -2, -3, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -17, 125};
  // {10110000 01010000 00000000 00010000 00000000 01001110 00000000 10000100 00100000 00100000 00000000 01000000 00001000 00000000 00000000 00000001 00010000 00000000 00001000 00000010 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-17, -67, -19, -13, 38, -128, -2, -43, 127, 70, -37, -97, 95, -35, 118, -1, -3, -42, 123, 55, 3};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {-81, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -65, -17, -1, -1, -1, -1, 127, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -2, -1, -1, -17, -33, -1, -1, -9, -1, -1, -1, -1, -33, -1, -2, -2, -3, -1, -1, -1, -1, -1, -17, -17, -1, -5, -1, -67, -26, -1, -3, -1, 127, -1, -9, -2, -7, -1, 127, -100, -1, -1, -1, -1, 23};
  // {10110000 01010000 00000000 00010000 00000000 01001110 00000000 10000100 00100000 00100000 00000000 01000000 00001000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-21, -10, -31, 109, -97, -9, -1, -1, -1, -1, -1, -65, 15, -113, -25};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -3, -1, -1, 124, -1, -1, -9, -1, -1, -9, -33, -1, 127, -33, -1, -1, 127, -17, -1, -1, -1, -1, -1, -2, -1, -33, -1, -1, -1, -33, -17, -1, -17, 127, -1, -1, -1, -1, -1, -9, -3, -1, -1, -1, -1, -1, -5, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -2, -1, -9, -1, -1, -1, -5, -5, -1, -1, -1, -1, -1, -5, -1, -1, -65, -1, -1, -1, -1, -17, -1, -1, -18, 111, -1, -1, 127, -1, -1, -1, -21, -1, -1, -1, 127, -9, -1, -33, -33, -1, -3, -1, -3, -1, -1, -2, -2, -1, -69, -17, -1, -1, 7};
  // {...4 0-bits}
  public static final byte[] GRPSPLIT13 = new byte[] {-123, 0, 16, 96, -128, 0, 0, 5, 0, 0, 9, 4, 4, 1, 4, 0, 0, 16, 8, 0, 0, 0, 32, 0, 0, 0, 4, 0, 0, 0, 4, 2, 0, 0, 16, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 2, 64, 0, 0, 1, 4, 0, -128, -128, 0, 0, 16, -128, 0, -126, 1, 0, 0, -128, 0, 0, 0, 0, 2, 2, 32, 18, 2, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 48, -43, 0, 4, 0, 0, 8, 64, 0, 64, 0, 32, 24, 2, -128, 0, 80};
  // {10110000 01010000 00000000 00010000 00000000 01001110 00000000 10000100 00100000 00100000 00000000 01000000 00001000 00000000 00000000 00000001}
  public static final byte[] GRPSPLIT14 = new byte[] {-35, 49, 75, -49, -58, -13, -35, 35, 108, 60, -17, 27, -81, -1, 119, 4};
  // {...3 0-bits... 10110000 01010000 00000000 00010000 00000000 01001110 00000000 10000100 00100000 00100000 00000000 01000000 00001000 00000000 00000000 00000001 00010000 00000000 00001000 00000010}
  public static final byte[] GRPSPLIT15 = new byte[] {-7, 8, 35, -64, 22, 4, 4, 0, 0, 64, 0, 0, 32, 0, 16, 42, 78, 64, -126, 48};
  // {...1 0-bits... 10110000 01010000 00000000 00010000 00000000 01001110 00000000 10000100 00100000 00100000 00000000 01000000 00001000 00000000 00000000 00000001}
  public static final byte[] GRPSPLIT16 = new byte[] {-101, -8, -92, 64, 2, 0, 2, 32, 0, 0, 50, 46, -62, 115, 5, 1};
  // {...10 0-bits... 10110000 01010000 00000000 00010000 00000000 01001110 00000000 10000100 00100000 00100000 00000000 01000000 00001000}
  public static final byte[] GRPSPLIT17 = new byte[] {35, -128, 20, 0, 0, 0, 0, 0, 0, 0, 16, 0, 68};
  // {10110000 01010000 00000000 00010000 00000000 01001110 00000000 10000100 00100000 00100000 00000000 01000000 00001000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, -1, -17, -1, -5, -3, -1, -1, -1, -1, -1, -17, -1, -1, 31};
  // {10110000 01010000 00000000 00010000 00000000 01001110 00000000 10000100 00100000 00100000 00000000 01000000 00001000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {71, -126, 0, 1, 0, 0, 0, 0, 0, 0, -95, 34, 0, 32, -128};
  // {10110000 01010000 00000000 00010000 00000000 01001110 00000000 10000100 00100000 00100000 00000000 01000000 00001000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {-3, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -33, -1, 15};
  // {...1 0-bits... 10110000 01010000 00000000 00010000 00000000 01001110 00000000 10000100 00100000 00100000 00000000 01000000 00001000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {123, 56, 84, 65, 13, 0, 2, 16, 0, -126, 1, 8, 117, -8, 5};
  // {}
  public static final byte[] GRPSPLIT22 = new byte[] {33, 32, 0, 0, 0, 0, 0, 0, 64, 0, -128, 0, 2, 0, -128, 2, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 8, -128, 0, 16, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 0, 64, 0, 0, 0, 32, 0, 0, 0, 2, 4, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4};
  // {...5 0-bits}
  public static final byte[] GRPSPLIT23 = new byte[] {1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 16, 0, 0, 20, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 64, 0, 0, -128, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 16, 32, 80, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 32};
  // {...1 0-bits... 10110000 01010000 00000000 00010000 00000000 01001110 00000000 10000100 00100000 00100000 00000000 01000000 00001000 00000000 00000000}
  public static final byte[] GRPSPLIT24 = new byte[] {21, 3, 81, 49, 20, 0, 0, 0, 16, 0, 4, 0, 8, 4, 3};
  // {...3 0-bits... 10110000 01010000 00000000 00010000 00000000 01001110 00000000 10000100 00100000 00100000 00000000 01000000 00001000 00000000 00000000 00000001 00010000 00000000 00001000 00000010}
  public static final byte[] GRPSPLIT25 = new byte[] {5, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6};
}

class GBMModel__8fe38c53c0ae591a42846386ad74498e_Forest_2 {
  public static void score0(float[] fdata, float[] preds) {
    preds[1] += GBMModel__8fe38c53c0ae591a42846386ad74498e_Tree_2_class_0.score0(fdata);
  }
}
class GBMModel__8fe38c53c0ae591a42846386ad74498e_Tree_2_class_0 {
  static final float score0(float[] data) {
    float pred =  (!GenModel.bitSetContains(GRPSPLIT0, 0, (int) data[10 /* night_charge */])
      ? (!GenModel.bitSetContains(GRPSPLIT1, 0, (int) data[6 /* eve_calls */])
        ? (!GenModel.bitSetContains(GRPSPLIT2, 0, (int) data[10 /* night_charge */])
          ? -0.5108915f
          : (!GenModel.bitSetContains(GRPSPLIT3, 0, (int) data[10 /* night_charge */])
            ? (data[2 /* day_mins */] <1377.0f ? -0.50708544f : 0.73912513f)
            : (!GenModel.bitSetContains(GRPSPLIT4, 1, (int) data[9 /* night_calls */]) ? 1.7180393f : 2.7062154f)))
        : (!GenModel.bitSetContains(GRPSPLIT5, 0, (int) data[11 /* intl_mins */])
          ? (!GenModel.bitSetContains(GRPSPLIT6, 0, (int) data[3 /* day_calls */])
            ? (!GenModel.bitSetContains(GRPSPLIT7, 0, (int) data[9 /* night_calls */]) ? 0.0f : 1.6474304f)
            : 1.9476922f)
          : (!GenModel.bitSetContains(GRPSPLIT8, 1, (int) data[9 /* night_calls */])
            ? (!GenModel.bitSetContains(GRPSPLIT9, 0, (int) data[11 /* intl_mins */]) ? 3.051857f : 0.4136772f)
            : (!GenModel.bitSetContains(GRPSPLIT10, 16, (int) data[9 /* night_calls */]) ? -0.26928473f : -1.5723959f))))
      : (!GenModel.bitSetContains(GRPSPLIT11, 21, (int) data[10 /* night_charge */])
        ? (data[4 /* day_charge */] <1527.5f
          ? (!GenModel.bitSetContains(GRPSPLIT12, 8, (int) data[10 /* night_charge */])
            ? (!GenModel.bitSetContains(GRPSPLIT13, 0, (int) data[3 /* day_calls */]) ? 0.14097905f : -0.3942628f)
            : (!GenModel.bitSetContains(GRPSPLIT14, 4, (int) data[11 /* intl_mins */]) ? -0.32333434f : -0.6090209f))
          : (!GenModel.bitSetContains(GRPSPLIT15, 0, (int) data[4 /* day_charge */])
            ? (!GenModel.bitSetContains(GRPSPLIT16, 0, (int) data[2 /* day_mins */]) ? 0.42610565f : 0.0f)
            : 0.0f))
        : (!GenModel.bitSetContains(GRPSPLIT17, 6, (int) data[11 /* intl_mins */])
          ? (!GenModel.bitSetContains(GRPSPLIT18, 0, (int) data[3 /* day_calls */])
            ? (!GenModel.bitSetContains(GRPSPLIT19, 0, (int) data[3 /* day_calls */]) ? -0.27875325f : 0.0f)
            : -0.6573294f)
          : (!GenModel.bitSetContains(GRPSPLIT20, 3, (int) data[3 /* day_calls */])
            ? (!GenModel.bitSetContains(GRPSPLIT21, 9, (int) data[9 /* night_calls */]) ? -0.9428022f : -3.0194993f)
            : -1.9847294f))));
    return pred;
  }
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -5, -5, -1, -3, -3, -1, -1, -1, 119, 127, -41, -17, -1, -66, -1, -81, -1, -6, -33, -2, -1, 119, 126, -19, -33, -3, -1, -1, -73, -17, -5, -1, -17, -3, -3, -5, -2, -1, 127, -1, -3, -1, -1, -1, -2, -9, -9, -1, -17, -1, -33, -1, -1, -1, -1, -65, -1, -1, -1, -65, -1, -71, -1, -1, -1, -1, -1, -1, -9, -1, 127, -1, -1, -36, -1, -33, -1, -1, -9, -1, -1, -1, -33, -1, -1, -1, -33, -49, -5, -1, -10, -5, -1, -41, -17, -1, -1, -1, -17, -5, -1, 63, -11, -65, -69, -21, -1, 127, -3, -1, 94, 127, -1, -17, -17, 23};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 11011111 11011111 11111111 10111111 10111111 11111111 11111111 11111111}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -3, -1, -9, 117, -5, -35, -17, 127, 127, -73, -45, -100, -19, -12, 7};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, 127, 127, -1, -1, -1, -1, -1, -1, -3, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -9, -9, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -49, -3, -1, -1, -2, -1, 95, -1, -1, -33, -1, -1, -1, -1, 3};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, 127, 127, -1, -1, -1, -1, -1, -1, -3, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -9, -9, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -49, -3, -1, -1, -2, -1, 95, -1, -1, -33, -1, -1, -1, 7};
  // {...1 0-bits... 10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 11011111 11011111 11111111 10111111 10111111 11111111 11111111}
  public static final byte[] GRPSPLIT4 = new byte[] {71, -41, -58, 86, 127, -1, -1, -1, -1, -1, -1, -35, 125, -13, 55};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 11011111 11011111 11111111 10111111 10111111 11111111 11111111 11111111 11101110 11111110 11101011 11110111 11111111}
  public static final byte[] GRPSPLIT5 = new byte[] {-65, -33, -2, -1, 127, -81, -5, -1, -1, -49, -1, -1, -1, -1, -1, -65, 119, -35, -4, -19, 3};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 11011111 11011111 11111111 10111111 10111111 11111111 11111111}
  public static final byte[] GRPSPLIT6 = new byte[] {95, -49, 126, -2, -2, -1, -1, 127, -1, 127, 127, -17, -37, -35, 36};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 11011111 11011111 11111111 10111111 10111111 11111111 11111111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, 127, -1, -1, 47};
  // {...1 0-bits... 10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 11011111 11011111 11111111 10111111 10111111 11111111 11111111}
  public static final byte[] GRPSPLIT8 = new byte[] {-17, -1, -3, -2, -1, -1, -1, -1, -1, -1, -65, -1, -27, -57, 123};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 11011111 11011111 11111111 10111111 10111111 11111111 11111111 11111111 11101110 11111110 11101011 11110111 11111111}
  public static final byte[] GRPSPLIT9 = new byte[] {95, 123, -33, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -41, 3};
  // {...16 0-bits... 10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 11011111 11011111 11111111 10111111 10111111}
  public static final byte[] GRPSPLIT10 = new byte[] {3, 8, -128, 0, 0, 0, 2, 0, 0, 0, 0, 0, 32};
  // {...21 0-bits... 10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 11011111 11011111 11111111 10111111 10111111 11111111 11111111 11111111 11101110 11111110 11101011 11110111 11111111 01111101 11111111 11110101 11111111 01011111 11111011 01111111 11111111 11101110 01111110 10110111 11111011 10111111 11111111 11111111 11101101 11110111 11011111 11111111 11110111 10111111 10111111 11011111 01111111 11111111 11111110 11111111 10111111 11111111 11111111 11111111 01111111 11101111 11101111 11111111 11110111 11111111 11111011 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111101 11111111 10011101 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111110 11111111 11111111 00111011 11111111 11111011 11111111 11111111 11101111 11111111 11111111 11111111 11111011 11111111 11111111 11111111 11111011 11110011 11011111 11111111 01101111 11011111 11111111 11101011 11110111 11111111 11111111 11111111 11110111 11011111 11111111 11111100 10101111 11111101 11011101}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, -128, 64, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 1, 32, 33, 0, 0, 0, 4, 0, 0, 0, 0, -128, 4, 16, 0, 0, 16, 2, 0, 0, 0, 0, 0, 16, 0, 0, 0, 2, 0, 16, 0, 32, 4};
  // {...8 0-bits}
  public static final byte[] GRPSPLIT12 = new byte[] {3, 0, 4, 12, 1, 16, 49, 0, 16, 16, 64, 8, 0, 0, 0, 0, 0, 0, 1, 0, 4, 64, 8, 32, 0, 32, 0, 0, 0, 2, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 0, 64, 12, 0, 40, 0, 0, 0, 16, 1, 0, 96, -53, -128, 4, 0, 0, -126, 0, 1, 1, 64, 2, 8, 1, 0, -126, 0, 0, 0, 1, 16, 8, -124, 81, 33, 0, 16, -128, 0, 0, 0, 9, 16, 0, 66, 16, 9, 1};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 11011111 11011111 11111111 10111111 10111111 11111111 11111111}
  public static final byte[] GRPSPLIT13 = new byte[] {127, -85, -1, -19, -33, -70, -83, -107, -19, 126, -49, -70, -35, -21, 125};
  // {...4 0-bits... 10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 11011111 11011111 11111111 10111111 10111111 11111111 11111111 11111111 11101110 11111110 11101011 11110111}
  public static final byte[] GRPSPLIT14 = new byte[] {-119, -74, -48, 1, -44, 33, 47, 0, 0, 16, 0, 68, 64, 36, 0, -84, 0, 65, 30, 49};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 11011111 11011111 11111111 10111111 10111111 11111111 11111111 11111111 11101110}
  public static final byte[] GRPSPLIT15 = new byte[] {-61, -2, 63, 78, 38, -73, 79, -59, 52, -34, 38, -95, -55, -1, -14, -1, -1};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 11011111 11011111 11111111 10111111 10111111 11111111 11111111 11111111 11101110}
  public static final byte[] GRPSPLIT16 = new byte[] {-61, -2, 63, 78, -90, 110, -87, 88, -115, -73, 73, 104, -22, -1, -14, -1, -1};
  // {...6 0-bits... 10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 11011111 11011111 11111111 10111111 10111111 11111111 11111111 11111111 11101110 11111110 11101011 11110111}
  public static final byte[] GRPSPLIT17 = new byte[] {-121, 82, 6, 8, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 4, -124, 10};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 11011111 11011111 11111111 10111111 10111111 11111111 11111111}
  public static final byte[] GRPSPLIT18 = new byte[] {65, 32, 6, 0, 0, 4, 0, 0, 0, 0, 64, 16, 1, 1, 20};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 11011111 11011111 11111111 10111111 10111111 11111111 11111111}
  public static final byte[] GRPSPLIT19 = new byte[] {65, 32, 4, 0, 0, 4, 0, 0, 0, 0, 64, 16, 1, 1, 20};
  // {...3 0-bits... 10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 11011111 11011111 11111111 10111111 10111111 11111111}
  public static final byte[] GRPSPLIT20 = new byte[] {97, 3, 20, 8, 0, 0, 0, 0, 0, 0, 0, 17, -128, -49};
  // {...9 0-bits... 10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 11011111 11011111 11111111 10111111 10111111 11111111}
  public static final byte[] GRPSPLIT21 = new byte[] {-119, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 32, 108};
}

class GBMModel__8fe38c53c0ae591a42846386ad74498e_Forest_3 {
  public static void score0(float[] fdata, float[] preds) {
    preds[1] += GBMModel__8fe38c53c0ae591a42846386ad74498e_Tree_3_class_0.score0(fdata);
  }
}
class GBMModel__8fe38c53c0ae591a42846386ad74498e_Tree_3_class_0 {
  static final float score0(float[] data) {
    float pred =  (!GenModel.bitSetContains(GRPSPLIT0, 10, (int) data[10 /* night_charge */])
      ? (!GenModel.bitSetContains(GRPSPLIT1, 0, (int) data[10 /* night_charge */])
        ? (!GenModel.bitSetContains(GRPSPLIT2, 0, (int) data[11 /* intl_mins */])
          ? (!GenModel.bitSetContains(GRPSPLIT3, 0, (int) data[6 /* eve_calls */])
            ? (!GenModel.bitSetContains(GRPSPLIT4, 0, (int) data[3 /* day_calls */]) ? 2.0622127f : 1.2703419f)
            : 0.43774578f)
          : (!GenModel.bitSetContains(GRPSPLIT5, 0, (int) data[6 /* eve_calls */])
            ? (!GenModel.bitSetContains(GRPSPLIT6, 0, (int) data[3 /* day_calls */]) ? 0.60628563f : 0.74393857f)
            : -0.34291688f))
        : (!GenModel.bitSetContains(GRPSPLIT7, 0, (int) data[9 /* night_calls */])
          ? (!GenModel.bitSetContains(GRPSPLIT8, 0, (int) data[10 /* night_charge */])
            ? (!GenModel.bitSetContains(GRPSPLIT9, 0, (int) data[11 /* intl_mins */]) ? 1.8404531f : 0.51928294f)
            : (!GenModel.bitSetContains(GRPSPLIT10, 0, (int) data[10 /* night_charge */]) ? -0.03937505f : -0.11912642f))
          : (!GenModel.bitSetContains(GRPSPLIT11, 18, (int) data[10 /* night_charge */])
            ? (!GenModel.bitSetContains(GRPSPLIT12, 2, (int) data[10 /* night_charge */]) ? -0.2688913f : -0.48101485f)
            : (!GenModel.bitSetContains(GRPSPLIT13, 12, (int) data[11 /* intl_mins */]) ? -0.5338435f : -1.5753311f))))
      : (!GenModel.bitSetContains(GRPSPLIT14, 1, (int) data[6 /* eve_calls */])
        ? (!GenModel.bitSetContains(GRPSPLIT15, 9, (int) data[9 /* night_calls */])
          ? (!GenModel.bitSetContains(GRPSPLIT16, 1, (int) data[3 /* day_calls */])
            ? (!GenModel.bitSetContains(GRPSPLIT17, 1, (int) data[3 /* day_calls */]) ? -0.12561399f : 0.0f)
            : 0.49751467f)
          : (!GenModel.bitSetContains(GRPSPLIT18, 16, (int) data[11 /* intl_mins */])
            ? (!GenModel.bitSetContains(GRPSPLIT19, 16, (int) data[3 /* day_calls */]) ? -0.51329035f : 0.0f)
            : -1.9997023f))
        : (!GenModel.bitSetContains(GRPSPLIT20, 6, (int) data[11 /* intl_mins */])
          ? (!GenModel.bitSetContains(GRPSPLIT21, 0, (int) data[10 /* night_charge */]) ? 0.0f : 0.5887658f)
          : (!GenModel.bitSetContains(GRPSPLIT22, 0, (int) data[3 /* day_calls */])
            ? (!GenModel.bitSetContains(GRPSPLIT23, 1, (int) data[3 /* day_calls */]) ? -3.1531842f : 0.0f)
            : -2.4179358f))));
    return pred;
  }
  // {...10 0-bits}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0, 0, 0, 0, 0, 32, 32, 10, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 32, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 10, 4, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 5, 0, -96, 0, 64, 0, 32};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -33, -2, -4, -4, -66, -69, -1, -1, -46, 127, -1, -17, -2, -9, 117, -1, -65, -49, -34, -67, -3, -3, -19, -1, -65, -33, -1, -69, -81, -1, -1, -49, -1, -4, -5, -65, -3, -1, -17, -5, -1, -33, -1, -1, -9, -9, -1, -9, -1, -34, -1, -1, -1, -1, -75, -1, -1, -1, -97, -1, -69, -34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -2, -3, -1, -1, -5, -65, -37, -25, -11, -33, -50, 127, -33, -1, -35, -3, 111, -1, -65, -1, -9, 94, -17, -1, -1, -33, -5, 63, -41, -1, -33, 127, -1, -49, -12, -1, -65, -19, 27};
  // {10110000 01010000 00000000 01010000 00000000 00001110 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000100 01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {95, -13, -14, -6, 7, -40, 115, -9, -1, -10, -1, -1, -1, -41, -98, -29, -97, -9, 61, 94, 2};
  // {10110000 01010000 00000000 01010000 00000000 00001110 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100}
  public static final byte[] GRPSPLIT3 = new byte[] {-107, 95, -1, -98, -65, -1, -1, -1, 127, -1, -17, 63, -5, -1, -73, 7};
  // {10110000 01010000 00000000 01010000 00000000 00001110 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-29, -22, -1, -65, -1, -3, -1, -1, -9, -1, -1, -33, -82, -27, 31};
  // {10110000 01010000 00000000 01010000 00000000 00001110 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100}
  public static final byte[] GRPSPLIT5 = new byte[] {-17, -115, -1, -33, -5, -17, -1, -1, 127, -1, -1, -95, 63, -2, 127, 7};
  // {10110000 01010000 00000000 01010000 00000000 00001110 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-3, -4, -82, -2, -1, -1, -10, -1, -1, -1, -1, 127, -6, 123, 63};
  // {10110000 01010000 00000000 01010000 00000000 00001110 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-65, -73, -46, -47, -10, -100, -26, -45, 27, 63, -19, 29, -69, -21, -99};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -33, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -35, -1, -1, 127, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -2, 127, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -5, -1, 31};
  // {10110000 01010000 00000000 01010000 00000000 00001110 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000100 01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-9, -1, -1, -33, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -3, -3, -65, -1, 1};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -18, -1, -1, -5, -21, 123, -25, -1, -5, -1, -1, -9, -33, -1, -1, -1, -1, -1, -1, -33, -3, -69, -1, -1, -1, -2, -1, -3, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -33, -1, -5, -9, 122, -1, -5, -9, -5, -1, -1, -97, -1, -2, -1, -1, -1, -1, 127, -17, -13, -1, -1, -1, -1, -1, -1, 127, 127, -1, -13, -33, -10, -1, -1, -2, -1, -33, -1, -1, -1, -6, -9, -65, -1, -33, -23, -9, -1, 7};
  // {...18 0-bits}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, -128, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 32, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 4, 0, 0, -128, 2, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 1, 1};
  // {...2 0-bits... 10110000 01010000 00000000 01010000 00000000 00001110 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000100 01010000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 10000000 00000000 01010000 00100000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 10000000 10100000 00000000 00000101 00000000 00000010}
  public static final byte[] GRPSPLIT12 = new byte[] {-63, 0, 0, 0, 2, 14, 104, 12, -128, 4, 64, 0, 18, 16, 16, 12, 0, 0, 4, 1, 0, 4, 98, 1, 0, 16, 8, 0, 68, 0, -126, 0, 0, 0, 0, 0, 66, 0, 64, 0, 34, 0, 8, 0, 3, 0, 0, 32, 0, 9, 0, 0, 64, 0, 2, 33, 64, -128, -128, 0, 0, 32, 8, 0, 0, -112, 0, 16, 0, 0, -114, 66, 0, 64, 4, 3, 66, 8, 19, -128, 8, 64, -128, 0, 0, 65, -120, 32, 1, 0, -62, 2, 0, 32, 64, 96, 0, 30, -128, 16, 80, 0, 48, 0, 4, -124, 0, -63, 2, 20, 0, 0, 64, 11, 0, 0, 2};
  // {...12 0-bits... 10110000 01010000 00000000 01010000 00000000 00001110 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000100 01010000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-127, 1, 0, 8, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 32, -96, 2, 1};
  // {...1 0-bits... 10110000 01010000 00000000 01010000 00000000 00001110 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 64, 4, 4, 5, 26, 0, 0, 32, 0, 76, -112, 49, -119, 1, 1};
  // {...9 0-bits... 10110000 01010000 00000000 01010000 00000000 00001110 00000000 10000000 00000000 00000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {3, 0, 0, 0, 0, 2, 0, 0, 0, 1, 8, 50, 1};
  // {...1 0-bits... 10110000 01010000 00000000 01010000 00000000 00001110 00000000 10000000 00000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8};
  // {...1 0-bits... 10110000 01010000 00000000 01010000 00000000 00001110 00000000 10000000 00000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8};
  // {...16 0-bits... 10110000 01010000 00000000 01010000 00000000 00001110 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000100 01010000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -120, 1, 2, 16};
  // {...16 0-bits... 10110000 01010000 00000000 01010000 00000000 00001110 00000000 10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2};
  // {...6 0-bits... 10110000 01010000 00000000 01010000 00000000 00001110 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000100 01010000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {-55, 5, 76, 103, 0, 0, 0, 2, 0, 32, 0, 0, 0, 0, 0, 1, -54, 5, 73, 4};
  // {}
  public static final byte[] GRPSPLIT21 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, 63};
  // {10110000 01010000 00000000 01010000 00000000 00001110 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {-77, 23, 2, 16, 0, 0, 0, 0, 0, 0, 32, 9, 64, 4, 58};
  // {...1 0-bits... 10110000 01010000 00000000 01010000 00000000 00001110 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {17, 10, 1, 8, 0, 0, 0, 0, 0, 0, -112, 4, 32, 2, 17};
}

class GBMModel__8fe38c53c0ae591a42846386ad74498e_Forest_4 {
  public static void score0(float[] fdata, float[] preds) {
    preds[1] += GBMModel__8fe38c53c0ae591a42846386ad74498e_Tree_4_class_0.score0(fdata);
  }
}
class GBMModel__8fe38c53c0ae591a42846386ad74498e_Tree_4_class_0 {
  static final float score0(float[] data) {
    float pred =  (!GenModel.bitSetContains(GRPSPLIT0, 0, (int) data[10 /* night_charge */])
      ? (!GenModel.bitSetContains(GRPSPLIT1, 0, (int) data[11 /* intl_mins */])
        ? (!GenModel.bitSetContains(GRPSPLIT2, 0, (int) data[10 /* night_charge */])
          ? (!GenModel.bitSetContains(GRPSPLIT3, 0, (int) data[6 /* eve_calls */])
            ? (!GenModel.bitSetContains(GRPSPLIT4, 0, (int) data[6 /* eve_calls */]) ? -0.5153f : 0.8823683f)
            : 0.7991908f)
          : (!GenModel.bitSetContains(GRPSPLIT5, 0, (int) data[10 /* night_charge */])
            ? 0.0f
            : (!GenModel.bitSetContains(GRPSPLIT6, 0, (int) data[10 /* night_charge */]) ? 0.34891382f : 0.55097514f)))
        : (!GenModel.bitSetContains(GRPSPLIT7, 30, (int) data[10 /* night_charge */])
          ? (!GenModel.bitSetContains(GRPSPLIT8, 84, (int) data[10 /* night_charge */])
            ? (!GenModel.bitSetContains(GRPSPLIT9, 84, (int) data[10 /* night_charge */]) ? 0.010846069f : 0.0f)
            : 0.0f)
          : (!GenModel.bitSetContains(GRPSPLIT10, 0, (int) data[6 /* eve_calls */])
            ? (!GenModel.bitSetContains(GRPSPLIT11, 0, (int) data[11 /* intl_mins */]) ? 0.55934346f : -0.55752486f)
            : (!GenModel.bitSetContains(GRPSPLIT12, 0, (int) data[11 /* intl_mins */]) ? 0.76721597f : 0.065127335f))))
      : (!GenModel.bitSetContains(GRPSPLIT13, 83, (int) data[10 /* night_charge */])
        ? (!GenModel.bitSetContains(GRPSPLIT14, 21, (int) data[6 /* eve_calls */])
          ? (!GenModel.bitSetContains(GRPSPLIT15, 4, (int) data[3 /* day_calls */])
            ? (!GenModel.bitSetContains(GRPSPLIT16, 0, (int) data[10 /* night_charge */]) ? 0.03903669f : 0.01766118f)
            : (!GenModel.bitSetContains(GRPSPLIT17, 17, (int) data[10 /* night_charge */]) ? -0.37341073f : -0.21644446f))
          : -0.928862f)
        : (!GenModel.bitSetContains(GRPSPLIT18, 2, (int) data[3 /* day_calls */])
          ? (!GenModel.bitSetContains(GRPSPLIT19, 0, (int) data[11 /* intl_mins */])
            ? (!GenModel.bitSetContains(GRPSPLIT20, 0, (int) data[12 /* intl_calls */]) ? 0.6424087f : 0.55867565f)
            : -0.32925746f)
          : -1.2399261f)));
    return pred;
  }
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-17, -33, -33, -5, -5, -43, -66, -33, -1, 119, 93, -76, -17, -1, -2, -9, -9, -17, 94, -33, -98, -67, 119, -12, -19, 126, -3, -49, -5, -65, -17, -33, -1, -123, -17, -4, -5, -65, -7, -1, -17, -5, -1, -33, -1, -2, -9, -9, -1, -17, -1, -34, -1, -1, -1, -1, -3, -2, -1, -1, -65, -5, -67, -50, -1, -1, -9, -65, -29, 119, -1, -11, 126, -1, 78, -2, -17, -1, 94, 127, -7, -17, -9, -33, 123, 126, 26, -57, -33, -11, -2, -1, -33, -1, 91, 90, -68, -26, -73, 108, -25, -98, -65, -17, -69, -65, -43, -1, -43, -20, 127, -1, -65, -37, 46, -2, 31};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11110111 11111011 11111011 11011111 11011111 10101011 01111101 11111011 11111111 11101110 10111010 00101101 11110111 11111111}
  public static final byte[] GRPSPLIT1 = new byte[] {63, -97, 39, 38, -122, -39, -3, -34, 127, -41, -5, -1, 95, -1, 111, -2, 117, -67, -128, -9, 3};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -3, -1, -9, 103, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -9, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, 127, -1, -3, -9, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, 127, -1, -2, -1, -1, -1, -65, -5, 127, -1, -1, -33, -1, -1, -1, -1, -1, 15};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11110111 11111011 11111011 11011111 11011111 10101011 01111101 11111011 11111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-33, -13, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, 3};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11110111 11111011 11111011 11011111 11011111 10101011 01111101 11111011 11111111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -3, -1, -9, 111, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -5, -1, -33, -1, -9, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -9, -73, -1, 127, -1, -67, -9, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, 127, -1, -2, -1, -1, -1, -1, -5, 127, -1, -1, -33, -1, -1, -1, -1, -1, 31};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11110111 11111011 11111011 11011111 11011111 10101011 01111101 11111011 11111111 11101110 10111010 00101101 11110111 11111111 01111111 11101111 11101111 11110111 01111010 11111011 01111001 10111101 11101110 00101111 10110111 01111110 10111111 11110011 11011111 11111101 11110111 11111011 11111111 10100001 11110111 00111111 11011111 11111101 10011111 11111111 11110111 11011111 11111111 11111011 11111111 01111111 11101111 11101111 11111111 11110111 11111111 01111011 11111111 11111111 11111111 11111111 10111111 01111111 11111111 11111111 11111101 11011111 10111101 01110011 11111111 11111111 11101111 11111101 11000111 11101110 11111111 10101111 01111110 11111111 01110010 01111111 11110111 11111111 01111010 11111110 10011111 11110111 11101111 11111011 11011110 01111110 01011000 11100011 11111011 10101111 01111111 11111111 11111011 11111111 11011010 01011010 00111101 01100111 11101101 00110110 11100111 01111001 11111101 11110111 11011101 11111101 10101011}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -3, -1, -9, 111, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -5, -1, -33, -1, -9, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -9, -73, -1, 127, -1, -67, -9, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, 127, -1, -2, -1, -1, -1, -1, -5, 127, -1, -1, -33, -1, -1, -1, -1, 31};
  // {...30 0-bits}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 8, 16, 8, 0, -94, 96, 18, 0, 0, 0, 2, 0, 0, 8, 0, 0, 16, -96, -128, 0, 32, 0, 4, 0, 0, 0, 0, 0, 10, 68, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 1, 0, -128, 2, 32, 64, 76, 0, 0, 0, 32, 32, 1, 0, 2, 8, 97, 32, 56, 2, -128, 0, 0, 0, 0, 0, 8, -64, 0, 0, -62, 4, 64, 16, 16, 0, 17, -128, 2, 0, -120, 4, 0, 0, 0, 9, 68};
  // {...84 0-bits}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 64, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 4, -128, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8};
  // {...84 0-bits}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 64, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 4, -128, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11110111 11111011 11111011 11011111 11011111 10101011 01111101 11111011 11111111}
  public static final byte[] GRPSPLIT10 = new byte[] {-97, -66, 63, -3, -1, -1, -1, -41, -1, -1, -1, -1, -33, -97, -17, 3};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11110111 11111011 11111011 11011111 11011111 10101011 01111101 11111011 11111111 11101110 10111010 00101101 11110111 11111111}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -37, 3};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11110111 11111011 11111011 11011111 11011111 10101011 01111101 11111011 11111111 11101110 10111010 00101101 11110111 11111111}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, 3};
  // {...83 0-bits}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2};
  // {...21 0-bits... 10110000 01010000 00000000 00000000 00000000 10101110 00000000 11110111}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, -122, 64, 0, 4, 0, 8};
  // {...4 0-bits... 10110000 01010000 00000000 00000000 00000000 10101110 00000000 11110111 11111011 11111011 11011111 11011111 10101011 01111101 11111011}
  public static final byte[] GRPSPLIT15 = new byte[] {89, 37, 0, -83, -78, -123, 58, 0, -2, -95, -81, 112, -6, -15, 7};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11110111 11111011 11111011 11011111 11011111 10101011 01111101 11111011 11111111 11101110 10111010 00101101 11110111 11111111 01111111 11101111 11101111 11110111 01111010 11111011 01111001 10111101 11101110 00101111 10110111 01111110 10111111 11110011 11011111 11111101 11110111 11111011 11111111 10100001 11110111 00111111 11011111 11111101 10011111 11111111 11110111 11011111 11111111 11111011 11111111 01111111 11101111 11101111 11111111 11110111 11111111 01111011 11111111 11111111 11111111 11111111 10111111 01111111 11111111 11111111 11111101 11011111 10111101 01110011 11111111 11111111 11101111 11111101 11000111 11101110 11111111 10101111 01111110 11111111 01110010 01111111 11110111 11111111 01111010 11111110 10011111 11110111 11101111 11111011 11011110 01111110 01011000 11100011 11111011 10101111 01111111 11111111 11111011 11111111 11011010 01011010 00111101 01100111 11101101 00110110 11100111 01111001 11111101 11110111 11011101 11111101 10101011 11111111 10101011 00110111}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, -1, -3, -1, -1, -1, -1, -1, -1, 127, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -3, -1, -1, -17, -1, -1, -33, -1, -33, -1, -1, -9, -1, 127, -1, -68, -2, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -2, -2, -3, -2, 11};
  // {...17 0-bits}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0, 0, 0, 0, 64, 0, 8, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 16, 0, 2, 0, 0, 0, 0, 0, -128, -96, 16, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 4, -128, 0, -128};
  // {...2 0-bits... 10110000 01010000 00000000 00000000 00000000 10101110 00000000 11110111 11111011 11111011 11011111 11011111 10101011 01111101 11111011}
  public static final byte[] GRPSPLIT18 = new byte[] {3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 8, 8, 0, 2};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11110111 11111011 11111011 11011111 11011111 10101011 01111101 11111011 11111111 11101110 10111010 00101101 11110111 11111111}
  public static final byte[] GRPSPLIT19 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -67, -1, 1};
  // {10110000 01010000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {-3, -1, 30, 0};
}

class GBMModel__8fe38c53c0ae591a42846386ad74498e_Forest_5 {
  public static void score0(float[] fdata, float[] preds) {
    preds[1] += GBMModel__8fe38c53c0ae591a42846386ad74498e_Tree_5_class_0.score0(fdata);
  }
}
class GBMModel__8fe38c53c0ae591a42846386ad74498e_Tree_5_class_0 {
  static final float score0(float[] data) {
    float pred =  (!GenModel.bitSetContains(GRPSPLIT0, 0, (int) data[10 /* night_charge */])
      ? (!GenModel.bitSetContains(GRPSPLIT1, 0, (int) data[11 /* intl_mins */])
        ? (!GenModel.bitSetContains(GRPSPLIT2, 0, (int) data[3 /* day_calls */])
          ? (!GenModel.bitSetContains(GRPSPLIT3, 1, (int) data[9 /* night_calls */])
            ? (!GenModel.bitSetContains(GRPSPLIT4, 0, (int) data[10 /* night_charge */]) ? 0.0f : 0.8400191f)
            : 0.3055923f)
          : (!GenModel.bitSetContains(GRPSPLIT5, 0, (int) data[3 /* day_calls */])
            ? 0.0f
            : (!GenModel.bitSetContains(GRPSPLIT6, 0, (int) data[3 /* day_calls */]) ? -0.51638985f : 0.40460843f)))
        : (!GenModel.bitSetContains(GRPSPLIT7, 9, (int) data[10 /* night_charge */])
          ? (!GenModel.bitSetContains(GRPSPLIT8, 7, (int) data[10 /* night_charge */])
            ? (!GenModel.bitSetContains(GRPSPLIT9, 2, (int) data[6 /* eve_calls */]) ? -0.25765067f : -0.10622568f)
            : -0.5260097f)
          : -0.50932735f))
      : -0.17998485f);
    return pred;
  }
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-81, -47, -33, -2, -12, -11, -17, -18, -1, 127, 94, -43, -17, -65, -2, -9, -11, -1, 46, -34, -97, -7, -1, 118, -19, -1, -97, -49, -5, -69, -83, -33, -1, -19, -1, -3, -5, -65, -5, -1, -1, -7, -5, -33, -1, -2, -9, -9, -1, -9, -1, -34, -1, -1, -1, -1, -75, -2, -1, -1, -97, -5, -3, -2, -17, -65, -9, -1, -25, -9, -57, -1, -1, -9, 95, 127, -17, 123, -35, -1, -35, -17, -1, -67, -1, -89, -7, -49, 111, 127, -33, -10, 123, -1, 123, 91, -65, -14, -1, -101, -75, -1, 127, -1, -1, -65, 59, -65, -14, -67, 125, 111, -19, -11, -5, -7, 31};
  // {10110011 01010000 00000000 00000000 00000000 10101110 00000000 11110101 10001011 11111011 01111111 00101111 10101111 11110111 01110111 11111111 11111110 01111010 10101011 11110111 11111101}
  public static final byte[] GRPSPLIT1 = new byte[] {7, -96, -40, -22, -56, -96, -9, -18, 62, -1, -33, -33, 95, -33, -66, -41, 121, -115, 118, 2, 2};
  // {10110011 01010000 00000000 00000000 00000000 10101110 00000000 11110101 10001011 11111011 01111111 00101111 10101111 11110111 01110111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -3, -49, -5, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, 63};
  // {...1 0-bits... 10110011 01010000 00000000 00000000 00000000 10101110 00000000 11110101 10001011 11111011 01111111 00101111 10101111 11110111 01110111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -11, -1, 127, -3, -1, -1, -1, -1, -1, -2, -1, -1, -1, 127};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63};
  // {10110011 01010000 00000000 00000000 00000000 10101110 00000000 11110101 10001011 11111011 01111111 00101111 10101111 11110111 01110111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -33, -5, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, 63};
  // {10110011 01010000 00000000 00000000 00000000 10101110 00000000 11110101 10001011 11111011 01111111 00101111 10101111 11110111 01110111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -33, -5, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, 31};
  // {...9 0-bits}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 16, 0, 0, 0, 0, 0, 8, 0, -127, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 32, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, -128, 0, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 16};
  // {...7 0-bits}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 16, 0, 0, 0, 0, 0, 8, 0, -127, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 32, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, -128, 0, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 16};
  // {...2 0-bits... 10110011 01010000 00000000 00000000 00000000 10101110 00000000 11110101 10001011 11111011 01111111 00101111 10101111}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 18, 1, 16, 16, 0, 0, 0, 0, 0, 0, 2, 2};
}

class GBMModel__8fe38c53c0ae591a42846386ad74498e_Forest_6 {
  public static void score0(float[] fdata, float[] preds) {
    preds[1] += GBMModel__8fe38c53c0ae591a42846386ad74498e_Tree_6_class_0.score0(fdata);
  }
}
class GBMModel__8fe38c53c0ae591a42846386ad74498e_Tree_6_class_0 {
  static final float score0(float[] data) {
    float pred =  (!GenModel.bitSetContains(GRPSPLIT0, 0, (int) data[10 /* night_charge */])
      ? (!GenModel.bitSetContains(GRPSPLIT1, 0, (int) data[11 /* intl_mins */])
        ? (!GenModel.bitSetContains(GRPSPLIT2, 0, (int) data[10 /* night_charge */])
          ? (!GenModel.bitSetContains(GRPSPLIT3, 0, (int) data[3 /* day_calls */]) ? 0.5301745f : 0.8728363f)
          : 0.4925787f)
        : (!GenModel.bitSetContains(GRPSPLIT4, 0, (int) data[9 /* night_calls */])
          ? (!GenModel.bitSetContains(GRPSPLIT5, 1, (int) data[10 /* night_charge */])
            ? (data[2 /* day_mins */] <1190.0f ? -0.50236875f : 0.5536078f)
            : (!GenModel.bitSetContains(GRPSPLIT6, 1, (int) data[10 /* night_charge */]) ? 0.0f : 0.3942754f))
          : (!GenModel.bitSetContains(GRPSPLIT7, 34, (int) data[10 /* night_charge */])
            ? (!GenModel.bitSetContains(GRPSPLIT8, 34, (int) data[10 /* night_charge */]) ? -0.16239366f : 0.0f)
            : (data[4 /* day_charge */] <1430.0f ? -0.5313204f : 0.5615985f))))
      : (!GenModel.bitSetContains(GRPSPLIT9, 11, (int) data[11 /* intl_mins */])
        ? (!GenModel.bitSetContains(GRPSPLIT10, 0, (int) data[10 /* night_charge */])
          ? (data[2 /* day_mins */] <767.0f ? 0.5274399f : 1.0493822f)
          : (!GenModel.bitSetContains(GRPSPLIT11, 0, (int) data[10 /* night_charge */])
            ? (!GenModel.bitSetContains(GRPSPLIT12, 0, (int) data[9 /* night_calls */]) ? 0.53036463f : -0.2736812f)
            : (!GenModel.bitSetContains(GRPSPLIT13, 0, (int) data[10 /* night_charge */]) ? 0.0f : -0.12604661f)))
        : (!GenModel.bitSetContains(GRPSPLIT14, 24, (int) data[10 /* night_charge */])
          ? (!GenModel.bitSetContains(GRPSPLIT15, 13, (int) data[10 /* night_charge */])
            ? (!GenModel.bitSetContains(GRPSPLIT16, 0, (int) data[10 /* night_charge */]) ? 0.38343206f : -0.43218976f)
            : (!GenModel.bitSetContains(GRPSPLIT17, 0, (int) data[6 /* eve_calls */]) ? -0.5190755f : -0.43311518f))
          : -0.6530045f)));
    return pred;
  }
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-65, -2, -37, -5, -5, -50, -74, -113, -1, -25, -23, 54, -65, -81, -65, -1, 119, -17, -34, -49, -34, -71, 55, -11, -51, -4, -33, -17, -1, -65, -81, -34, -1, -123, -17, -3, -5, -66, -7, -1, -1, -1, -5, -33, -1, -2, -9, -9, -1, -25, -1, -2, -1, -1, -1, -1, -75, -1, -1, -1, -65, -5, -7, -50, -1, -5, -9, -1, -1, -1, -49, -11, 126, -9, -33, -25, -17, -101, -66, 117, -5, -29, -41, 93, 123, 103, 118, -97, 94, -11, -34, -66, -3, 125, 103, -17, -1, -17, -105, -33, -6, -97, -3, -9, 59, 59, 63, -2, -4, 60, -1, -33, -80, -46, -66, -8, 30};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111101 01111111 11011011 11011111 11011111 01110011 01101101 11110001 11111111 11100111 10010111 01101100 11111101 11110101}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, -13, -1, 47, 79, -13, 126, -2, -1, 87, -5, -33, -1, -2, -121, -18, -67, -34, -35, 95, 1};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-5, -1, -1, -1, -5, -5, -2, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -9, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, 127, -1, -65, -3, -1, -1, -1, 123, -1, -9, -1, -33, -1, -1, -1, -1, 127, -1, -1, -1, -33, -1, -1, -1, -5, -1, -9, -4, 127, -1, -1, -1, -10, 7};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111101 01111111 11011011 11011111 11011111 01110011 01101101 11110001}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111101 01111111 11011011 11011111 11011111 01110011 01101101 11110001}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -81, -10, -37, 23, 94, -17, -1, -1, -1, -23, -33, -53, -42, -1};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -9, -9, -1, -65, -17, -65, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -65, -1, -3, -1, -1, -6, -65, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -65, -1, -3, -1, -1, -1, -1, -9, -1, -1, -1, -9, -65, -5, -9, -18, -1, -1, -65, -1, -1, -3, -1, -1, -33, -1, -1, -33, 47, -1, -11, -1, -5, -1, -9, -9, 126, -1, -5, -1, -1, -1, 127, -17, -1, -5, 3};
  // {...1 0-bits... 10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111101 01111111 11011011 11011111 11011111 01110011 01101101 11110001 11111111 11100111 10010111 01101100 11111101 11110101 11111101 11111111 11101110 11110111 01111011 11110011 01111011 10011101 11101100 10101111 10110011 00111111 11111011 11110111 11111111 11111101 11110101 01111011 11111111 10100001 11110111 10111111 11011111 01111101 10011111 11111111 11111111 11111111 11011111 11111011 11111111 01111111 11101111 11101111 11111111 11100111 11111111 01111111 11111111 11111111 11111111 11111111 10101101 11111111 11111111 11111111 11111101 11011111 10011111 01110011 11111111 11011111 11101111 11111111 11111111 11111111 11110011 10101111 01111110 11101111 11111011 11100111 11110111 11011001 01111101 10101110 11011111 11000111 11101011 10111010 11011110 11100110 01101110 11111001 01111010 10101111 01111011 01111101 10111111 10111110 11100110 11110111 11111111 11110111 11101001 11111011 01011111 11111001 10111111 11101111 11011100 11011100 11111100 01111111 00111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -9, -9, -1, -1, -17, -65, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -65, -1, -3, -1, -1, -6, -65, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -65, -1, -3, -1, -1, -1, -1, -9, -1, -1, -1, -9, -65, -5, -9, -18, -1, -1, -65, -1, -1, -3, -1, -1, -33, -1, -1, -33, 47, -1, -11, -1, -5, -1, -9, -9, 126, -1, -5, -1, -1, -1, 127, -17, -1, -5, 3};
  // {...34 0-bits}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, -112, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 16, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 64, 0, 0, 2};
  // {...34 0-bits}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, -112, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 16, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 64, 0, 0, 2};
  // {...11 0-bits... 10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111101 01111111 11011011 11011111 11011111 01110011 01101101 11110001 11111111 11100111 10010111 01101100}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 110, 6, 0, 32, 16, 0, 4, 0, -64, -120, 1, 12, 0, 32, 2, 0, 4};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111101 01111111 11011011 11011111 11011111 01110011 01101101 11110001 11111111 11100111 10010111 01101100 11111101 11110101 11111101 11111111 11101110 11110111 01111011 11110011 01111011 10011101 11101100 10101111 10110011 00111111 11111011 11110111 11111111 11111101 11110101 01111011 11111111 10100001 11110111 10111111 11011111 01111101 10011111 11111111 11111111 11111111 11011111 11111011 11111111 01111111 11101111 11101111 11111111 11100111 11111111 01111111 11111111 11111111 11111111 11111111 10101101 11111111 11111111 11111111 11111101 11011111 10011111 01110011 11111111 11011111 11101111 11111111 11111111 11111111 11110011 10101111 01111110 11101111 11111011 11100111 11110111 11011001 01111101 10101110 11011111 11000111 11101011 10111010 11011110 11100110 01101110 11111001 01111010 10101111 01111011 01111101 10111111 10111110 11100110 11110111 11111111 11110111 11101001 11111011 01011111 11111001 10111111 11101111 11011100 11011100 11111100 01111111 00111111 00111100}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, -17, -1, -1, -2, -1, -1, -1, -1, -1, -81, -1, -1, -1, -1, -1, -33, -1, -65, -1, -1, -1, 127, -1, -1, -1, -1, -17, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -33, -1, -1, -1, -69, -1, -1, -1, -1, 127, -1, -1, -1, -17, -1, -1, -1, -1, -33, -1, -1, -34, -5, -1, -1, -1, -1, -1, -1, 127, -1, -2, -1, -1, -1, -13, -1, -1, -17, -1, -1, -5, -1, -5, -9, -1, -65, -1, -2, -1, -1, 11};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111101 01111111 11011011 11011111 11011111 01110011 01101101 11110001}
  public static final byte[] GRPSPLIT12 = new byte[] {-3, -1, -1, -57, -1, -9, -1, -1, 127, -1, -1, -1, -1, -9, -33};
  // {}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, -17, -1, -1, -2, -1, -1, -1, -1, -1, -81, -1, -1, -1, -1, -1, -33, -1, -65, -1, -1, -1, 127, -1, -1, -1, -1, -17, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -33, -1, -1, -1, -69, -1, -1, -1, -1, 127, -1, -1, -1, -17, -1, -1, -1, -1, -33, -1, -1, -34, -5, -1, -1, -1, -1, -1, -1, 127, -1, -2, -1, -1, -1, -9, -1, -1, -17, -1, -1, -5, -1, -5, -9, -1, -65, -1, -2, -1, -1, 11};
  // {...24 0-bits}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 2, 0, 0, 0, 0, 0, 32, 32, 0, 0, 0, 8, 0, 0, -128, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 64, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 24, 0, 0, 32, 0, 0, 8, 0, 8};
  // {...13 0-bits}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 16, 0, 0, 0, 0, 0, 32, 0, 0, 8, 16, 0, 0, 32, 0, 2, 0, 0, 0, 0, -128, 0, 0, -128, 0, 4, 0, 16, 0, -128, 64};
  // {}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111101 01111111 11011011 11011111 11011111 01110011 01101101 11110001 11111111}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, 3};
}

class GBMModel__8fe38c53c0ae591a42846386ad74498e_Forest_7 {
  public static void score0(float[] fdata, float[] preds) {
    preds[1] += GBMModel__8fe38c53c0ae591a42846386ad74498e_Tree_7_class_0.score0(fdata);
  }
}
class GBMModel__8fe38c53c0ae591a42846386ad74498e_Tree_7_class_0 {
  static final float score0(float[] data) {
    float pred =  (!GenModel.bitSetContains(GRPSPLIT0, 0, (int) data[10 /* night_charge */])
      ? (!GenModel.bitSetContains(GRPSPLIT1, 0, (int) data[6 /* eve_calls */])
        ? (!GenModel.bitSetContains(GRPSPLIT2, 0, (int) data[11 /* intl_mins */])
          ? (!GenModel.bitSetContains(GRPSPLIT3, 0, (int) data[10 /* night_charge */])
            ? (!GenModel.bitSetContains(GRPSPLIT4, 0, (int) data[6 /* eve_calls */]) ? 0.0f : 0.5432593f)
            : 0.5491794f)
          : (!GenModel.bitSetContains(GRPSPLIT5, 0, (int) data[10 /* night_charge */])
            ? (!GenModel.bitSetContains(GRPSPLIT6, 0, (int) data[6 /* eve_calls */]) ? 0.0f : 0.08176528f)
            : (!GenModel.bitSetContains(GRPSPLIT7, 0, (int) data[10 /* night_charge */]) ? 0.0f : 0.11883937f)))
        : (!GenModel.bitSetContains(GRPSPLIT8, 0, (int) data[10 /* night_charge */])
          ? (!GenModel.bitSetContains(GRPSPLIT9, 0, (int) data[11 /* intl_mins */])
            ? (!GenModel.bitSetContains(GRPSPLIT10, 0, (int) data[3 /* day_calls */]) ? 0.0f : 0.60256046f)
            : -0.3826472f)
          : -0.105961055f))
      : (!GenModel.bitSetContains(GRPSPLIT11, 0, (int) data[6 /* eve_calls */])
        ? (!GenModel.bitSetContains(GRPSPLIT12, 0, (int) data[10 /* night_charge */])
          ? (!GenModel.bitSetContains(GRPSPLIT13, 0, (int) data[11 /* intl_mins */])
            ? (!GenModel.bitSetContains(GRPSPLIT14, 0, (int) data[14 /* svc_calls */]) ? 4.0502896f : 1.2511679f)
            : 0.5012232f)
          : -0.023523659f)
        : (!GenModel.bitSetContains(GRPSPLIT15, 88, (int) data[10 /* night_charge */])
          ? (!GenModel.bitSetContains(GRPSPLIT16, 18, (int) data[10 /* night_charge */])
            ? (data[4 /* day_charge */] <1299.5f ? -0.27929464f : 0.24373382f)
            : (!GenModel.bitSetContains(GRPSPLIT17, 7, (int) data[11 /* intl_mins */]) ? -0.33776394f : -0.6663136f))
          : (!GenModel.bitSetContains(GRPSPLIT18, 5, (int) data[3 /* day_calls */])
            ? (!GenModel.bitSetContains(GRPSPLIT19, 0, (int) data[3 /* day_calls */]) ? -0.6456923f : -0.6499656f)
            : -1.11258f))));
    return pred;
  }
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -43, -33, -1, -3, -19, -65, -86, -1, -17, 78, -107, -1, -65, -65, -1, -25, -17, 62, -49, -33, -3, -9, -1, -19, 125, -1, -49, -1, -77, -17, -1, -1, -59, -17, -3, -5, -65, -1, -1, -17, -1, -5, -1, -1, -2, -9, -9, -1, -9, -1, -2, -1, -1, -1, -1, -73, -2, -1, -1, -65, -1, -5, -18, -17, -65, -9, -65, -13, 127, -41, -1, -1, -1, 126, -18, -17, -1, 87, 117, -37, -17, -1, -67, -1, -18, 57, -73, -18, 117, -1, -65, -3, 127, -1, 110, -2, -2, -1, 77, -17, -1, -65, -33, 127, -65, -11, -65, -3, -81, -1, 45, -1, -11, 123, -5, 22};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 10101011 11111011 11111111 10111111 10110111 11111101 01010101 11111111}
  public static final byte[] GRPSPLIT1 = new byte[] {-91, -7, -85, -124, -105, -37, -3, -65, 127, 95, -13, -97, -116, -42, 4, 5};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 10101011 11111011 11111111 10111111 10110111 11111101 01010101 11111111 11110111 01110010 10101001 11111111 11111101}
  public static final byte[] GRPSPLIT2 = new byte[] {95, -18, 18, -9, -74, 52, -1, -3, 63, -17, -33, -1, -1, -3, -2, -6, 119, -9, -54, -18, 2};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -2, -1, -1, -1, -1, -1, -65, -17, -1, -33, -1, -1, -1, 119, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -33, -1, -1, -1, -33, -9, -69, -1, -1, -2, -1, -1, -9, 127, -1, -1, -73, -9, -1, -1, -1, -1, -1, -5, -1, -1, -33, -1, -1, -1, -1, -1, 127, 7};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 10101011 11111011 11111111 10111111 10110111 11111101 01010101 11111111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -33, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, 1};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {-21, -1, -1, -1, -1, -33, -1, -1, -1, -1, -2, -1, -1, -1, -1, -5, -1, -65, -1, -1, -2, -1, -1, -2, -1, -1, -17, -1, -1, -1, -1, -1, -21, -9, -2, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -33, -1, -3, -1, -1, -1, -1, -1, -5, -1, -17, -1, -1, 127, -65, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -9, -2, -5, -9, -2, -1, -1, -2, -1, 127, -1, -1, -1, -1, -17, -9, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 10101011 11111011 11111111 10111111 10110111 11111101 01010101 11111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, 127, -17, 1};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-21, -1, -1, -1, -1, -33, -1, -1, -1, -1, -2, -1, -1, -1, -1, -5, -1, -65, -1, -1, -2, -1, -1, -2, -1, -1, -17, -1, -1, -1, -1, -1, -17, -9, -2, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -33, -1, -3, -1, -1, -1, -1, -1, -5, -1, -17, -1, -1, 127, -65, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -9, -2, -1, -9, -2, -1, -1, -2, -1, 127, -1, -1, -1, -1, -17, -9, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, 127, -25, -33, -1, -1, -1, -1, -1, -1, -33, -17, -1, -1, -5, -1, -9, -65, -1, -1, -1, -33, -9, -1, -1, -10, -1, -2, -1, -33, -1, -1, -1, -1, -3, -1, 127, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, 127, -1, -1, -1, -5, -33, -3, -65, -5, -1, -1, -1, -1, -1, -9, -1, -81, -65, -1, -1, -1, -1, -1, -1, -99, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -17, -1, -1, -1, -1, -2, -9, -1, -9, -1, -2, -3, -1, 7};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 10101011 11111011 11111111 10111111 10110111 11111101 01010101 11111111 11110111 01110010 10101001 11111111 11111101}
  public static final byte[] GRPSPLIT9 = new byte[] {-9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -2, 3};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 10101011 11111011 11111111 10111111 10110111 11111101 01010101}
  public static final byte[] GRPSPLIT10 = new byte[] {-33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 10101011 11111011 11111111 10111111 10110111 11111101 01010101 11111111}
  public static final byte[] GRPSPLIT11 = new byte[] {95, -89, 59, -69, -14, 51, -33, 47, 125, 111, 63, -79, -5, -3, -9, 1};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -5, -1, -2, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -9, -3, -1, -1, -1, -2, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, 127, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, 115, -1, -1, -1, -1, -2, -2, 127, -1, -1, -1, -1, -17, -73, -2, -1, -1, -1, -1, -1, 123, -1, -1, -33, -3, -1, -1, -67, -1, -1, -1, 31};
  // {10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 10101011 11111011 11111111 10111111 10110111 11111101 01010101 11111111 11110111 01110010 10101001 11111111 11111101}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, -1, -1, -81, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
  // {10110000 01010000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {125, 0, 0, 0};
  // {...88 0-bits}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128};
  // {...18 0-bits}
  public static final byte[] GRPSPLIT16 = new byte[] {65, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, -126, 0, 0, 0, 64, 0, 16, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 32, 32, 2, 0, 0, 0, 65, 64, 0, -88, 0, 0, 8, 0, 4, 2, 0, 0, 0, 0, 0, 0, 1, 16, 0, -120, 0, 0, -128, 16, 0, 16};
  // {...7 0-bits... 10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 10101011 11111011 11111111 10111111 10110111 11111101 01010101 11111111 11110111 01110010 10101001}
  public static final byte[] GRPSPLIT17 = new byte[] {9, 2, 2, 32, 2, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 36, 0, 82, 32};
  // {...5 0-bits... 10110000 01010000 00000000 00000000 00000000 10101110 00000000 11111111 10101011 11111011 11111111 10111111 10110111 11111101}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128};
  // {10110000 01010000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {16, 2, 0, 0};
}

class GBMModel__8fe38c53c0ae591a42846386ad74498e_Forest_8 {
  public static void score0(float[] fdata, float[] preds) {
    preds[1] += GBMModel__8fe38c53c0ae591a42846386ad74498e_Tree_8_class_0.score0(fdata);
  }
}
class GBMModel__8fe38c53c0ae591a42846386ad74498e_Tree_8_class_0 {
  static final float score0(float[] data) {
    float pred =  (!GenModel.bitSetContains(GRPSPLIT0, 0, (int) data[14 /* svc_calls */])
      ? (!GenModel.bitSetContains(GRPSPLIT1, 0, (int) data[10 /* night_charge */])
        ? (!GenModel.bitSetContains(GRPSPLIT2, 0, (int) data[10 /* night_charge */])
          ? (data[2 /* day_mins */] <218.5f
            ? 0.54257107f
            : (data[0 /* vmail */] <0.5f ? 0.52629983f : 0.5303644f))
          : 0.5600102f)
        : 0.16405694f)
      : (!GenModel.bitSetContains(GRPSPLIT3, 0, (int) data[10 /* night_charge */])
        ? (!GenModel.bitSetContains(GRPSPLIT4, 0, (int) data[11 /* intl_mins */])
          ? (!GenModel.bitSetContains(GRPSPLIT5, 0, (int) data[10 /* night_charge */])
            ? (data[2 /* day_mins */] <1487.0f ? 0.4078006f : 0.66464007f)
            : 0.49233493f)
          : (!GenModel.bitSetContains(GRPSPLIT6, 1, (int) data[9 /* night_calls */])
            ? (!GenModel.bitSetContains(GRPSPLIT7, 0, (int) data[3 /* day_calls */]) ? 0.5753319f : 0.08548399f)
            : (!GenModel.bitSetContains(GRPSPLIT8, 5, (int) data[11 /* intl_mins */]) ? -0.08439533f : -0.520992f)))
        : -0.20082916f));
    return pred;
  }
  // {10110000 01110000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {15, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -9, -1, -1, -9, -17, -9, -1, -1, -1, -4, -33, -1, -1, -1, -1, -1, -17, -1, -1, -1, -3, -3, -1, -1, 127, -1, -33, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -5, -1, -65, -13, -1, -41, -1, -2, -1, 126, 127, -1, 127, -97, -1, -1, -13, -1, -1, -1, -65, -46, -89, -1, -3, -1, -1, -1, -1, -9, -33, -1, -10, -33, -1, -65, -2, -65, -17, -65, -1, 127, -1, -10, -18, 127, 127, -83, -1, -1, -1, 30};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -1, -2, -1, -2, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -2, -1, -1, -1, 127, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -5, -1, -33, -1, -1, -1, -9, -1, -1, -1, -2, -1, -17, -65, -1, -1, -1, -1};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {-81, -1, -1, -2, -1, -1, -2, -17, -1, -1, -25, -75, -9, -18, -2, -9, -9, -1, 126, -34, -97, -65, -9, 124, -19, -35, -3, -1, -1, -9, -19, -2, -1, -19, -17, -3, -1, -65, -1, -1, -17, -7, -5, -1, -1, -2, -9, -1, -1, -25, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -65, -1, -69, -2, -1, -65, -9, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, 126, 119, -35, -17, -33, -1, -37, -17, -75, -34, -2, -1, -1, -2, -33, 61, -61, -2, -3, -1, -1, -85, -5, -1, -3, -41, -1, -1, -25, -2, -3, -3, -1, -17, -6, -7, -22, -18, 31};
  // {10110000 01110000 00000000 00000000 00000000 00100000 00000000 11110000 00000000 00000000 00000000 11011000 10000000 00110011 01010000 00000000 00000000 00000000 10101110 00000000 11111111}
  public static final byte[] GRPSPLIT4 = new byte[] {127, -75, 121, -13, 23, 91, -6, -61, 127, 127, -1, -1, 127, -1, -1, -66, -3, -2, 127, -3, 3};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -17, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -9, -1, -1, -1, -1, -1, 126, -5, -19, -1, -1, -1, -1, -33, 127, -1, -1, -1, -1, -1, -65, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -18, -1, -1, -1, 1};
  // {...1 0-bits... 10110000 01110000 00000000 00000000 00000000 00100000 00000000 11110000 00000000 00000000 00000000 11011000 10000000 00110011 01010000}
  public static final byte[] GRPSPLIT6 = new byte[] {-73, -9, -6, 127, -33, -66, -1, -1, -1, 111, -68, -2, -49, -1, 95};
  // {10110000 01110000 00000000 00000000 00000000 00100000 00000000 11110000 00000000 00000000 00000000 11011000 10000000 00110011 01010000}
  public static final byte[] GRPSPLIT7 = new byte[] {125, -11, 111, -29, -11, -5, -1, -1, -1, -1, -1, -2, -82, -37, 127};
  // {...5 0-bits... 10110000 01110000 00000000 00000000 00000000 00100000 00000000 11110000 00000000 00000000 00000000 11011000 10000000 00110011 01010000 00000000 00000000 00000000 10101110 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-127, 72, -128, 1, -104, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, -64, 64, 0, 3, 16};
}

class GBMModel__8fe38c53c0ae591a42846386ad74498e_Forest_9 {
  public static void score0(float[] fdata, float[] preds) {
    preds[1] += GBMModel__8fe38c53c0ae591a42846386ad74498e_Tree_9_class_0.score0(fdata);
  }
}
class GBMModel__8fe38c53c0ae591a42846386ad74498e_Tree_9_class_0 {
  static final float score0(float[] data) {
    float pred =  (data[4 /* day_charge */] <1267.5f
      ? (!GenModel.bitSetContains(GRPSPLIT0, 13, (int) data[10 /* night_charge */])
        ? (!GenModel.bitSetContains(GRPSPLIT1, 0, (int) data[10 /* night_charge */])
          ? (!GenModel.bitSetContains(GRPSPLIT2, 0, (int) data[6 /* eve_calls */])
            ? (!GenModel.bitSetContains(GRPSPLIT3, 0, (int) data[3 /* day_calls */]) ? 0.5598796f : 0.61437285f)
            : (!GenModel.bitSetContains(GRPSPLIT4, 0, (int) data[3 /* day_calls */]) ? -0.022817943f : 0.25777316f))
          : (!GenModel.bitSetContains(GRPSPLIT5, 0, (int) data[14 /* svc_calls */])
            ? (!GenModel.bitSetContains(GRPSPLIT6, 0, (int) data[10 /* night_charge */]) ? 0.47298276f : -0.19161794f)
            : (!GenModel.bitSetContains(GRPSPLIT7, 0, (int) data[11 /* intl_mins */]) ? 0.2509767f : -0.2614038f)))
        : (!GenModel.bitSetContains(GRPSPLIT8, 5, (int) data[11 /* intl_mins */])
          ? (!GenModel.bitSetContains(GRPSPLIT9, 0, (int) data[3 /* day_calls */])
            ? (!GenModel.bitSetContains(GRPSPLIT10, 5, (int) data[9 /* night_calls */]) ? -0.11264381f : -0.5283243f)
            : (!GenModel.bitSetContains(GRPSPLIT11, 0, (int) data[3 /* day_calls */]) ? 0.0f : -0.35366255f))
          : (!GenModel.bitSetContains(GRPSPLIT12, 20, (int) data[9 /* night_calls */])
            ? (!GenModel.bitSetContains(GRPSPLIT13, 22, (int) data[10 /* night_charge */]) ? -0.5304715f : 0.0f)
            : -0.58096796f)))
      : (!GenModel.bitSetContains(GRPSPLIT14, 1, (int) data[4 /* day_charge */])
        ? (!GenModel.bitSetContains(GRPSPLIT15, 1, (int) data[2 /* day_mins */])
          ? (!GenModel.bitSetContains(GRPSPLIT16, 1, (int) data[2 /* day_mins */])
            ? (!GenModel.bitSetContains(GRPSPLIT17, 1, (int) data[2 /* day_mins */]) ? 0.27456933f : 0.0f)
            : 0.0f)
          : 0.0f)
        : 0.0f));
    return pred;
  }
  // {...13 0-bits}
  public static final byte[] GRPSPLIT0 = new byte[] {33, 32, 16, 88, 1, 2, 2, 64, 4, 17, 2, 0, 8, 0, 0, 0, 8, 0, 8, 2, 64, 16, 0, 8, 20, 3, 32, 32, 0, 0, 0, 0, 3, 8, 0, 8, 0, 0, -128, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 10, 0, 0, 0, 32, 0, -128, 0, 0, 0, 0, 98, 0, 0, 1, 0, 0, 0, 1, 0, 32, 88, 0, 32, 0, 32, 0, 3, 76, 20, 2, 0, 64, 0, 0, 32, 1, 0, 40, 0, -126, 0, 16, 4, 0, 3, 16, 0, 0, 0, 9, 16, 24, 4, 0, 68, 0, 8, 16};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -33, -1, -1, -1, -1, -1, -1, -1, 126, -1, -17, -66, -1, -9, -27, -1, 127, -1, -33, -3, 127, -1, -1, -1, -1, -1, -1, -65, -3, -2, -1, -1, -1, -3, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -17, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -9, -1, -1, -1, -1, -9, -2, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, 119, -33, -17, -5, -1, -9, -3, -1, 127, -17, -1, -1, -1, -1, -5, -1, -1, -33, -65, -1, -1, -1, -37, -1, -1, -33, -3, -1, 63, -1, 31};
  // {10000000 00100000 00000000 00000000 00001110 01111001 00100010 11000000 11000000 10110000 01010000 00000000 10110000 00000000 01001110 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, -1, -1, -2, 127, -1, -1, -1, -1, -1, -1, -9, -65, -1, 126, 5};
  // {10000000 00100000 00000000 00000000 00001110 01111001 00100010 11000000 11000000 10110000 01010000 00000000 10110000 00000000 01001110}
  public static final byte[] GRPSPLIT3 = new byte[] {-69, -34, -35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62};
  // {10000000 00100000 00000000 00000000 00001110 01111001 00100010 11000000 11000000 10110000 01010000 00000000 10110000 00000000 01001110}
  public static final byte[] GRPSPLIT4 = new byte[] {-9, 62, 38, -81, -1, -1, -1, 127, -1, -65, -65, -19, -66, -11, 46};
  // {10000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {15, 0, 0, 0};
  // {10000000 00100000 00000000 00000000 00001110 01111001 00100010 11000000 11000000 10110000 01010000 00000000 10110000 00000000 01001110 00000000 10000100 00000100 00001000 00011010 10000000 01000000 01000000 00000010 00100000 10001000 01000000 00000000 00010000 00000000 00000000 00000000 00010000 00000000 00010000 01000000 00000010 00001000 00000000 00010000 00101000 11000000 00000100 00000100 00000000 00000000 00000000 00000000 11000000 00010000 00000000 00010000 00000000 00000000 00000001 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 01010000 00000000 00000000 00000000 00000100 00000000 00000001 00000000 00000000 00000000 00000000 01000110 00000000 00000000 10000000 00000000 00000000 00000000 10000000 00000000 00000100 00011010 00000000 00000100 00000000 00000100 00000000 11000000 00110010 00101000 01000000 00000000 00000010 00000000 00000000 00000100 10000000 00000000 00010100 00000000 01000001 00000000 00001000 00100000 00000000 11000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -9, -1, -2, -10, -17, -9, -1, -1, -1, -7, -33, -1, -1, -1, -1, -1, -17, -17, -1, -1, -1, -3, -1, -1, -1, -1, -33, -1, -1, -65, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -33, -1, -3, -1, -17, -5, -1, -1, -17, -1, -9, -1, 127, -9, 127, 119, -17, 63, -97, -1, -1, -13, -1, 125, -1, -65, -34, -89, -33, 125, -1, -66, -1, -1, -9, 95, -1, -10, -33, -1, -81, -2, 63, -1, -1, -1, 127, -65, -10, -17, 127, -1, -81, -12, -1, -1, 30};
  // {10000000 00100000 00000000 00000000 00001110 01111001 00100010 11000000 11000000 10110000 01010000 00000000 10110000 00000000 01001110 00000000 10000100 00000100 00001000 00011010 10000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -73, -1, 55, 58, 126, -19, 63, 103, -33, -33, -1, -11, -42, -1, -1, -1, -1, -1, 3};
  // {...5 0-bits... 10000000 00100000 00000000 00000000 00001110 01111001 00100010 11000000 11000000 10110000 01010000 00000000 10110000 00000000 01001110 00000000 10000100 00000100 00001000}
  public static final byte[] GRPSPLIT8 = new byte[] {117, 34, 36, 64, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 16, 70, 65, 37};
  // {10000000 00100000 00000000 00000000 00001110 01111001 00100010 11000000 11000000 10110000 01010000 00000000 10110000 00000000 01001110}
  public static final byte[] GRPSPLIT9 = new byte[] {127, -17, -33, -18, -33, -1, -1, -1, -1, -9, -1, -1, -33, -49, 63};
  // {...5 0-bits... 10000000 00100000 00000000 00000000 00001110 01111001 00100010 11000000 11000000 10110000 01010000 00000000 10110000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 10, 1, 0, 0, 0, 0, 0, 0, 0, 0, 6};
  // {10000000 00100000 00000000 00000000 00001110 01111001 00100010 11000000 11000000 10110000 01010000 00000000 10110000 00000000 01001110}
  public static final byte[] GRPSPLIT11 = new byte[] {127, -17, -33, -18, -33, -1, -1, -1, -1, -9, -1, -1, -33, -33, 63};
  // {...20 0-bits... 10000000 00100000 00000000 00000000 00001110 01111001 00100010 11000000 11000000 10110000 01010000 00000000 10110000}
  public static final byte[] GRPSPLIT12 = new byte[] {-79, 34, 0, 0, 0, 0, 0, 0, -128, 16, 33, 0, 8};
  // {...22 0-bits}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 4, 0, 0, 0, -126, 0, 64, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 2};
  // {...1 0-bits... 10000000 00100000 00000000 00000000 00001110 01111001 00100010 11000000 11000000 10110000 01010000 00000000 10110000 00000000 01001110 00000000 10000100 00000100 00001000 00011010 10000000 01000000 01000000 00000010 00100000 10001000 01000000 00000000 00010000 00000000 00000000 00000000 00010000 00000000 00010000 01000000 00000010 00001000 00000000 00010000 00101000 11000000 00000100 00000100 00000000 00000000 00000000 00000000 11000000 00010000}
  public static final byte[] GRPSPLIT14 = new byte[] {-97, -1, -34, -73, -73, -65, -17, -1, -1, -2, -42, 62, 60, -5, -1, -1, 126, -73, 125, -25, -49, 127, 63, 47, -75, 45, -73, -43, 77, -18, 127, -83, -36, -12, -17, 113, 54, -119, 125, 79, -28, -11, 39, 3, 92, -5, -41, -1, -3, 7};
  // {...1 0-bits... 10000000 00100000 00000000 00000000 00001110 01111001 00100010 11000000 11000000 10110000 01010000 00000000 10110000 00000000 01001110 00000000 10000100 00000100 00001000 00011010 10000000 01000000 01000000 00000010 00100000 10001000 01000000 00000000 00010000 00000000 00000000 00000000 00010000 00000000 00010000 01000000 00000010 00001000 00000000 00010000 00101000 11000000 00000100 00000100 00000000 00000000 00000000 00000000 11000000 00010000}
  public static final byte[] GRPSPLIT15 = new byte[] {-97, -1, -34, -73, -73, -65, -17, -1, -1, -2, -42, 62, 121, -10, -1, -1, -3, 110, -5, -50, -97, -1, 126, 94, 106, 91, -34, 86, 55, -71, -1, -75, 114, -45, -65, -57, -39, 84, -84, 39, -22, -11, 39, 3, 92, -17, 95, -1, -9, 31};
  // {...1 0-bits... 10000000 00100000 00000000 00000000 00001110 01111001 00100010 11000000 11000000 10110000 01010000 00000000 10110000 00000000 01001110 00000000 10000100 00000100 00001000 00011010 10000000 01000000 01000000 00000010 00100000 10001000 01000000 00000000 00010000 00000000 00000000 00000000 00010000 00000000 00010000 01000000 00000010 00001000 00000000 00010000 00101000 11000000 00000100 00000100 00000000 00000000 00000000 00000000 11000000 00010000}
  public static final byte[] GRPSPLIT16 = new byte[] {-97, -1, -34, -73, -73, -65, -17, -1, -1, -2, -42, 62, 121, -10, -1, -1, -3, 110, -5, -50, -97, -1, 126, 94, 106, 91, -34, 86, 55, -71, -1, -75, 114, -45, -65, -57, -39, 84, -84, 39, -22, -11, 39, 3, 92, -17, 95, -1, -9, 31};
  // {...1 0-bits... 10000000 00100000 00000000 00000000 00001110 01111001 00100010 11000000 11000000 10110000 01010000 00000000 10110000 00000000 01001110 00000000 10000100 00000100 00001000 00011010 10000000 01000000 01000000 00000010 00100000 10001000 01000000 00000000 00010000 00000000 00000000 00000000 00010000 00000000 00010000 01000000 00000010 00001000 00000000 00010000 00101000 11000000 00000100 00000100 00000000 00000000 00000000 00000000 11000000 00010000}
  public static final byte[] GRPSPLIT17 = new byte[] {-97, -1, -34, -73, -73, -65, -17, -1, -1, -2, -42, 62, 121, -10, -1, -1, -3, 110, -5, -50, -97, -1, 126, 94, 106, 91, -34, 86, 55, -71, -1, -75, 114, -45, -65, -57, -39, 84, -84, 39, -22, -11, 39, 3, 92, -17, 95, -1, -9, 31};
}

